<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tyler的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tylerLiu.top/"/>
  <updated>2019-08-29T05:33:27.805Z</updated>
  <id>https://tylerLiu.top/</id>
  
  <author>
    <name>Tyler Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android AOSP01：VM VirtualBox安装Ubuntu</title>
    <link href="https://tylerLiu.top/2019/08/29/Android-AOSP01%EF%BC%9AVM-VirtualBox%E5%AE%89%E8%A3%85Ubuntu/"/>
    <id>https://tylerLiu.top/2019/08/29/Android-AOSP01：VM-VirtualBox安装Ubuntu/</id>
    <published>2019-08-29T05:09:34.000Z</published>
    <updated>2019-08-29T05:33:27.805Z</updated>
    
    <content type="html"><![CDATA[<p>需要下载的两个文件：</p><ul><li><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">virtualbox</a></li><li><a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener">Ubuntu</a></li></ul><p>具体的软件安装和Ubuntu的安装不再说明，这里在配置Ubuntu的虚拟硬盘时，因为要安装AOSP，所以建议配置200GB，内存4GB。</p><h1 id="安装增强工具"><a href="#安装增强工具" class="headerlink" title="安装增强工具"></a>安装增强工具</h1><p>方便虚拟机和主机之间的复制和粘贴。</p><p>设备 -&gt; 共享文件夹，新建一个共享文件夹，选择自动挂载和固定分配。</p><img src="/2019/08/29/Android-AOSP01：VM-VirtualBox安装Ubuntu/VZg0mT.png"><p>设备 -&gt; 安装增强功能，会在桌面生成一个VBox_GAs_6.0.10，点击运行软件，进行安装配置。</p><img src="/2019/08/29/Android-AOSP01：VM-VirtualBox安装Ubuntu/企业微信截图_15670560508763.png"><p>接着就会在桌面生成一个文件夹sf_share。</p><img src="/2019/08/29/Android-AOSP01：VM-VirtualBox安装Ubuntu/企业微信截图_156705615722.png"><p>通过它就能和主机之间进行文件共享了。</p><p>设备 -&gt; 共享粘贴板，设备 -&gt; 拖放，都选择双向。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要下载的两个文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;virtualbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Android起飞" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/"/>
    
      <category term="框架层" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/"/>
    
      <category term="AOSP" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/AOSP/"/>
    
    
      <category term="AOSP" scheme="https://tylerLiu.top/tags/AOSP/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程04：Launcher启动过程和系统启动流程</title>
    <link href="https://tylerLiu.top/2019/08/28/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B04%EF%BC%9ALauncher%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>https://tylerLiu.top/2019/08/28/Android系统启动流程04：Launcher启动过程和系统启动流程/</id>
    <published>2019-08-28T02:49:16.000Z</published>
    <updated>2019-08-28T06:56:16.903Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/08/28/Android系统启动流程04：Launcher启动过程和系统启动流程/VekSyj.jpg"><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面介绍了init进程、Zygote进程和SystemServer进程的启动过程，现在看看Android系统启动的最后一步：Launcher的启动流程。</p><h1 id="1-Launcher概述"><a href="#1-Launcher概述" class="headerlink" title="1. Launcher概述"></a>1. Launcher概述</h1><p>Andorid系统启动的最后一步是启动一个Home应用程序，这个应用程序用来显示系统中已经安装的应用程序，这个Home程序就叫Launcher。应用程序Launcher在启动过程中会请求<code>PackageManagerService</code>返回系统已经安装的应用程序的信息，并将这些信息封装成一个快捷图标列表显示在系统屏幕上，这样用户就能通过点击这些图标来启动相应的应用程序。</p><h1 id="2-Launcher启动流程"><a href="#2-Launcher启动流程" class="headerlink" title="2. Launcher启动流程"></a>2. Launcher启动流程</h1><p>SystemServer进程启动的过程中会启动<code>PackagerManagerService</code>，<code>PackagerManagerService</code>启动后会将系统中的应用程序安装完成。此前已经启动的<code>ActivityManagerService</code>会将Launcher启动起来。</p><p>启动Launcher的入口为<code>ActiivtyManagerService</code>的<code>systemReady()</code>：frameworks/base/services/java/com/android/server/SystemServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startOtherServices</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">    mActivityManagerService.systemReady(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Slog.i(TAG, <span class="string">"Making services ready"</span>);</span><br><span class="line">                mSystemServiceManager.startBootPhase(</span><br><span class="line">                        SystemService.PHASE_ACTIVITY_MANAGER_READY);</span><br><span class="line">    ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>startOtherServices()</code>中，会调用<code>ActivityManagerService</code>的<code>systemReady()</code>：frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">systemReady</span><span class="params">(<span class="keyword">final</span> Runnable goingCallback)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">        mStackSupervisor.resumeFocusedStackTopActivityLocked();</span><br><span class="line">        mUserController.sendUserSwitchBroadcastsLocked(-<span class="number">1</span>, currentUserId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>systemReady()</code>中调用了<code>ActivityStackSupervisor</code>的<code>resumeFocusedStackTopActivityLocked()</code>：frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeFocusedStackTopActivityLocked</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (targetStack != <span class="keyword">null</span> &amp;&amp; isFocusedStack(targetStack)) &#123;</span><br><span class="line">        <span class="keyword">return</span> targetStack.resumeTopActivityUncheckedLocked(target, targetOptions); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> ActivityRecord r = mFocusedStack.topRunningActivityLocked();</span><br><span class="line">    <span class="keyword">if</span> (r == <span class="keyword">null</span> || r.state != RESUMED) &#123;</span><br><span class="line">        mFocusedStack.resumeTopActivityUncheckedLocked(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用<code>ActivityStack</code>的<code>resumeTopActivityUncheckedLocked()</code>，<code>ActivityStack</code>对象是用来描述Activity堆栈的。<code>resumeTopActivityUncheckedLocked()</code>：frameworks/base/services/core/java/com/android/server/am/ActivityStack.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeTopActivityUncheckedLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;</span><br><span class="line">        <span class="comment">// Don't even start recursing.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Protect against recursion.</span></span><br><span class="line">        mStackSupervisor.inResumeTopActivity = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (mService.mLockScreenShown == ActivityManagerService.LOCK_SCREEN_LEAVING) &#123;</span><br><span class="line">            mService.mLockScreenShown = ActivityManagerService.LOCK_SCREEN_HIDDEN;</span><br><span class="line">            mService.updateSleepIfNeededLocked();</span><br><span class="line">        &#125;</span><br><span class="line">        result = resumeTopActivityInnerLocked(prev, options); <span class="comment">// 1</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mStackSupervisor.inResumeTopActivity = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用了<code>resumeTopActivityInnerLocked()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">resumeTopActivityInnerLocked</span><span class="params">(ActivityRecord prev, ActivityOptions options)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> isOnHomeDisplay() &amp;&amp;</span><br><span class="line">            mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, <span class="string">"prevFinished"</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在里面调用了<code>ActivityStackSupervisor</code>的<code>resumeHomeStackTask()</code>：<br>frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">resumeHomeStackTask</span><span class="params">(<span class="keyword">int</span> homeStackTaskType, ActivityRecord prev, String reason)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="keyword">null</span> &amp;&amp; !r.finishing) &#123;</span><br><span class="line">        mService.setFocusedActivityLocked(r, myReason);</span><br><span class="line">        <span class="keyword">return</span> resumeFocusedStackTopActivityLocked(mHomeStack, prev, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mService.startHomeActivityLocked(mCurrentUser, myReason); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用了<code>ActivityManagerService</code>的<code>startHomeActivityLocked()</code>：<br>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startHomeActivityLocked</span><span class="params">(<span class="keyword">int</span> userId, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL</span><br><span class="line">            &amp;&amp; mTopAction == <span class="keyword">null</span>) &#123; <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Intent intent = getHomeIntent(); <span class="comment">// 2</span></span><br><span class="line">    ActivityInfo aInfo = resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);</span><br><span class="line">    <span class="keyword">if</span> (aInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        intent.setComponent(<span class="keyword">new</span> ComponentName(aInfo.applicationInfo.packageName, aInfo.name));</span><br><span class="line">        aInfo = <span class="keyword">new</span> ActivityInfo(aInfo);</span><br><span class="line">        aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);</span><br><span class="line">        ProcessRecord app = getProcessRecordLocked(aInfo.processName,</span><br><span class="line">                aInfo.applicationInfo.uid, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (app == <span class="keyword">null</span> || app.instrumentationClass == <span class="keyword">null</span>) &#123; <span class="comment">// 3</span></span><br><span class="line">            intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            mActivityStarter.startHomeActivityLocked(intent, aInfo, reason); <span class="comment">// 4</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Slog.wtf(TAG, <span class="string">"No home screen found for "</span> + intent, <span class="keyword">new</span> Throwable());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，<code>mFactoryTest</code>表示系统的运行模式，系统的运行模式分成三种，分别是非工厂模式、低级工厂模式和高级工厂模式。<code>mTopAction</code>用来描述第一个被启动Activity的组件Action，它的值为<code>Intent.ACTION_MAIN</code>。因此，注释1的代码的意思是<code>mFactoryTest</code>为<code>FactoryTest.FACTORY_TEST_LOW_LECEL</code>（低级工厂模式），并且<code>mTopAction == null</code>时，直接返回<code>false</code>。</p><p>注释2，<code>getHomeIntent()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Intent <span class="title">getHomeIntent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Intent intent = <span class="keyword">new</span> Intent(mTopAction, mTopData != <span class="keyword">null</span> ? Uri.parse(mTopData) : <span class="keyword">null</span>);</span><br><span class="line">    intent.setComponent(mTopComponent);</span><br><span class="line">    intent.addFlags(Intent.FLAG_DEBUG_TRIAGED_MISSING);</span><br><span class="line">    <span class="keyword">if</span> (mFactoryTest != FactoryTest.FACTORY_TEST_LOW_LEVEL) &#123;</span><br><span class="line">        intent.addCategory(Intent.CATEGORY_HOME);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> intent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getHomeIntent()</code>中创建了<code>Intent</code>，并将<code>mTopAction</code>和<code>mTopData</code>传入。<code>mTopAction</code>的值为<code>Intent.ACITON_MAIN</code>，并且如果系统运行模式不是低级工厂模式，则将<code>Intent</code>的<code>Category</code>设置为<code>Intnent.CATEGORY_HOME</code>。</p><p>再回到<code>ActivityManagerService</code>的<code>startHomeActivityLocked()</code>，假设系统的运行默模式不是低级工厂模式，在注释3处判断符合<code>Action</code>为<code>Intent.ACTION_MAIN</code>，<code>Category</code>为<code>Intent.CATEGORY_HOME</code>的应用程序是否已经启动，如果没有启动，则调用注释4的方法启动该应用程序。</p><p>这个被启动的应用程序就是Launcher，因为Launcher的Manifest文件中的<code>intent-filter</code>标签匹配了<code>Action</code>为<code>Intent.ACTION_MAIN</code>，<code>Category</code>为<code>Intent.CATEGORY_HOME</code>。Launcher的Manifest文件如下：packages/apps/Launcher3/AndroidManifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.android.launcher3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">"23"</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"16"</span>/&gt;</span></span><br><span class="line"> ...</span><br><span class="line"> <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line">        &lt;activity</span><br><span class="line">            android:name="com.android.launcher3.Launcher"</span><br><span class="line">            android:launchMode="singleTask"</span><br><span class="line">            android:clearTaskOnLaunch="true"</span><br><span class="line">            android:stateNotNeeded="true"</span><br><span class="line">            android:theme="@style/Theme"</span><br><span class="line">            android:windowSoftInputMode="adjustPan"</span><br><span class="line">            android:screenOrientation="nosensor"</span><br><span class="line">            android:configChanges="keyboard|keyboardHidden|navigation"</span><br><span class="line">            android:resumeWhilePausing="true"</span><br><span class="line">            android:taskAffinity=""</span><br><span class="line">            android:enabled="true"&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.HOME"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.MONKEY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，应用程序Launcher就被启动起来了，并执行其<code>OnCreate()</code>。</p><h1 id="3-Launcher中应用图标显示流程"><a href="#3-Launcher中应用图标显示流程" class="headerlink" title="3. Launcher中应用图标显示流程"></a>3. Launcher中应用图标显示流程</h1><p>Launcher的<code>onCreate()</code>代码如下：packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    LauncherAppState app = LauncherAppState.getInstance(); <span class="comment">// 1</span></span><br><span class="line">    mDeviceProfile = getResources().getConfiguration().orientation</span><br><span class="line">            == Configuration.ORIENTATION_LANDSCAPE ?</span><br><span class="line">            app.getInvariantDeviceProfile().landscapeProfile</span><br><span class="line">            : app.getInvariantDeviceProfile().portraitProfile;</span><br><span class="line">    mSharedPrefs = Utilities.getPrefs(<span class="keyword">this</span>);</span><br><span class="line">    mIsSafeModeEnabled = getPackageManager().isSafeMode();</span><br><span class="line">    mModel = app.setLauncher(<span class="keyword">this</span>); <span class="comment">// 2</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (!mRestoring) &#123;</span><br><span class="line">        <span class="keyword">if</span> (DISABLE_SYNCHRONOUS_BINDING_CURRENT_PAGE) &#123;</span><br><span class="line">            mModel.startLoader(PagedView.INVALID_RESTORE_PAGE); <span class="comment">// 3</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mModel.startLoader(mWorkspace.getRestorePage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，获取<code>LauncherAppState</code>实例，并在注释2调用其<code>setLauncher()</code>，将<code>Launcher</code>对象传入，<code>Launcher</code>的<code>setLauncher()</code>如下：packages/apps/Launcher3/src/com/android/launcher3/LauncherAppState.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LauncherModel <span class="title">setLauncher</span><span class="params">(Launcher launcher)</span> </span>&#123;</span><br><span class="line">    getLauncherProvider().setLauncherProviderChangeListener(launcher);</span><br><span class="line">    mModel.initialize(launcher); <span class="comment">// 1</span></span><br><span class="line">    mAccessibilityDelegate = ((launcher != <span class="keyword">null</span>) &amp;&amp; Utilities.ATLEAST_LOLLIPOP) ?</span><br><span class="line">       <span class="keyword">new</span> LauncherAccessibilityDelegate(launcher) : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> mModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用<code>LauncherModel</code>的<code>initialize()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(Callbacks callbacks)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        unbindItemInfosAndClearQueuedBindRunnables();</span><br><span class="line">        mCallbacks = <span class="keyword">new</span> WeakReference&lt;Callbacks&gt;(callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>initialize()</code>中，会将<code>callbacks</code>，即传入的<code>Launcher</code>封装成一个弱引用对象，。所以可以得知，<code>mCallbacks</code>变量指的就是封装成弱引用对象的<code>Launcher</code>，这个<code>mCallbacks</code>后面会用到。</p><p>现在在回到<code>Launcher</code>的<code>onCreate()</code>，在注释3调用了<code>LauncherModel</code>的<code>startLoader()</code>：packages/apps/Launcher3/src/com/android/launcher3/LauncherModel.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Thunk</span> <span class="keyword">static</span> <span class="keyword">final</span> HandlerThread sWorkerThread = <span class="keyword">new</span> HandlerThread(<span class="string">"launcher-loader"</span>); <span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        sWorkerThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Thunk</span> <span class="keyword">static</span> <span class="keyword">final</span> Handler sWorker = <span class="keyword">new</span> Handler(sWorkerThread.getLooper()); <span class="comment">// 2</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startLoader</span><span class="params">(<span class="keyword">int</span> synchronousBindPage, <span class="keyword">int</span> loadFlags)</span> </span>&#123;s</span><br><span class="line">    InstallShortcutReceiver.enableInstallQueue();</span><br><span class="line">    <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mDeferredBindRunnables) &#123;</span><br><span class="line">            mDeferredBindRunnables.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (mCallbacks != <span class="keyword">null</span> &amp;&amp; mCallbacks.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stopLoaderLocked();</span><br><span class="line">            mLoaderTask = <span class="keyword">new</span> LoaderTask(mApp.getContext(), loadFlags); <span class="comment">// 3</span></span><br><span class="line">            <span class="keyword">if</span> (synchronousBindPage != PagedView.INVALID_RESTORE_PAGE</span><br><span class="line">                    &amp;&amp; mAllAppsLoaded &amp;&amp; mWorkspaceLoaded &amp;&amp; !mIsLoaderTaskRunning) &#123;</span><br><span class="line">                mLoaderTask.runBindSynchronousPage(synchronousBindPage);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sWorkerThread.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">                sWorker.post(mLoaderTask); <span class="comment">// 4</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，创建具有消息循环的线程<code>HanlderThread</code>对象。</p><p>注释2，创建<code>Handler</code>，并传入<code>HandlerThread</code>的<code>Looper</code>。<code>Handler</code>的作用就是向<code>HandlerThread</code>发送消息。</p><p>注释3，创建<code>LoaderTask</code>。</p><p>注释4，将<code>LoaderTask</code>作为消息，发送给<code>HandlerThread</code>。<code>LoaderTask</code>实现了<code>Runnable</code>接口，当<code>LoaderTask</code>所描述的消息被处理时，会调用它的<code>run()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LoaderTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mIsLoaderTaskRunning = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        keep_running: &#123;</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"step 1: loading workspace"</span>);</span><br><span class="line">            loadAndBindWorkspace(); <span class="comment">// 1</span></span><br><span class="line">            <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">                <span class="keyword">break</span> keep_running;</span><br><span class="line">            &#125;</span><br><span class="line">            waitForIdle();</span><br><span class="line">            <span class="keyword">if</span> (DEBUG_LOADERS) Log.d(TAG, <span class="string">"step 2: loading all apps"</span>);</span><br><span class="line">            loadAndBindAllApps(); <span class="comment">// 2</span></span><br><span class="line">        &#125;</span><br><span class="line">        mContext = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (mLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mLoaderTask == <span class="keyword">this</span>) &#123;</span><br><span class="line">                mLoaderTask = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mIsLoaderTaskRunning = <span class="keyword">false</span>;</span><br><span class="line">            mHasLoaderCompletedOnce = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Launcher</code>是用工作区的形式来显示系统安装的应用程序的快捷图标，每一个工作区都是来描述一个抽象的桌面的，它是由n个屏幕组成，每个屏幕又分成n个单元格，每个单元格用来显示一个应用程序的快捷图标。</p><p>注释1，调用<code>loadAndBindWorkspace()</code>来加载工作区信息。</p><p>注释2，调用<code>loadAndBindAllApps()</code>来加载系统已经安装的应用程序的信息。</p><p><code>loadAndBindAllApps()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadAndBindAllApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"loadAndBindAllApps mAllAppsLoaded="</span> + mAllAppsLoaded);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!mAllAppsLoaded) &#123;</span><br><span class="line">        loadAllApps(); <span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">synchronized</span> (LoaderTask.<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        updateIconCache();</span><br><span class="line">        <span class="keyword">synchronized</span> (LoaderTask.<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mStopped) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mAllAppsLoaded = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        onlyBindAllApps();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果系统没有加载已经安装的应用程序信息，则会调用注释1的<code>loadAllApps()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadAllApps</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    mHandler.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> bindTime = SystemClock.uptimeMillis();</span><br><span class="line">            <span class="keyword">final</span> Callbacks callbacks = tryGetCallbacks(oldCallbacks);</span><br><span class="line">            <span class="keyword">if</span> (callbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">                callbacks.bindAllApplications(added); <span class="comment">// 1</span></span><br><span class="line">                <span class="keyword">if</span> (DEBUG_LOADERS) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"bound "</span> + added.size() + <span class="string">" apps in "</span></span><br><span class="line">                            + (SystemClock.uptimeMillis() - bindTime) + <span class="string">"ms"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.i(TAG, <span class="string">"not binding apps: no Launcher activity"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用<code>bindAllApplications()</code>，从前面得知这个<code>callbacks</code>实际指向的是<code>Launcher</code>的弱引用，所以实际调用的是<code>Launcher</code>的<code>bindAllApplications()</code>：<br>packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindAllApplications</span><span class="params">(<span class="keyword">final</span> ArrayList&lt;AppInfo&gt; apps)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (waitUntilResume(mBindAllApplicationsRunnable, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        mTmpAppsList = apps;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mAppsView != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mAppsView.setApps(apps); <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mLauncherCallbacks != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mLauncherCallbacks.bindAllApplications(apps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用<code>AllAppsContainerView</code>的<code>setApps()</code>，并将包含应用信息的列表<code>apps</code>传进去，<code>setApps()</code>：packages/apps/Launcher3/src/com/android/launcher3/allapps/AllAppsContainerView.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApps</span><span class="params">(List&lt;AppInfo&gt; apps)</span> </span>&#123;</span><br><span class="line">    mApps.setApps(apps);</span><br><span class="line">&#125;</span><br><span class="line">包含应用程序信息的列表的`apps`传递给了`AllAppsContainerView`，再看看`AllAppsContainerView`的`onFinishInflate()`：</span><br><span class="line">```java</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFinishInflate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onFinishInflate();</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Load the all apps recycler view</span></span><br><span class="line">    mAppsRecyclerView = (AllAppsRecyclerView) findViewById(R.id.apps_list_view); <span class="comment">// 1</span></span><br><span class="line">    mAppsRecyclerView.setApps(mApps); <span class="comment">// 2</span></span><br><span class="line">    mAppsRecyclerView.setLayoutManager(mLayoutManager);</span><br><span class="line">    mAppsRecyclerView.setAdapter(mAdapter); <span class="comment">// 3</span></span><br><span class="line">    mAppsRecyclerView.setHasFixedSize(<span class="keyword">true</span>);</span><br><span class="line">    mAppsRecyclerView.addOnScrollListener(mElevationController);</span><br><span class="line">    mAppsRecyclerView.setElevationController(mElevationController);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>onFinishInflate()</code>在加载完xml文件后就会调用。</p><p>注释1，得到<code>AllAppsRecyclerView</code>用来显示App列表。</p><p>注释2，将<code>apps</code>的信息列表传进去。</p><p>注释3，为<code>AllAppsRecyclerView</code>设置<code>Adapter</code>。</p><p>这样应用程序快捷图标就会显示在屏幕上。</p><p><code>Launcher</code>的启动流程就结束了，下面看看Android系统启动流程。</p><h1 id="4-Android系统启动流程"><a href="#4-Android系统启动流程" class="headerlink" title="4. Android系统启动流程"></a>4. Android系统启动流程</h1><p>结合前面的所有内容，就可以得出Android系统启动流程。</p><h2 id="4-1-启动电源以及系统启动"><a href="#4-1-启动电源以及系统启动" class="headerlink" title="4.1 启动电源以及系统启动"></a>4.1 启动电源以及系统启动</h2><p>当按下电源时，引导芯片代码开始从预定义的地方（固化在ROM）开始执行。加载引导程序Bootloader到RAM，然后执行。</p><h2 id="4-2-引导程序BootLoader"><a href="#4-2-引导程序BootLoader" class="headerlink" title="4.2 引导程序BootLoader"></a>4.2 引导程序BootLoader</h2><p>引导程序BootLoader是在Android操作系统开始运行前的一个小程序，主要作用是把系统OS拉起并运行。</p><h2 id="4-3-Linux内核启动"><a href="#4-3-Linux内核启动" class="headerlink" title="4.3 Linux内核启动"></a>4.3 Linux内核启动</h2><p>内核启动时，设置缓存、被保护存储器、计划列表、加载驱动。当内核完成系统设置，它首先在系统文件中寻找init.rc文件，并启动init进程。</p><h2 id="4-4-init进程启动"><a href="#4-4-init进程启动" class="headerlink" title="4.4 init进程启动"></a>4.4 init进程启动</h2><p>初始化和启动属性服务，并启动Zygote进程。</p><h2 id="4-5-Zygote进程启动"><a href="#4-5-Zygote进程启动" class="headerlink" title="4.5 Zygote进程启动"></a>4.5 Zygote进程启动</h2><p>创建Java VM并为Java VM注册JNI，创建服务端Socket，启动SystemServer进程。</p><h2 id="4-6-SystemServer进程启动"><a href="#4-6-SystemServer进程启动" class="headerlink" title="4.6 SystemServer进程启动"></a>4.6 SystemServer进程启动</h2><p>启动Binder线程池和<code>SystemServiceManager</code>，并启动各种系统服务。</p><h2 id="4-7-Launcher启动"><a href="#4-7-Launcher启动" class="headerlink" title="4.7 Launcher启动"></a>4.7 Launcher启动</h2><p>被SystemServer进程启动的<code>ActivityManagerService</code>会启动<code>Launcher</code>，<code>Launcer</code>启动后，会将已经安装的应用的快捷图标显示在屏幕上。</p><img src="/2019/08/28/Android系统启动流程04：Launcher启动过程和系统启动流程/VeFzlQ.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/08/28/Android系统启动流程04：Launcher启动过程和系统启动流程/VekSyj.jpg&quot;&gt;

&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Android起飞" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/"/>
    
      <category term="框架层" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/"/>
    
      <category term="系统启动" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
    
      <category term="Android系统启动" scheme="https://tylerLiu.top/tags/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程03：SystemServer进程</title>
    <link href="https://tylerLiu.top/2019/08/27/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B03%EF%BC%9ASystemServer%E8%BF%9B%E7%A8%8B/"/>
    <id>https://tylerLiu.top/2019/08/27/Android系统启动流程03：SystemServer进程/</id>
    <published>2019-08-27T07:45:13.000Z</published>
    <updated>2019-08-28T02:46:50.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>上文知道，Zygote进程最终启动了SystemServer进程，现在就来看看SystemServer进程的启动过程。基于Android 7.0。</p><h1 id="1-Zygote启动SystemServer进程"><a href="#1-Zygote启动SystemServer进程" class="headerlink" title="1. Zygote启动SystemServer进程"></a>1. Zygote启动SystemServer进程</h1><p>上篇说到，在<code>ZygoteInit.java</code>中的<code>startSystemServer()</code>启动了SystemServer进程：frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startSystemServer</span><span class="params">(String abiList, String socketName)</span></span></span><br><span class="line"><span class="function">           <span class="keyword">throws</span> MethodAndArgsCaller, RuntimeException </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">       <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">               waitForSecondaryZygote(socketName);</span><br><span class="line">           &#125;</span><br><span class="line">           handleSystemServerProcess(parsedArgs);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在里面最终通过<code>handleSystemServerProcess()</code>来启动了SystemServer进程。</p><h1 id="2-SystemServer进程的启动过程"><a href="#2-SystemServer进程的启动过程" class="headerlink" title="2. SystemServer进程的启动过程"></a>2. SystemServer进程的启动过程</h1><p><code>handleSystemServerProcess()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleSystemServerProcess</span><span class="params">(ZygoteConnection.Arguments parsedArgs)</span> <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line"></span><br><span class="line">    closeServerSocket(); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parsedArgs.invokeWith != <span class="keyword">null</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        ......</span><br><span class="line">        </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ClassLoader cl = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (systemServerClasspath != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cl = createSystemServerClassLoader(systemServerClasspath, parsedArgs.targetSdkVersion);</span><br><span class="line">            Thread.currentThread().setContextClassLoader(cl);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Pass the remaining arguments to SystemServer.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RuntimeInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SystemServer进程复制了Zygote进程地址空间，因此也会得到Zygote进程创建的Socket，这个Socket对于SystemServer进程没有用处，因此，需要用注释1的代码关闭Socket。</p><p>注释2，调用<code>RuntimeInit</code>的<code>zygoteInte()</code>：frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">zygoteInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DEBUG) Slog.d(TAG, <span class="string">"RuntimeInit: Starting application from zygote"</span>);</span><br><span class="line"></span><br><span class="line">    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"RuntimeInit"</span>);</span><br><span class="line">    redirectLogStreams();</span><br><span class="line"></span><br><span class="line">    commonInit();</span><br><span class="line">    nativeZygoteInit(); <span class="comment">// 1</span></span><br><span class="line">    applicationInit(targetSdkVersion, argv, classLoader); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用<code>nativeZygoteInit()</code>，在里面调用了Native层的代码。</p><h2 id="2-1-启动Binder线程池"><a href="#2-1-启动Binder线程池" class="headerlink" title="2.1 启动Binder线程池"></a>2.1 启动Binder线程池</h2><p><code>nativeZygoteInit()</code>对应的JNI文件：frameworks/base/core/jni/AndroidRuntime.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> JNINativeMethod gMethods[] = &#123;</span><br><span class="line">    &#123; <span class="string">"nativeFinishInit"</span>, <span class="string">"()V"</span>,</span><br><span class="line">        (<span class="keyword">void</span>*) com_android_internal_os_RuntimeInit_nativeFinishInit &#125;,</span><br><span class="line">    &#123; <span class="string">"nativeZygoteInit"</span>, <span class="string">"()V"</span>,</span><br><span class="line">        (<span class="keyword">void</span>*) com_android_internal_os_RuntimeInit_nativeZygoteInit &#125;,</span><br><span class="line">    &#123; <span class="string">"nativeSetExitWithoutCleanup"</span>, <span class="string">"(Z)V"</span>,</span><br><span class="line">        (<span class="keyword">void</span>*) com_android_internal_os_RuntimeInit_nativeSetExitWithoutCleanup &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过JNI的<code>gMethods()</code>数组，可以看出<code>nativeZygoteInit()</code>对应的是JNI文件AndroidRuntime.cpp的<code>com_android_internal_os_RuntimeInit_nativeZygote()</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">static</span> AndroidRuntime* gCurRuntime = <span class="literal">NULL</span>;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">com_android_internal_os_RuntimeInit_nativeZygoteInit</span><span class="params">(JNIEnv* env, jobject clazz)</span></span>&#123;</span><br><span class="line">    gCurRuntime-&gt;onZygoteInit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>gCurRuntime</code>是<code>AndoridRuntime</code>类型的指针，<code>AndroidRuntime</code>的子类<code>AppRuntime</code>在app_main.cpp中定义，下面查看<code>AppRuntime</code>的<code>onZygoteInit()</code>：frameworks/base/cmds/app_process/app_main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onZygoteInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sp&lt;ProcessState&gt; proc = ProcessState::self();</span><br><span class="line">    ALOGV(<span class="string">"App process: starting thread pool.\n"</span>);</span><br><span class="line">    proc-&gt;startThreadPool(); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，用来启动一个Binder线程池，这样SystemServer进程就可以使用Binder来与其他进程进行通信了。所以<code>RuntimeInit.java</code>的<code>nativeZygote()</code>主要是启动Binder线程池。</p><h2 id="2-2-invokeStaticMain"><a href="#2-2-invokeStaticMain" class="headerlink" title="2.2 invokeStaticMain"></a>2.2 invokeStaticMain</h2><p>再回到<code>RuntimeInit.java</code>，在注释2处调用了<code>applicationInit()</code>：frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">applicationInit</span><span class="params">(<span class="keyword">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    invokeStaticMain(args.startClass, args.startArgs, classLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>applicationInit()</code>最终主要调用了<code>invokeStaticMain()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">invokeStaticMain</span><span class="params">(String className, String[] argv, ClassLoader classLoader)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ZygoteInit.MethodAndArgsCaller </span>&#123;</span><br><span class="line">    Class&lt;?&gt; cl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        cl = Class.forName(className, <span class="keyword">true</span>, classLoader); <span class="comment">// 1</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Missing class when invoking static main "</span> + className,</span><br><span class="line">                ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Method m;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        m = cl.getMethod(<span class="string">"main"</span>, <span class="keyword">new</span> Class[] &#123; String[].class &#125;); <span class="comment">// 2</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Missing static main on "</span> + className, ex);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SecurityException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Problem getting static main on "</span> + className, ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> modifiers = m.getModifiers();</span><br><span class="line">    <span class="keyword">if</span> (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Main method is not public and static on "</span> + className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This throw gets caught in ZygoteInit.main(), which responds</span></span><br><span class="line"><span class="comment">     * by invoking the exception's run() method. This arrangement</span></span><br><span class="line"><span class="comment">     * clears up all the stack frames that were required in setting</span></span><br><span class="line"><span class="comment">     * up the process.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ZygoteInit.MethodAndArgsCaller(m, argv); <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，<code>className</code>为<code>&quot;com.android.server.SystemServer&quot;</code>，因此通过反射返回的<code>cl</code>为<code>SystemServer</code>类。</p><p>注释2，找到<code>SystemServer</code>中的<code>main()</code>。</p><p>注释3，将找到的<code>main()</code>传入到<code>MethodAndArgsCaller()</code>异常中，并抛出该异常。截获<code>MethodAndArgsCaller()</code>异常的代码在<code>ZygoteInit.java</code>的<code>main()</code>中。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">     ...</span><br><span class="line">          closeServerSocket();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class="line">          caller.run(); <span class="comment">// 1</span></span><br><span class="line">      &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">          Log.e(TAG, <span class="string">"Zygote died with exception"</span>, ex);</span><br><span class="line">          closeServerSocket();</span><br><span class="line">          <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用了<code>MethodAndArgsCaller</code>的<code>run()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mMethod.invoke(<span class="keyword">null</span>, <span class="keyword">new</span> Object[] &#123; mArgs &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>mMethod</code>指的就是<code>SystemServer</code>中的<code>main()</code>，此时<code>main()</code>就被动态调用起来。</p><h1 id="3-解析SystemServer进行"><a href="#3-解析SystemServer进行" class="headerlink" title="3. 解析SystemServer进行"></a>3. 解析SystemServer进行</h1><p>下面看看<code>SystemServer</code>的<code>main()</code>：frameworks/base/services/java/com/android/server/SystemServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">new</span> SystemServer().run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在里面只是调用了<code>SystemServer</code>的<code>run()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   ...</span><br><span class="line">       System.loadLibrary(<span class="string">"android_servers"</span>); <span class="comment">// 1</span></span><br><span class="line">   ...</span><br><span class="line">       mSystemServiceManager = <span class="keyword">new</span> SystemServiceManager(mSystemContext); <span class="comment">// 2</span></span><br><span class="line">       LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);</span><br><span class="line">   ...    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">       Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, <span class="string">"StartServices"</span>);</span><br><span class="line">       startBootstrapServices(); <span class="comment">// 3</span></span><br><span class="line">       startCoreServices(); <span class="comment">// 4</span></span><br><span class="line">       startOtherServices(); <span class="comment">// 5</span></span><br><span class="line">   &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">       Slog.e(<span class="string">"System"</span>, <span class="string">"******************************************"</span>);</span><br><span class="line">       Slog.e(<span class="string">"System"</span>, <span class="string">"************ Failure starting system services"</span>, ex);</span><br><span class="line">       <span class="keyword">throw</span> ex;</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">   &#125;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，加载lib库andorid_servers.so。</p><p>注释2，创建<code>SystemServiceManager</code>，它会对系统的服务进行创建、启动和生命周期管理。</p><p>下面就是启动系统的各种服务。</p><p>注释3，<code>startBootstrapServices()</code>中使用<code>SystemServiceManager</code>启动了<code>ActivityManagerService</code>、<code>PowerManagerService</code>、<code>PackageManagerService</code>等服务。</p><p>注释4，<code>startCoreServices()</code>中启动了<code>BatteryService</code>、<code>UsageStatesService</code>和<code>WebViewUpdateService</code>。</p><p>注释5，<code>startOtherServices()</code>中启动了<code>CameraService</code>、<code>AlarmManagerService</code>、<code>VrManagerService</code>等服务。</p><p>这些服务的父类为<code>SystemService</code>。</p><p>从注释3、4、5可以看出，官方将服务分成三类，引导服务、核心服务和其他服务，其中其他服务是一些非紧要的和一些不需要立即启动的服务。系统服务大约有80多个，下面列举了部分服务及其作用。</p><table><thead><tr><th align="left"><strong>引导服务</strong></th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">Installer</td><td align="left">系统安装APK时的一个服务类，启动完成Installer服务后，才能启动其它的系统服务</td></tr><tr><td align="left">ActivtyManagerService</td><td align="left">负责四大组件的启动、切换和调度</td></tr><tr><td align="left">PowerManagerService</td><td align="left">计算系统中和Power相关的计算，然后决策系统应该如何反应</td></tr><tr><td align="left">LightsService</td><td align="left">管理和显示背光LED</td></tr><tr><td align="left">DisplayManagerService</td><td align="left">用来管理所有显示设备</td></tr><tr><td align="left">UserManagerService</td><td align="left">多用户模式管理</td></tr><tr><td align="left">SensorService</td><td align="left">为系统提供各种感应器服务</td></tr><tr><td align="left">PackageManagerService</td><td align="left">用来对APK进行安装、解析、删除、卸载等操作</td></tr><tr><td align="left"><strong>核心服务</strong></td><td align="left"></td></tr><tr><td align="left">BatteryService</td><td align="left">管理电池相关的服务</td></tr><tr><td align="left">UsageStatsService</td><td align="left">收集用户使用每一个APP的频率、使用时长</td></tr><tr><td align="left">WebViewUpdateService</td><td align="left">WebView更新服务</td></tr><tr><td align="left"><strong>其他服务</strong></td><td align="left"></td></tr><tr><td align="left">CameraService</td><td align="left">摄像头相关服务</td></tr><tr><td align="left">AlarmManagerService</td><td align="left">全局定时器管理服务</td></tr><tr><td align="left">InputManagerService</td><td align="left">管理输入事件</td></tr><tr><td align="left">WindowManagerService</td><td align="left">窗口管理服务</td></tr><tr><td align="left">VrManagerService</td><td align="left">VR模式管理服务</td></tr><tr><td align="left">BluetoothService</td><td align="left">蓝牙管理服务</td></tr><tr><td align="left">NotificationManagerService</td><td align="left">通知管理服务</td></tr><tr><td align="left">DevicesStorageMonitorService</td><td align="left">存储相关服务</td></tr><tr><td align="left">LocationManagerService</td><td align="left">定位管理服务</td></tr><tr><td align="left">AudioService</td><td align="left">音频管理服务</td></tr><tr><td align="left">…</td><td align="left">…</td></tr></tbody></table><p>假如要启动<code>PowerManagerService</code>，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPowerManagerService = mSystemServiceManager.startService(PowerManagerService.class);</span><br></pre></td></tr></table></figure><p><code>SystemServiceManager</code>的<code>startService()</code>启动了<code>PowerManagerService</code>，<code>startService()</code>具体如下：frameworks/base/services/core/java/com/android/server/SystemServerManager.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T extends SystemService&gt; <span class="function">T <span class="title">startService</span><span class="params">(Class&lt;T&gt; serviceClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> String name = serviceClass.getName();</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_SYSTEM_SERVER, <span class="string">"StartService "</span> + name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create the service.</span></span><br><span class="line">        <span class="keyword">if</span> (!SystemService.class.isAssignableFrom(serviceClass)) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> T service;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Constructor&lt;T&gt; constructor = serviceClass.getConstructor(Context.class);</span><br><span class="line">            service = constructor.newInstance(mContext); <span class="comment">// 1</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register it.</span></span><br><span class="line">        mServices.add(service); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Start it.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            service.onStart(); <span class="comment">// 3</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            ......</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_SYSTEM_SERVER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，创建<code>SystemServer</code>，这里的<code>SystemServer</code>就是前面传进来的<code>PowerManagerService</code>。</p><p>注释2，将<code>PowerManagerService</code>添加到<code>mServices</code>中，这里的<code>mServices</code>是一个存储<code>SystemService</code>类型的<code>ArrayList</code>。</p><p>注释3，调用传进来的<code>PowerManagerSerivce</code>的<code>onStart()</code>启动<code>PowerManagerService</code>并返回。</p><p>除了使用<code>mSystemServiceManager</code>的<code>startService()</code>来启动系统服务之外，还可以通知如下形式来启动系统服务，以<code>PackageManagerService</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mPackageManagerService = PackageManagerService.main(mSystemContext, installer, mFactoryTestMode != FactoryTest.FACTORY_TEST_OFF, mOnlyCore);</span><br></pre></td></tr></table></figure><p>直接调用了<code>PackageManagerService</code>的<code>main()</code>：frameworks/base/service/core/java/com/android/server/pm/PackageManagerService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PackageManagerService <span class="title">main</span><span class="params">(Context context, Installer installer,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">boolean</span> factoryTest, <span class="keyword">boolean</span> onlyCore)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Self-check for initial settings.</span></span><br><span class="line">    PackageManagerServiceCompilerMapping.checkProperties();</span><br><span class="line"></span><br><span class="line">    PackageManagerService m = <span class="keyword">new</span> PackageManagerService(context, installer,</span><br><span class="line">            factoryTest, onlyCore); <span class="comment">// 1</span></span><br><span class="line">    m.enableSystemUserPackages();</span><br><span class="line">    <span class="comment">// Disable any carrier apps. We do this very early in boot to prevent the apps from being</span></span><br><span class="line">    <span class="comment">// disabled after already being started.</span></span><br><span class="line">    CarrierAppUtils.disableCarrierAppsUntilPrivileged(context.getOpPackageName(), m,</span><br><span class="line">            UserHandle.USER_SYSTEM);</span><br><span class="line">    ServiceManager.addService(<span class="string">"package"</span>, m); <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，创建<code>PackageManagerService</code>。</p><p>注释2，将<code>PackageManagerService</code>注册到<code>ServiceManager</code>中，<code>ServiceManager</code>用来管理系统中的各种Service。由于系统C/S架构中的Binder机制通信：Client端要使用某个Service，则需要先到<code>ServiceManager</code>中查询Service的相关信息，然后根据Service的相关信息与Service进程建立通讯通路，这样Client就能使用Service了。</p><p>还有服务是直接注册到<code>ServiceManager</code>中的：framewokrs/base/services/java/com/android/server/SystemServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">telephonyRegistry = <span class="keyword">new</span> TelephonyRegistry(context);</span><br><span class="line">ServiceManager.addService(<span class="string">"telephony.registry"</span>, telephonyRegistry);</span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p><code>SystemServer</code>主要做了以下的工作：</p><ol><li>启动Binder线程池，这样就可以与其他进程进行通信；</li><li>创建<code>SystemServiceManager</code>用于对系统服务进行创建、启动和生命周期的管理；</li><li>启动各种系统服务。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;上文知道，Zygote进程最终启动了SystemServer进程，现在就来看看SystemServer进程的启动过程。基于Android 7
      
    
    </summary>
    
      <category term="Android起飞" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/"/>
    
      <category term="框架层" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/"/>
    
      <category term="系统启动" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
    
      <category term="Android系统启动" scheme="https://tylerLiu.top/tags/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程02：zygote进程</title>
    <link href="https://tylerLiu.top/2019/08/27/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B02%EF%BC%9Azygote%E8%BF%9B%E7%A8%8B/"/>
    <id>https://tylerLiu.top/2019/08/27/Android系统启动流程02：zygote进程/</id>
    <published>2019-08-27T01:46:23.000Z</published>
    <updated>2019-08-27T07:43:31.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面说到init进程的启动过程主要做了三件事，其中一件就是创建zygote进程，那么zygote进程做了什么？</p><h1 id="1-zygote简介"><a href="#1-zygote简介" class="headerlink" title="1. zygote简介"></a>1. zygote简介</h1><p>在Android系统中，DVM（Dalvik虚拟机）、应用程序进程以及运行系统的关键服务的SystemServer进程都由zygote进程来创建的，称为孵化器。它通过<code>fork</code>（复制进程）的形式来创建应用进程和SystemServer进程，由于zygote进程在启动时，会创建DVM，因此通过<code>fork</code>创建的应用程序和SystemServer进程可以在内部获取一个DVM的实例拷贝。</p><p>这里主要分析Android 7.0中zygote的启动流程。</p><h1 id="2-AppRuntime分析"><a href="#2-AppRuntime分析" class="headerlink" title="2. AppRuntime分析"></a>2. AppRuntime分析</h1><p>上文得知，init启动zygote时主要是调用app_main.cpp的<code>main</code>函数中的AppRuntime的<code>start</code>来启动zygote进程的，所以从app_main.cpp的<code>main</code>函数开始分析：frameworks/base/cmds/app_process/app_main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function">AppRuntime <span class="title">runtime</span><span class="params">(argv[<span class="number">0</span>], computeArgBlockSize(argc, argv))</span></span>;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">     Vector&lt;String8&gt; args;</span><br><span class="line">    <span class="keyword">if</span> (!className.isEmpty()) &#123;</span><br><span class="line">        args.add(application ? String8(<span class="string">"application"</span>) : String8(<span class="string">"tool"</span>));</span><br><span class="line">        runtime.setClassNameAndArgs(className, argc - i, argv + i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// We're in zygote mode.</span></span><br><span class="line">        maybeCreateDalvikCache();</span><br><span class="line">        <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">            args.add(String8(<span class="string">"start-system-server"</span>));<span class="comment">// 1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> prop[PROP_VALUE_MAX];</span><br><span class="line">        <span class="keyword">if</span> (property_get(ABI_LIST_PROPERTY, prop, <span class="literal">NULL</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            LOG_ALWAYS_FATAL(<span class="string">"app_process: Unable to determine ABI list from property %s."</span>,</span><br><span class="line">                ABI_LIST_PROPERTY);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">11</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">String8 <span class="title">abiFlag</span><span class="params">(<span class="string">"--abi-list="</span>)</span></span>;</span><br><span class="line">        abiFlag.append(prop);</span><br><span class="line">        args.add(abiFlag);</span><br><span class="line">        <span class="keyword">for</span> (; i &lt; argc; ++i) &#123;</span><br><span class="line">            args.add(String8(argv[i]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!niceName.isEmpty()) &#123;</span><br><span class="line">        runtime.setArgv0(niceName.<span class="built_in">string</span>());</span><br><span class="line">        set_process_name(niceName.<span class="built_in">string</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>, args, zygote);<span class="comment">// 2</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: no class name or --zygote supplied.\n"</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">"app_process: no class name or --zygote supplied."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，如果<code>startSystemServer</code>为<code>true</code>的话（默认为<code>true</code>），将<code>&quot;start_system_server&quot;</code>放入启动的参数<code>args</code>。</p><p>注释2，调用<code>runtime</code>的<code>start()</code>函数来启动zygote进程，并将<code>args</code>传入，这样，启动zygote进程后，zygote进程就会将SystemServer进程启动。这里的<code>runtime</code>指的就是<code>AppRuntime</code>，<code>Appruntime</code>声明也在app_main.cpp中，它继承<code>AndroidRuntime</code>，所以调用<code>start</code>实际上就是调用<code>AndroidRuntime</code>的<code>start</code>函数：frameworks/base/core/jni/AndroidRuntime.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> AndroidRuntime::start(<span class="keyword">const</span> <span class="keyword">char</span>* className, <span class="keyword">const</span> Vector&lt;String8&gt;&amp; options, <span class="keyword">bool</span> zygote)&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* start the virtual machine */</span></span><br><span class="line">    JniInvocation jni_invocation;</span><br><span class="line">    jni_invocation.Init(<span class="literal">NULL</span>);</span><br><span class="line">    JNIEnv* env;</span><br><span class="line">    <span class="keyword">if</span> (startVm(&amp;mJavaVM, &amp;env, zygote) != <span class="number">0</span>) &#123;<span class="comment">// 1</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    onVmCreated(env);</span><br><span class="line">    <span class="keyword">if</span> (startReg(env) &lt; <span class="number">0</span>) &#123;<span class="comment">// 2</span></span><br><span class="line">        ALOGE(<span class="string">"Unable to register all android natives\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    jclass stringClass;</span><br><span class="line">    jobjectArray strArray;</span><br><span class="line">    jstring classNameStr;</span><br><span class="line"></span><br><span class="line">    stringClass = env-&gt;FindClass(<span class="string">"java/lang/String"</span>);</span><br><span class="line">    assert(stringClass != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 创建数组</span></span><br><span class="line">    strArray = env-&gt;NewObjectArray(options.size() + <span class="number">1</span>, stringClass, <span class="literal">NULL</span>);</span><br><span class="line">    assert(strArray != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 从app_main的main函数得知className为com.android.internal.os.ZygoteInit</span></span><br><span class="line">    classNameStr = env-&gt;NewStringUTF(className);</span><br><span class="line">    assert(classNameStr != <span class="literal">NULL</span>);</span><br><span class="line">    env-&gt;SetObjectArrayElement(strArray, <span class="number">0</span>, classNameStr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; options.size(); ++i) &#123;</span><br><span class="line">        jstring optionsStr = env-&gt;NewStringUTF(options.itemAt(i).<span class="built_in">string</span>());</span><br><span class="line">        assert(optionsStr != <span class="literal">NULL</span>);</span><br><span class="line">        env-&gt;SetObjectArrayElement(strArray, i + <span class="number">1</span>, optionsStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* slashClassName = toSlashClassName(className);</span><br><span class="line">    jclass startClass = env-&gt;FindClass(slashClassName);</span><br><span class="line">    <span class="keyword">if</span> (startClass == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"JavaVM unable to locate class '%s'\n"</span>, slashClassName);</span><br><span class="line">        <span class="comment">/* keep going */</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 找到ZygoteInit的main函数</span></span><br><span class="line">        jmethodID startMeth = env-&gt;GetStaticMethodID(startClass, <span class="string">"main"</span>,</span><br><span class="line">            <span class="string">"([Ljava/lang/String;)V"</span>);<span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">if</span> (startMeth == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ALOGE(<span class="string">"JavaVM unable to find main() in '%s'\n"</span>, className);</span><br><span class="line">            <span class="comment">/* keep going */</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 通过JNI调用ZygoteInit的main函数</span></span><br><span class="line">            env-&gt;CallStaticVoidMethod(startClass, startMeth, strArray);<span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">            <span class="keyword">if</span> (env-&gt;ExceptionCheck())</span><br><span class="line">                threadExitUncaughtException(env);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，调用<code>startVm</code>创建JavaVM，即DVM。</p><p>注释2，调用<code>startReg</code>为DVM注册JNI。</p><p>注释3，用来找到<code>ZygoteInit</code>的<code>main</code>函数，其中<code>startClass</code>从app_main.cpp的<code>main</code>函数得知为<code>com.android.internal.os.ZygoteInit</code>。</p><p>注释4，通过JNIi调用<code>ZygoteInit</code>的<code>main</code>函数，因为<code>ZygoteInit</code>是用Java编写的，所以要通过JNI调用。</p><h1 id="3-ZygoteInit的Java框架层"><a href="#3-ZygoteInit的Java框架层" class="headerlink" title="3. ZygoteInit的Java框架层"></a>3. ZygoteInit的Java框架层</h1><p>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String argv[])</span> </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">        ...       </span><br><span class="line">           <span class="comment">// 注册Zygote用的Socket</span></span><br><span class="line">           registerZygoteSocket(socketName);<span class="comment">// 1</span></span><br><span class="line">          ...</span><br><span class="line">          <span class="comment">// 预加载类和资源</span></span><br><span class="line">          preload();<span class="comment">// 2</span></span><br><span class="line">          ...</span><br><span class="line">           <span class="keyword">if</span> (startSystemServer) &#123;</span><br><span class="line">               <span class="comment">// 启动SystemServer进程</span></span><br><span class="line">               startSystemServer(abiList, socketName);<span class="comment">// 3</span></span><br><span class="line">           &#125;</span><br><span class="line">           Log.i(TAG, <span class="string">"Accepting command socket connections"</span>);</span><br><span class="line">           <span class="comment">// 等待客户端请求</span></span><br><span class="line">           runSelectLoop(abiList);<span class="comment">// 4</span></span><br><span class="line">           closeServerSocket();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (MethodAndArgsCaller caller) &#123;</span><br><span class="line">           caller.run();</span><br><span class="line">       &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">           Log.e(TAG, <span class="string">"Zygote died with exception"</span>, ex);</span><br><span class="line">           closeServerSocket();</span><br><span class="line">           <span class="keyword">throw</span> ex;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>注释1，通过<code>registerSygoteSocket()</code>来创建一个Server端的<code>Socket</code>，这个<code>name</code>为<code>&quot;zygote&quot;</code>的<code>Socket</code>用来等待<code>ActivityManagerService</code>来请求<code>Zygote</code>来创建新的应用程序进程。</p><p>注释2，用来预加载类和资源。</p><p>注释3，启动SystemServer进程，这样系统的关键服务也会由SystemServer进程启动起来。</p><p>注释4，调用<code>runSelectLoop()</code>来等待客户端请求。</p><p>所以，<code>ZygoteInit</code>的<code>main</code>函数主要做了4件事，下面来一一分析。</p><h2 id="3-1-registerZygoteSocket"><a href="#3-1-registerZygoteSocket" class="headerlink" title="3.1 registerZygoteSocket"></a>3.1 registerZygoteSocket</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerZygoteSocket</span><span class="params">(String socketName)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (sServerSocket == <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">int</span> fileDesc;</span><br><span class="line">         <span class="keyword">final</span> String fullSocketName = ANDROID_SOCKET_PREFIX + socketName;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             String env = System.getenv(fullSocketName);</span><br><span class="line">             fileDesc = Integer.parseInt(env);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(fullSocketName + <span class="string">" unset or invalid"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             FileDescriptor fd = <span class="keyword">new</span> FileDescriptor();</span><br><span class="line">             fd.setInt$(fileDesc);</span><br><span class="line">             sServerSocket = <span class="keyword">new</span> LocalServerSocket(fd);<span class="comment">// 1</span></span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">             <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                     <span class="string">"Error binding to local socket '"</span> + fileDesc + <span class="string">"'"</span>, ex);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，创建<code>LocalServerStocket</code>，就是服务端的Stocke。当<code>Zygote</code>进程将SystemServer进程启动后，就会在这个服务端的Stocket上等待<code>ActivityManagerService</code>请求<code>Zygote</code>进程来创建新的应用程序进程。</p><h2 id="3-2-启动SystemServer进程"><a href="#3-2-启动SystemServer进程" class="headerlink" title="3.2 启动SystemServer进程"></a>3.2 启动SystemServer进程</h2><p>下面看看<code>startSystemServer()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">startSystemServer</span><span class="params">(String abiList, String socketName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> MethodAndArgsCaller, RuntimeException </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Containers run without this capability, so avoid setting it in that case */</span></span><br><span class="line">    <span class="keyword">if</span> (!SystemProperties.getBoolean(PROPERTY_RUNNING_IN_CONTAINER, <span class="keyword">false</span>)) &#123;</span><br><span class="line">        capabilities |= posixCapabilitiesAsBits(OsConstants.CAP_BLOCK_SUSPEND);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Hardcoded command line to start the system server */</span></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    String args[] = &#123;</span><br><span class="line">        <span class="string">"--setuid=1000"</span>,</span><br><span class="line">        <span class="string">"--setgid=1000"</span>,</span><br><span class="line">        <span class="string">"--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,1021,1032,3001,3002,3003,3006,3007,3009,3010"</span>,</span><br><span class="line">        <span class="string">"--capabilities="</span> + capabilities + <span class="string">","</span> + capabilities,</span><br><span class="line">        <span class="string">"--nice-name=system_server"</span>,</span><br><span class="line">        <span class="string">"--runtime-args"</span>,</span><br><span class="line">        <span class="string">"com.android.server.SystemServer"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    ZygoteConnection.Arguments parsedArgs = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line">        parsedArgs = <span class="keyword">new</span> ZygoteConnection.Arguments(args);</span><br><span class="line">        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);</span><br><span class="line">        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Request to fork the system server process */</span></span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        pid = Zygote.forkSystemServer(</span><br><span class="line">                parsedArgs.uid, parsedArgs.gid,</span><br><span class="line">                parsedArgs.gids,</span><br><span class="line">                parsedArgs.debugFlags,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                parsedArgs.permittedCapabilities,</span><br><span class="line">                parsedArgs.effectiveCapabilities);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* For child process */</span></span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hasSecondZygote(abiList)) &#123;</span><br><span class="line">            waitForSecondaryZygote(socketName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handleSystemServerProcess(parsedArgs);<span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，创建<code>args</code>数组，用来保存启动SystemServer的参数，可以看出SystemServer进程的用户id和用户组id被设置为1000；并且拥有用户组1001<del>1010，1018、1021、1032、3001</del>3010的权限；进程名为<code>system_server</code>；启动的类名为<code>com.android.server.SystemServer</code>。</p><p>注释2，将<code>args</code>数组封装成<code>Arguments</code>对象并供注释3的<code>forkSystemServer()</code>调用。</p><p>注释3，调用<code>Sygote</code>的<code>forkSystemServer()</code>，主要是通过<code>fork()</code>函数在当前进程创建一个子进程，如果返回的<code>pid</code>为0，表示在新创建的子进程中执行的，则会执行注释4处的<code>handleSystemServerProcess</code>来启动SystemServer进程。</p><h2 id="3-3-runSelectLoop"><a href="#3-3-runSelectLoop" class="headerlink" title="3.3 runSelectLoop"></a>3.3 runSelectLoop</h2><p>启动SystemServer进程后，最后进入<code>runSelectLoop()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runSelectLoop</span><span class="params">(String abiList)</span> <span class="keyword">throws</span> MethodAndArgsCaller </span>&#123;</span><br><span class="line">    ArrayList&lt;FileDescriptor&gt; fds = <span class="keyword">new</span> ArrayList&lt;FileDescriptor&gt;();</span><br><span class="line">    ArrayList&lt;ZygoteConnection&gt; peers = <span class="keyword">new</span> ArrayList&lt;ZygoteConnection&gt;();</span><br><span class="line"></span><br><span class="line">    fds.add(sServerSocket.getFileDescriptor()); <span class="comment">// 1</span></span><br><span class="line">    peers.add(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        StructPollfd[] pollFds = <span class="keyword">new</span> StructPollfd[fds.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pollFds.length; ++i) &#123; <span class="comment">// 2</span></span><br><span class="line">            pollFds[i] = <span class="keyword">new</span> StructPollfd();</span><br><span class="line">            pollFds[i].fd = fds.get(i);</span><br><span class="line">            pollFds[i].events = (<span class="keyword">short</span>) POLLIN;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Os.poll(pollFds, -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ErrnoException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"poll failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = pollFds.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123; <span class="comment">// 3</span></span><br><span class="line">            <span class="keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                ZygoteConnection newPeer = acceptCommandPeer(abiList); <span class="comment">// 4</span></span><br><span class="line">                peers.add(newPeer);</span><br><span class="line">                fds.add(newPeer.getFileDesciptor());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">boolean</span> done = peers.get(i).runOnce();<span class="comment">// 5</span></span><br><span class="line">                <span class="keyword">if</span> (done) &#123;</span><br><span class="line">                    peers.remove(i);</span><br><span class="line">                    fds.remove(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，<code>sServerStocket</code>就是在<code>registerZygoteStocket()</code>中创建的服务端Stocket，调用<code>sServerStocket.getFileDescriptor()</code>用来获得该Stocket字段的值并添加到fd列表<code>fds</code>中。然后使用无限循环用来等待<code>ActivtiyManagerService</code>请求Zygote进程创建新的应用程序进程。</p><p>注释2，通过遍历将<code>fds</code>存储的信息转移到<code>pollFds</code>数组中。</p><p>注释3，遍历<code>pollFds</code>，如果<code>i == 0</code>，表示服务端Socket与客户端已经连上，即，当前Zygote进程与<code>ActivityManagerService</code>建立了连接。</p><p>注释4，通过<code>acceptCommabdPeer()</code>得到``ZygoteConnection<code>对象，并添加到Stocket连接列表</code>peer<code>中，接着将该</code>ZygoteConnection<code>添加到fd列表</code>fds<code>中，以便可以收到</code>ActivityManagerService<code>发送过来的请求。如果</code>i<code>的值大于0，说明</code>ActivityManagerService<code>向Zytoge进程发送了一个创建应用进程的请求，则在注释5调用</code>ZygoteConnection<code>的</code>runOnce()<code>创建一个新的应用程序进程。并在成功创建后，将这个连接从Socket连接列表</code>peers<code>和fd列表</code>fds`中清除。</p><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><p>Zygote进程主要做了以下几件事：</p><ol><li>创建<code>AppRuntime</code>，并调用其<code>start()</code>，启动Zygote进程；</li><li>创建DVM并为DVM注册JNI；</li><li>通过JNI调用Zygote的<code>main()</code>，进入Zygote的Java框架层；</li><li>通过<code>registerZygoteSocket()</code>创建服务端Socket，并通过<code>runSelectLoop()</code>等待<code>ActivityManagerService</code>的请求来创建新的应用程序进程。</li><li>启动SystemServer进程。</li></ol><p>参考资料</p><ul><li>《Android系统源代码情景分析》</li><li>《深入理解Android卷1》</li><li>《深入理解Android系统》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前面说到init进程的启动过程主要做了三件事，其中一件就是创建zygote进程，那么zygote进程做了什么？&lt;/p&gt;
&lt;h1 id=&quot;1-
      
    
    </summary>
    
      <category term="Android起飞" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/"/>
    
      <category term="框架层" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/"/>
    
      <category term="系统启动" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
    
      <category term="Android系统启动" scheme="https://tylerLiu.top/tags/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android系统启动流程01：init进程</title>
    <link href="https://tylerLiu.top/2019/08/24/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B01%EF%BC%9Ainit%E8%BF%9B%E7%A8%8B/"/>
    <id>https://tylerLiu.top/2019/08/24/Android系统启动流程01：init进程/</id>
    <published>2019-08-24T07:49:27.000Z</published>
    <updated>2019-08-27T01:42:56.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><p>init进程是Android系统中用户空间的第一个进程。有很多重要职责，如，创建zygote(孵化器)和属性服务等。</p><p>init进程由多个源文件共同组成，这些文件位于源码目录system/core/init中。 本文将基于Android 7.0分析init进程。</p><h1 id="2-引入init进程"><a href="#2-引入init进程" class="headerlink" title="2. 引入init进程"></a>2. 引入init进程</h1><p>Android系统启动流程：</p><ol><li>启动电源以及系统启动：当按下电源键时，引导芯片代码开始从预定义的地方（固化在ROM）开始执行。加载引导程序Bootloader到RAM，然后执行。</li><li>引导程序Bootloader：引导程序是在Android操作系统开始运行前的一个小程序，主要作用是把系统OS拉起并运行。</li><li>Linux内核启动：内核启动时，设置缓存、被保护存储器、计划列表，加载启动。当内核完成系统设置，首先在系统文件中寻找init文件，然后启动root进程或者系统的第一个进程。</li><li>init进程启动</li></ol><h1 id="3-init入口函数"><a href="#3-init入口函数" class="headerlink" title="3. init入口函数"></a>3. init入口函数</h1><p>iniy的入口函数为<code>main()</code>，代码如下：system/core/init/init.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(basename(argv[<span class="number">0</span>]), <span class="string">"ueventd"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ueventd_main(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(basename(argv[<span class="number">0</span>]), <span class="string">"watchdogd"</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> watchdogd_main(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line">    add_environment(<span class="string">"PATH"</span>, _PATH_DEFPATH);</span><br><span class="line">    <span class="keyword">bool</span> is_first_stage = (argc == <span class="number">1</span>) || (<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">"--second-stage"</span>) != <span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 创建文件并挂载</span></span><br><span class="line">    <span class="keyword">if</span> (is_first_stage) &#123;</span><br><span class="line">        mount(<span class="string">"tmpfs"</span>, <span class="string">"/dev"</span>, <span class="string">"tmpfs"</span>, MS_NOSUID, <span class="string">"mode=0755"</span>);</span><br><span class="line">        mkdir(<span class="string">"/dev/pts"</span>, <span class="number">0755</span>);</span><br><span class="line">        mkdir(<span class="string">"/dev/socket"</span>, <span class="number">0755</span>);</span><br><span class="line">        mount(<span class="string">"devpts"</span>, <span class="string">"/dev/pts"</span>, <span class="string">"devpts"</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">define</span> MAKE_STR(x) __STRING(x)</span></span><br><span class="line">        mount(<span class="string">"proc"</span>, <span class="string">"/proc"</span>, <span class="string">"proc"</span>, <span class="number">0</span>, <span class="string">"hidepid=2,gid="</span> MAKE_STR(AID_READPROC));</span><br><span class="line">        mount(<span class="string">"sysfs"</span>, <span class="string">"/sys"</span>, <span class="string">"sysfs"</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    open_devnull_stdio();</span><br><span class="line">    klog_init();</span><br><span class="line">    klog_set_level(KLOG_NOTICE_LEVEL);</span><br><span class="line">    NOTICE(<span class="string">"init %s started!\n"</span>, is_first_stage ? <span class="string">"first stage"</span> : <span class="string">"second stage"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!is_first_stage) &#123;</span><br><span class="line">        <span class="comment">// Indicate that booting is in progress to background fw loaders, etc.</span></span><br><span class="line">        close(open(<span class="string">"/dev/.booting"</span>, O_WRONLY | O_CREAT | O_CLOEXEC, <span class="number">0000</span>));</span><br><span class="line">        <span class="comment">// 初始化属性相关资源</span></span><br><span class="line">        property_init();<span class="comment">// 1</span></span><br><span class="line">        process_kernel_dt();</span><br><span class="line">        process_kernel_cmdline();</span><br><span class="line">        export_kernel_boot_props();</span><br><span class="line">    &#125;</span><br><span class="line"> ...</span><br><span class="line">    <span class="comment">// 启动属性服务</span></span><br><span class="line">    start_property_service();<span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">const</span> BuiltinFunctionMap function_map;</span><br><span class="line">    Action::set_function_map(&amp;function_map);</span><br><span class="line">    Parser&amp; parser = Parser::GetInstance();</span><br><span class="line">    parser.AddSectionParser(<span class="string">"service"</span>,<span class="built_in">std</span>::make_unique&lt;ServiceParser&gt;());</span><br><span class="line">    parser.AddSectionParser(<span class="string">"on"</span>, <span class="built_in">std</span>::make_unique&lt;ActionParser&gt;());</span><br><span class="line">    parser.AddSectionParser(<span class="string">"import"</span>, <span class="built_in">std</span>::make_unique&lt;ImportParser&gt;());</span><br><span class="line">    <span class="comment">// 解析init.rc配置文件</span></span><br><span class="line">    parser.ParseConfig(<span class="string">"/init.rc"</span>);<span class="comment">// 3</span></span><br><span class="line">   ...   </span><br><span class="line">       <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!waiting_for_exec) &#123;</span><br><span class="line">            am.ExecuteOneCommand();</span><br><span class="line">            restart_processes();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> timeout = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (process_needs_restart) &#123;</span><br><span class="line">            timeout = (process_needs_restart - gettime()) * <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>)</span><br><span class="line">                timeout = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (am.HasMoreCommands()) &#123;</span><br><span class="line">            timeout = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        bootchart_sample(&amp;timeout);</span><br><span class="line">        epoll_event ev;</span><br><span class="line">        <span class="keyword">int</span> nr = TEMP_FAILURE_RETRY(epoll_wait(epoll_fd, &amp;ev, <span class="number">1</span>, timeout));</span><br><span class="line">        <span class="keyword">if</span> (nr == <span class="number">-1</span>) &#123;</span><br><span class="line">            ERROR(<span class="string">"epoll_wait failed: %s\n"</span>, strerror(errno));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nr == <span class="number">1</span>) &#123;</span><br><span class="line">            ((<span class="keyword">void</span> (*)()) ev.data.ptr)();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>init的<code>main()</code>方法中做了很多事情，主要有以下几点：</p><ol><li>注释1调用<code>property_init()</code>对属性进行初始化</li><li>注释2调用<code>start_property_service()</code>启动属性服务</li><li>注释3使用<code>parser.ParserConfig(&quot;init.rc&quot;)</code>用来解析<code>init.rc</code>。解析<code>init.rc</code>的文件为system/core/init/init_parse.cpp。</li></ol><p>下面看看<code>init.rc</code>里面做了什么。</p><h1 id="4-init-rc"><a href="#4-init-rc" class="headerlink" title="4. init.rc"></a>4. init.rc</h1><p><code>init.rc</code>是一个配置文件，内部由Android初始化语言（Android Init Language）编写的脚本，主要包含五种类型语句：<code>Action</code>、<code>Commands</code>、<code>Services</code>、<code>Options</code>和<code>Inport</code>。</p><p><code>init.rc</code>配置代码如下：system/core/rootdir/init.rc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">on init</span><br><span class="line">    sysclktz 0</span><br><span class="line">    # Mix device-specific information into the entropy pool</span><br><span class="line">    copy /proc/cmdline /dev/urandom</span><br><span class="line">    copy /default.prop /dev/urandom</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">on boot</span><br><span class="line">    # basic network init</span><br><span class="line">    ifup lo</span><br><span class="line">    hostname localhost</span><br><span class="line">    domainname localdomain</span><br><span class="line">    # set RLIMIT_NICE to allow priorities from 19 to -20</span><br><span class="line">    setrlimit 13 40 40</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>on init</code>和<code>on boot</code>是<code>Action</code>语句，格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">on &lt;trigger&gt; [&amp;&amp; &lt;trigger&gt;]* // 设置触发器</span><br><span class="line">    &lt;command&gt;</span><br><span class="line">    &lt;command&gt; // 动作触发之后要执行的命令</span><br></pre></td></tr></table></figure><p>为了分析如何创建zygote，主要看<code>Services</code>类型的语句，格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service &lt;name&gt; &lt;pathname&gt; [&lt;argument&gt;]* // &lt;service的名字&gt;&lt;执行程序路径&gt;&lt;传递参数&gt;</span><br><span class="line">    &lt;option&gt; // option是service的修饰词，影响什么时候，如何启动services</span><br><span class="line">    &lt;option&gt;</span><br></pre></td></tr></table></figure><p>注意：Android 7.0中对<code>init.rc</code>进行了拆分，每个服务一个rc文件。要分析的zygote服务的启动脚本在init.zygoteXX.rc中，这里以64位处理器为例，init.zygote64.rc代码如下：system/core/rootdir/init.zygote64.rc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">service zygote /system/bin/app_process64 -Xzygote /system/bin --zygote --start-system-server</span><br><span class="line">    class main</span><br><span class="line">    socket zygote stream 660 root system</span><br><span class="line">    onrestart write /sys/android_power/request_state wake</span><br><span class="line">    onrestart write /sys/power/state on</span><br><span class="line">    onrestart restart audioserver</span><br><span class="line">    onrestart restart cameraserver</span><br><span class="line">    onrestart restart media</span><br><span class="line">    onrestart restart netd</span><br><span class="line">    writepid /dev/cpuset/foreground/tasks /dev/stune/foreground/tasks</span><br></pre></td></tr></table></figure><p>其中<code>service</code>用于通知init进程创建名为<code>zygote</code>的进程，这个<code>zygote</code>进程执行程序的路径为<code>/system/bin/app_process64</code>，后面的是要传给<code>app_process64</code>的参数。<code>class main</code>指<code>zygote</code>的<code>calss name</code>为<code>main</code>，后面会用到。</p><h1 id="5-解析service"><a href="#5-解析service" class="headerlink" title="5. 解析service"></a>5. 解析service</h1><p>解析<code>service</code>会用到两个函数：</p><ul><li><code>ParseSection</code>：解析<code>service</code>的rc文件，比如前面的init.zygote64.rc，主要用来搭建<code>service</code>的架子</li><li><code>ParselineSection</code>：用于解析子项</li></ul><p>代码如下：system/core/init/service.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> ServiceParser::ParseSection(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</span><br><span class="line">                                 <span class="built_in">std</span>::<span class="built_in">string</span>* err) &#123;</span><br><span class="line">    <span class="keyword">if</span> (args.size() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        *err = <span class="string">"services must have a name and a program"</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name = args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (!IsValidName(name)) &#123;</span><br><span class="line">        *err = StringPrintf(<span class="string">"invalid service name '%s'"</span>, name.c_str());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; str_args(args.begin() + <span class="number">2</span>, args.end());</span><br><span class="line">    service_ = <span class="built_in">std</span>::make_unique&lt;Service&gt;(name, <span class="string">"default"</span>, str_args);<span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ServiceParser::ParseLineSection(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args,</span><br><span class="line">                                     <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">int</span> line,</span><br><span class="line">                                     <span class="built_in">std</span>::<span class="built_in">string</span>* err) <span class="keyword">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> service_ ? service_-&gt;HandleLine(args, err) : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，根据参数构造出一个<code>service</code>对象，其<code>classname</code>为<code>&quot;default&quot;</code>。当解析完毕时会调用<code>EndSection()</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ServiceParser::EndSection() &#123;</span><br><span class="line">    <span class="keyword">if</span> (service_) &#123;</span><br><span class="line">        ServiceManager::GetInstance().AddService(<span class="built_in">std</span>::move(service_));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>AddService()</code>中：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ServiceManager::AddService(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Service&gt; service) &#123;</span><br><span class="line">    Service* old_service = FindServiceByName(service-&gt;name());</span><br><span class="line">    <span class="keyword">if</span> (old_service) &#123;</span><br><span class="line">        ERROR(<span class="string">"ignored duplicate definition of service '%s'"</span>,</span><br><span class="line">              service-&gt;name().c_str());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    services_.emplace_back(<span class="built_in">std</span>::move(service));<span class="comment">// 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，将<code>service</code>对象添加到<code>services</code>链表中。</p><p>总的来说就是根据参数创建出<code>service</code>对象，然后根据选项域的内容填充<code>service</code>对象，最后将<code>service</code>对象添加到<code>vector</code>类型的<code>services</code>链表中。</p><h1 id="6-init启动zygote"><a href="#6-init启动zygote" class="headerlink" title="6. init启动zygote"></a>6. init启动zygote</h1><p>了解完<code>service</code>，下面看看<code>init</code>是如何启动<code>service</code>，这里主要讲启动zygote的这个<code>service</code>。在zygote的启动脚本中得知zygote的class name为<code>main</code>，在init.rc有如下配置代码：system/core/rootdir/init.rc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">on nonencrypted    </span><br><span class="line">    # A/B update verifier that marks a successful boot.  </span><br><span class="line">    exec - root -- /system/bin/update_verifier nonencrypted  </span><br><span class="line">    class_start main         </span><br><span class="line">    class_start late_start </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>其中<code>class_start</code>是一个<code>COMMAND</code>，对应的函数为<code>do_class_start</code>。因为<code>main</code>指的是zygote，因此<code>class_start main</code>就是用来启动zygote。<code>do_class_start</code>是定义在builtins.cpp中的，如下：system/core/init/builtins.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">do_class_start</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* Starting a class does not start services</span></span><br><span class="line"><span class="comment">         * which are explicitly disabled.  They must</span></span><br><span class="line"><span class="comment">         * be started individually.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    ServiceManager::GetInstance().</span><br><span class="line">        ForEachServiceInClass(args[<span class="number">1</span>], [] (Service* s) &#123; s-&gt;StartIfNotDisabled(); &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在里面最终调用了<code>StartIfNotDisabled</code>：systme/core/init/service.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Service::StartIfNotDisabled() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(flags_ &amp; SVC_DISABLED)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Start();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flags_ |= SVC_DISABLED_START;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看看里面的<code>Start()</code>方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Service::Start() &#123;</span><br><span class="line">    flags_ &amp;= (~(SVC_DISABLED|SVC_RESTARTING|SVC_RESET|SVC_RESTART|SVC_DISABLED_START));</span><br><span class="line">    time_started_ = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (flags_ &amp; SVC_RUNNING) &#123;<span class="comment">// 如果Service已经运行，则不启动</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> needs_console = (flags_ &amp; SVC_CONSOLE);</span><br><span class="line">    <span class="keyword">if</span> (needs_console &amp;&amp; !have_console) &#123;</span><br><span class="line">        ERROR(<span class="string">"service '%s' requires console\n"</span>, name_.c_str());</span><br><span class="line">        flags_ |= SVC_DISABLED;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 判断需要启动的Service的对应的执行文件是否存在，不存在则不启动该Service</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">sb</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (stat(args_[<span class="number">0</span>].c_str(), &amp;sb) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">"cannot find '%s' (%s), disabling '%s'\n"</span>,</span><br><span class="line">              args_[<span class="number">0</span>].c_str(), strerror(errno), name_.c_str());</span><br><span class="line">        flags_ |= SVC_DISABLED;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.fork函数创建子进程</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123;<span class="comment">// 运行在子进程中</span></span><br><span class="line">        umask(<span class="number">077</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; ei : envvars_) &#123;</span><br><span class="line">            add_environment(ei.name.c_str(), ei.value.c_str());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; si : sockets_) &#123;</span><br><span class="line">            <span class="keyword">int</span> socket_type = ((si.type == <span class="string">"stream"</span> ? SOCK_STREAM :</span><br><span class="line">                                (si.type == <span class="string">"dgram"</span> ? SOCK_DGRAM :</span><br><span class="line">                                 SOCK_SEQPACKET)));</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span>* socketcon =</span><br><span class="line">                !si.socketcon.empty() ? si.socketcon.c_str() : scon.c_str();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> s = create_socket(si.name.c_str(), socket_type, si.perm,</span><br><span class="line">                                  si.uid, si.gid, socketcon);</span><br><span class="line">            <span class="keyword">if</span> (s &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                PublishSocket(si.name, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">        <span class="comment">// 2.通过execve执行程序</span></span><br><span class="line">        <span class="keyword">if</span> (execve(args_[<span class="number">0</span>].c_str(), (<span class="keyword">char</span>**) &amp;strs[<span class="number">0</span>], (<span class="keyword">char</span>**) ENV) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ERROR(<span class="string">"cannot execve('%s'): %s\n"</span>, args_[<span class="number">0</span>].c_str(), strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _exit(<span class="number">127</span>);</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过注释1和注释2的代码，得知在<code>Start()</code>方法中，调用<code>fork()</code>函数来创建子线程，并在子线程中调用<code>execve()</code>执行system/bin/app_process，这样就会进入frameworks/base/cmds/app_progress/app_main.cpp中的<code>main()</code>函数，如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* <span class="keyword">const</span> argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (zygote) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.ZygoteInit"</span>, args, zygote);<span class="comment">// 1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (className) &#123;</span><br><span class="line">        runtime.start(<span class="string">"com.android.internal.os.RuntimeInit"</span>, args, zygote);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: no class name or --zygote supplied.\n"</span>);</span><br><span class="line">        app_usage();</span><br><span class="line">        LOG_ALWAYS_FATAL(<span class="string">"app_process: no class name or --zygote supplied."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1可以看到，调用<code>runntime(AppRuntime)</code>的<code>start()</code>来启动zygote。</p><h1 id="7-属性服务"><a href="#7-属性服务" class="headerlink" title="7. 属性服务"></a>7. 属性服务</h1><p>Windows上有一个注册管理表，注册管理表的内容是采用键值对的形式来记录用户、软件的一些使用信息。即使系统或者软件重启，它还是能根据之前在注册表中的记录，进行相应的初始化工作。</p><p>Android中也有一个类似的机制，叫做属性服务。</p><p>文章开始提到的在init.cpp代码中和属性服务相关的代码有：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化属性服务配置</span></span><br><span class="line">property_init();</span><br><span class="line"><span class="comment">// 启动属性服务</span></span><br><span class="line">start_property_service();</span><br></pre></td></tr></table></figure><h2 id="7-1-属性服务的初始化与启动"><a href="#7-1-属性服务的初始化与启动" class="headerlink" title="7.1 属性服务的初始化与启动"></a>7.1 属性服务的初始化与启动</h2><p><code>property_init()</code>具体实现如下：system/core/init/property_service.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">property_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (__system_property_area_init()) &#123;</span><br><span class="line">        ERROR(<span class="string">"Failed to initialize property area\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_system_property_are_init()</code>是用来初始化属性内存区域。</p><p>下面看看<code>start_property_service()</code>的具体实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start_property_service</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    property_set_fd = create_socket(PROP_SERVICE_NAME, SOCK_STREAM | SOCK_CLOEXEC | SOCK_NONBLOCK,</span><br><span class="line">                                    <span class="number">0666</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="literal">NULL</span>);<span class="comment">// 1</span></span><br><span class="line">    <span class="keyword">if</span> (property_set_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">"start_property_service socket creation failed: %s\n"</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    listen(property_set_fd, <span class="number">8</span>);<span class="comment">// 2</span></span><br><span class="line">    register_epoll_handler(property_set_fd, handle_property_set_fd);<span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，创建非阻塞的<code>socket</code>。</p><p>注释2，调用<code>listen()</code>对<code>property_set_fd</code>进行监听，这样创建的<code>socket</code>就成为了<code>server</code>，也就是属性服务；<code>listen()</code>函数的第二个参数设置成<code>8</code>，意味着属性服务最多可以同时为8个试图设置属性的用户提供服务。</p><p>注释3，将<code>property_set_fd</code>放到<code>epoll()</code>句柄中，用<code>epoll()</code>来监听<code>property_set_fd</code>：当<code>property_set_fd</code>中有数据到来时，init进程将用<code>handle_property_set_fd()</code>函数进行处理。</p><p>在linux新的内核中，<code>epoll()</code>用来替换<code>select()</code>，<code>epoll()</code>的最大好处是它不会随着监听<code>fd</code>数量的增加而降低效率。因为内核中<code>select()</code>的实现采用的是轮询处理，轮询的<code>fd</code>数量多了，耗时就多。</p><h2 id="7-2-属性服务处理请求"><a href="#7-2-属性服务处理请求" class="headerlink" title="7.2 属性服务处理请求"></a>7.2 属性服务处理请求</h2><p>从上文得知，属性服务接收到客户端的请求时，会调用<code>handle_property_set_fd</code>函数进行处理：system/core/init/property_service.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handle_property_set_fd</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(msg.name,<span class="string">"ctl."</span>,<span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            close(s);</span><br><span class="line">            <span class="keyword">if</span> (check_control_mac_perms(msg.value, source_ctx, &amp;cr)) &#123;</span><br><span class="line">                handle_control_message((<span class="keyword">char</span>*) msg.name + <span class="number">4</span>, (<span class="keyword">char</span>*) msg.value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ERROR(<span class="string">"sys_prop: Unable to %s service ctl [%s] uid:%d gid:%d pid:%d\n"</span>,</span><br><span class="line">                        msg.name + <span class="number">4</span>, msg.value, cr.uid, cr.gid, cr.pid);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 检查客户端进程权限</span></span><br><span class="line">            <span class="keyword">if</span> (check_mac_perms(msg.name, source_ctx, &amp;cr)) &#123;<span class="comment">// 1</span></span><br><span class="line">                property_set((<span class="keyword">char</span>*) msg.name, (<span class="keyword">char</span>*) msg.value);<span class="comment">// 2</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ERROR(<span class="string">"sys_prop: permission denied uid:%d  name:%s\n"</span>,</span><br><span class="line">                      cr.uid, msg.name);</span><br><span class="line">            &#125;</span><br><span class="line">            close(s);</span><br><span class="line">        &#125;</span><br><span class="line">        freecon(source_ctx);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        close(s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释1，用来检查客户端进程权限</p><p>注释2，调用<code>property_set</code>函数对属性进行修改，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">property_set</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc = property_set_impl(name, value);</span><br><span class="line">    <span class="keyword">if</span> (rc == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">"property_set(\"%s\", \"%s\") failed\n"</span>, name, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>property_set</code>函数注意调用了<code>property_set_impl()</code>函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">property_set_impl</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> namelen = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="keyword">size_t</span> valuelen = <span class="built_in">strlen</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (!is_legal_property_name(name, namelen)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (valuelen &gt;= PROP_VALUE_MAX) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"selinux.reload_policy"</span>, name) == <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">"1"</span>, value) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (selinux_reload_policy() != <span class="number">0</span>) &#123;</span><br><span class="line">            ERROR(<span class="string">"Failed to reload policy\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"selinux.restorecon_recursive"</span>, name) == <span class="number">0</span> &amp;&amp; valuelen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (restorecon_recursive(value) != <span class="number">0</span>) &#123;</span><br><span class="line">            ERROR(<span class="string">"Failed to restorecon_recursive %s\n"</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从属性存储空间查找该属性</span></span><br><span class="line">    prop_info* pi = (prop_info*) __system_property_find(name);</span><br><span class="line">    <span class="comment">// 如果属性存在</span></span><br><span class="line">    <span class="keyword">if</span>(pi != <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="comment">// 如果属性以"ro."开头，则表示是只读，不能修改，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(name, <span class="string">"ro."</span>, <span class="number">3</span>)) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">       <span class="comment">// 更新属性值</span></span><br><span class="line">        __system_property_update(pi, value, valuelen);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果属性不存在则添加该属性</span></span><br><span class="line">        <span class="keyword">int</span> rc = __system_property_add(name, namelen, value, valuelen);</span><br><span class="line">        <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> rc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* If name starts with "net." treat as a DNS property. */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(<span class="string">"net."</span>, name, <span class="built_in">strlen</span>(<span class="string">"net."</span>)) == <span class="number">0</span>)  &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">"net.change"</span>, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 以net.开头的属性名称更新后，需要将属性名称写入net.change中</span></span><br><span class="line">        property_set(<span class="string">"net.change"</span>, name);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (persistent_properties_loaded &amp;&amp;</span><br><span class="line">            <span class="built_in">strncmp</span>(<span class="string">"persist."</span>, name, <span class="built_in">strlen</span>(<span class="string">"persist."</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Don't write properties to disk until after we have read all default properties</span></span><br><span class="line"><span class="comment">         * to prevent them from being overwritten by default values.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        write_persistent_property(name, value);</span><br><span class="line">    &#125;</span><br><span class="line">    property_changed(name, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>property_set_impl</code>函数主要用来对属性进行修改，并对<code>ro</code>、<code>net</code>和<code>persist</code>开头的属性进行相应的处理。</p><h1 id="8-init进程总结"><a href="#8-init进程总结" class="headerlink" title="8. init进程总结"></a>8. init进程总结</h1><p>init进程主要做了三件事：</p><ol><li>创建一些文件夹并挂载设备</li><li>初始化和启动属性服务</li><li>解析init.rc配置文件并启动zygote进程</li></ol><p>参考资料：</p><ul><li>《深入理解Android系统》</li><li>《深入理解Android卷I》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1. 简介&quot;&gt;&lt;/a&gt;1. 简介&lt;/h1&gt;&lt;p&gt;init进程是Android系统中用户空间的第一个进程。有很多重要职责，如，创建zygote(孵化器)和属性服务等。&lt;/
      
    
    </summary>
    
      <category term="Android起飞" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/"/>
    
      <category term="框架层" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/"/>
    
      <category term="系统启动" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
    
      <category term="Android系统启动" scheme="https://tylerLiu.top/tags/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android系统架构与系统源码目录</title>
    <link href="https://tylerLiu.top/2019/08/24/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%BA%90%E7%A0%81%E7%9B%AE%E5%BD%95/"/>
    <id>https://tylerLiu.top/2019/08/24/Android系统架构与系统源码目录/</id>
    <published>2019-08-24T02:19:25.000Z</published>
    <updated>2019-08-24T07:46:07.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Android系统架构"><a href="#1-Android系统架构" class="headerlink" title="1. Android系统架构"></a>1. Android系统架构</h1><p>Android系统架构分成五层，从上到下依次为：应用层、应用框架层、系统运行层、硬件抽象层和Linux内核层。</p><img src="/2019/08/24/Android系统架构与系统源码目录/15233854-1354887e982ab461.jpg"><h2 id="1-1-应用层"><a href="#1-1-应用层" class="headerlink" title="1.1 应用层"></a>1.1 应用层</h2><p>系统内置的应用程序以及非系统级的应用程序都属于应用层。负责与用户进行直接交互。该层主要由Java代码编写，现在已经扩充到Kotlin和Flutter。</p><h2 id="1-2-应用框架层"><a href="#1-2-应用框架层" class="headerlink" title="1.2 应用框架层"></a>1.2 应用框架层</h2><p>为开发者提供了可以开发应用程序所需的API，通常开发应用程序所调用的API都属于该层，也包括系统的应用。该层由Java编写，也称Java FragmeWork。该层的主要组件由：</p><table><thead><tr><th align="center">名称</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">Activity Manager 活动管理器</td><td align="center">管理各个应用程序生命周期以及通常的导航回退功能</td></tr><tr><td align="center">Location Manager 位置管理器</td><td align="center">提供地理位置以及定位功能服务</td></tr><tr><td align="center">Package Manager 包管理器</td><td align="center">管理所有安装在Android系统中的应用程序</td></tr><tr><td align="center">Notification Manager 通知管理器</td><td align="center">使得应用程序可以在状态栏中显示自定义的提示信息</td></tr><tr><td align="center">Resource Manager 资源管理器</td><td align="center">提供应用程序使用的各种非代码资源，如本地化字符串、图片、布局文件、颜色文件等</td></tr><tr><td align="center">Telephone Manager 电话管理器</td><td align="center">管理所有的移动设备功能</td></tr><tr><td align="center">Window Manager 窗口管理器</td><td align="center">管理所有开启的窗口程序</td></tr><tr><td align="center">Content Provider 内容提供器</td><td align="center">使得不同的应用程序之间可以共享数据</td></tr><tr><td align="center">View System 视图系统</td><td align="center">构建应用程序的基本组件</td></tr></tbody></table><h2 id="1-3-系统运行层（Native）"><a href="#1-3-系统运行层（Native）" class="headerlink" title="1.3 系统运行层（Native）"></a>1.3 系统运行层（Native）</h2><p>系统运行层分成两个部分：C/C++程序库、Android运行时库。</p><h3 id="1-3-1-C-C-程序库"><a href="#1-3-1-C-C-程序库" class="headerlink" title="1.3.1 C/C++程序库"></a>1.3.1 C/C++程序库</h3><p>C/C++程序库能被Android系统中的不同组件所使用，并通过应用程序框架为开发者提供服务，主要的C/C++程序库如下：</p><table><thead><tr><th align="center">名称</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">OpenGL ES</td><td align="center">3D绘图函数库</td></tr><tr><td align="center">Libc</td><td align="center">从BSD继承来的标准C系统函数库，专门为基于嵌入式Linux的设备定制</td></tr><tr><td align="center">Media Framework</td><td align="center">多媒体库，支持多种常用的音频，视频格式录制和回放</td></tr><tr><td align="center">SQLite</td><td align="center">轻型的关系型数据库引擎</td></tr><tr><td align="center">SGL</td><td align="center">底层的2D图形渲染引擎</td></tr><tr><td align="center">SSL</td><td align="center">安全嵌套层，是为了网络通信提供安全及数据完整性的一种安全协议</td></tr><tr><td align="center">FreeType</td><td align="center">可移植的字体引擎，提供了统一的接口来访问多种字体格式文件</td></tr></tbody></table><h3 id="1-3-2-Android运行时库"><a href="#1-3-2-Android运行时库" class="headerlink" title="1.3.2 Android运行时库"></a>1.3.2 Android运行时库</h3><p>分为核心库和ART。核心库提供Java语言核心库的大多数功能，这样就能使用Java编写Android应用。相较于JVM，Dalvik虚拟机是专门为移动设备定制的，允许在有限的内存中同时运行多个虚拟机的实例，并且每个Dalvik应用作为一个独立的Linux进程执行。</p><p>独立的进程可以防止在虚拟机崩溃时所有程序都关闭。而替代Dalvik虚拟机的ART的机制与Dalvik不同。</p><p>在Dalvik中，应用每次运行的时候，字节码都需要通过即时编译器转换为机器码，这样运行效率很慢，而在ART环境下，应用在第一次安装的时候，字节码就会预编译成机器码，使其成为真正的本地应用。</p><h2 id="1-4-硬件抽象层（HAL）"><a href="#1-4-硬件抽象层（HAL）" class="headerlink" title="1.4 硬件抽象层（HAL）"></a>1.4 硬件抽象层（HAL）</h2><p>HAL是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化，为了保护硬件厂商知识产权，它隐藏了特定平台的硬件接口细节，为操作系统提供虚拟的硬件平台，使其可以在多种平台上移植。</p><p>从软硬件测试的角度来看，软硬件的测试工作都可分别基于硬件抽象层来完成，使得软硬件测试工作的并行成为可能。通俗来讲，就是将控制硬件的工作放在硬件抽象层中。</p><h2 id="1-5-Linux内核层"><a href="#1-5-Linux内核层" class="headerlink" title="1.5 Linux内核层"></a>1.5 Linux内核层</h2><p>Android的核心系统服务是基于Linux内核，在此基础上添加了部分Android专用的驱动。系统的安全性、内存管理、进程管理、网络协议栈和驱动模型等都依赖于该内核。</p><h1 id="2-Android系统源码目录"><a href="#2-Android系统源码目录" class="headerlink" title="2. Android系统源码目录"></a>2. Android系统源码目录</h1><p>在线查看源码：<a href="http://androidxref.com/" target="_blank" rel="noopener">http://androidxref.com/</a></p><p>下载查看：<strong><font color="#FFFF00">源码的详细安装可以查看AOSP的内容</font></strong></p><p>谷歌下载网站：<a href="https://source.android.google.cn/source/downloading" target="_blank" rel="noopener">https://source.android.google.cn/source/downloading</a></p><p>清华大学镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/</a></p><h2 id="2-1-整体结构"><a href="#2-1-整体结构" class="headerlink" title="2.1 整体结构"></a>2.1 整体结构</h2><p>各个版本的源码结构类似，编译后会多出一个out文件夹，用来存储编译产生的文件。以Android 7.0为例，根目录结构如下：</p><table><thead><tr><th align="center">Android源码根目录</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">abi</td><td align="center">应用程序二进制接口</td></tr><tr><td align="center">art</td><td align="center">ART运行环境</td></tr><tr><td align="center">bionic</td><td align="center">系统C库</td></tr><tr><td align="center">bootable</td><td align="center">启动引导相关代码</td></tr><tr><td align="center">build</td><td align="center">存放系统编译规则以及generic等基础开发包设置</td></tr><tr><td align="center">cts</td><td align="center">Android兼容性测试套件标准</td></tr><tr><td align="center">dalvik</td><td align="center">Dalvik虚拟机</td></tr><tr><td align="center">developers</td><td align="center">开发者目录</td></tr><tr><td align="center">development</td><td align="center">应用程序开发相关</td></tr><tr><td align="center">devices</td><td align="center">设备相关配置</td></tr><tr><td align="center">docs</td><td align="center">参考文档目录</td></tr><tr><td align="center">external</td><td align="center">开源模组相关文件</td></tr><tr><td align="center">frameworks</td><td align="center">应用程序框架，Android系统核心部分，由Java和C++编写</td></tr><tr><td align="center">hardware</td><td align="center">主要是硬件抽象层的代码</td></tr><tr><td align="center">libcore</td><td align="center">核心库相关文件</td></tr><tr><td align="center">libnativehelper</td><td align="center">动态库，实现JNI库的基础</td></tr><tr><td align="center">ndk</td><td align="center">NDK相关代码，帮助开发者在应用程序中嵌入C/C++代码</td></tr><tr><td align="center">out</td><td align="center">编译完成后的代码存放的文件夹</td></tr><tr><td align="center">packages</td><td align="center">Plug Development Kit的缩写，本地开发套件</td></tr><tr><td align="center">platform_testing</td><td align="center">平台测试</td></tr><tr><td align="center">prebuilts</td><td align="center">X86和ARM架构下预编译的一些资源</td></tr><tr><td align="center">sdk</td><td align="center">SDK和模拟器</td></tr><tr><td align="center">system</td><td align="center">底层文件系统库、应用和组件</td></tr><tr><td align="center">toolchain</td><td align="center">工具链文件</td></tr><tr><td align="center">tools</td><td align="center">工具文件</td></tr><tr><td align="center">Makefile</td><td align="center">全局Makefile文件，用来定义编译规则</td></tr></tbody></table><h2 id="2-2-应用层部分：-packages文件夹"><a href="#2-2-应用层部分：-packages文件夹" class="headerlink" title="2.2 应用层部分：/packages文件夹"></a>2.2 应用层部分：/packages文件夹</h2><p>应用层位于整个Android系统的最上层，开发的应用程序和系统内置的应用程序都在应用层。源码根目录中的packages目录对应着系统的应用层。</p><table><thead><tr><th align="center">/packages目录</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">apps</td><td align="center">核心应用程序</td></tr><tr><td align="center">experimental</td><td align="center">第三方应用程序</td></tr><tr><td align="center">inputmethods</td><td align="center">输入法目录</td></tr><tr><td align="center">providers</td><td align="center">内容提供者目录</td></tr><tr><td align="center">screensavers</td><td align="center">屏幕保护</td></tr><tr><td align="center">services</td><td align="center">通信服务</td></tr><tr><td align="center">wallpapers</td><td align="center">壁纸</td></tr></tbody></table><h2 id="2-3-应用框架层部分：-frameworks文件夹"><a href="#2-3-应用框架层部分：-frameworks文件夹" class="headerlink" title="2.3 应用框架层部分：/frameworks文件夹"></a>2.3 应用框架层部分：/frameworks文件夹</h2><p>应用框架层，一方面向上提供接口给应用层调用，另一方面向下与C/C++程序库以及硬件抽象层等进行衔接。应用框架层的代码主要在/frameworks/base和/framework/av目录下。</p><table><thead><tr><th align="center">/frameworks/base目录</th><th align="center">描述</th><th align="center"></th><th align="center">/frameworks/base目录</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">api</td><td align="center">定义API</td><td align="center"></td><td align="center">cmds</td><td align="center">重要命令：am、app_proce等</td></tr><tr><td align="center">core</td><td align="center">核心库</td><td align="center"></td><td align="center">data</td><td align="center">字体和声音等数据文件</td></tr><tr><td align="center">docs</td><td align="center">文档</td><td align="center"></td><td align="center">graphics</td><td align="center">图形图像相关</td></tr><tr><td align="center">include</td><td align="center">头文件</td><td align="center"></td><td align="center">keystore</td><td align="center">和数字签名证书相关</td></tr><tr><td align="center">libs</td><td align="center">库</td><td align="center"></td><td align="center">location</td><td align="center">地理位置相关库</td></tr><tr><td align="center">media</td><td align="center">多媒体相关库</td><td align="center"></td><td align="center">native</td><td align="center">本地库</td></tr><tr><td align="center">nfc-extras</td><td align="center">NFC相关</td><td align="center"></td><td align="center">obex</td><td align="center">蓝牙传输</td></tr><tr><td align="center">opengl</td><td align="center">2D/3D图形API</td><td align="center"></td><td align="center">packages</td><td align="center">设置、TTS、VPN程序</td></tr><tr><td align="center">sax</td><td align="center">XML解析器</td><td align="center"></td><td align="center">services</td><td align="center">系统服务</td></tr><tr><td align="center">telephone</td><td align="center">电话通讯管理</td><td align="center"></td><td align="center">test-runner</td><td align="center">测试工具相关</td></tr><tr><td align="center">tests</td><td align="center">测试相关</td><td align="center"></td><td align="center">tools</td><td align="center">工具</td></tr><tr><td align="center">wifi</td><td align="center">WIFI无限网络</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="2-4-系统运行层：C-C-程序库部分"><a href="#2-4-系统运行层：C-C-程序库部分" class="headerlink" title="2.4 系统运行层：C/C++程序库部分"></a>2.4 系统运行层：C/C++程序库部分</h2><p>系统运行层（Native）中的C/C++程序库的类型繁多，功能强大，C/C++程序库不在一个目录中，这里列举几个常用和重要的C/C++程序库所在的目录。</p><table><thead><tr><th align="center">目录位置</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">bionic/</td><td align="center">谷歌开发的系统C库，以BSD许可形式开源</td></tr><tr><td align="center">/frameworks/av/media</td><td align="center">系统媒体库</td></tr><tr><td align="center">/frameworks/native/opengl</td><td align="center">第三方图形渲染库</td></tr><tr><td align="center">/fframeorks/native/services/surfaceflinger</td><td align="center">图形显示库，主要负责图形的渲染、叠加和绘制等功能</td></tr><tr><td align="center">external/sqlite</td><td align="center">轻量型关系数据库SQLite的C++实现</td></tr></tbody></table><h2 id="2-5-其他"><a href="#2-5-其他" class="headerlink" title="2.5 其他"></a>2.5 其他</h2><p>Android运行时库就在根目录下的art文件夹中。</p><p>硬件抽象层在根目录下的hardware文件夹中，该部分是手机厂商改动最大的部分，根据手机终端所采用的硬件平台不同，会有不同的实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-Android系统架构&quot;&gt;&lt;a href=&quot;#1-Android系统架构&quot; class=&quot;headerlink&quot; title=&quot;1. Android系统架构&quot;&gt;&lt;/a&gt;1. Android系统架构&lt;/h1&gt;&lt;p&gt;Android系统架构分成五层，从上到下依次为：
      
    
    </summary>
    
      <category term="Android起飞" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/"/>
    
      <category term="框架层" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/"/>
    
      <category term="系统启动" scheme="https://tylerLiu.top/categories/Android%E8%B5%B7%E9%A3%9E/%E6%A1%86%E6%9E%B6%E5%B1%82/%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
    
      <category term="Android系统启动" scheme="https://tylerLiu.top/tags/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：联想搜索优化</title>
    <link href="https://tylerLiu.top/2019/08/23/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E8%81%94%E6%83%B3%E6%90%9C%E7%B4%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://tylerLiu.top/2019/08/23/Android-RxJava应用：联想搜索优化/</id>
    <published>2019-08-23T08:07:12.000Z</published>
    <updated>2019-08-23T08:48:32.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><p>背景：每当用户输入一个字符，即显示与当前输入框内字符相关的搜索结果。</p><p>基本实现流程：</p><ol><li>通过<code>EditText.addTextChangedListener()</code>监听输入框的变化</li><li>当输入框发生变化后，回调<code>afterTextChanged()</code>，将当前输入框内的文字向服务器发送请求</li><li>服务器返回与该搜索文字关联的结果</li></ol><p>问题：当用户搜索需求明确的情况下（体现为连续输入），可能会发起不必要的请求。如</p><ul><li>用户搜索需求明确为abc，即连续输入abc</li><li>按照上面的逻辑，客户端会向服务器发起a、ab、abc三次请求</li><li>多发起了a、ab两次不必要的请求</li></ul><p>解决方案：通过根据时间过滤事件的过滤操作符<code>debounce()</code>实现。</p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>实现原理：通过根据指定时间过滤事件的过滤操作符<code>debounce()</code>实现，防止不必要的网络请求。</p><p>功能逻辑：当输入框发生变化时，不会立刻将当前输入框内的文字发送给服务器，而是等待一段时间，在这段时间内，如果输入框不再有文字输入（无变化），就发送输入框内的文字给服务器，如果有文字输入（有变化），则继续等待该段时间，循环该过程。</p><h1 id="3-Demo"><a href="#3-Demo" class="headerlink" title="3. Demo"></a>3. Demo</h1><p>布局文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/et"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"输入搜索字段"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterUsageActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RxJava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_filter_usage);</span><br><span class="line"></span><br><span class="line">        EditText et = findViewById(R.id.et);</span><br><span class="line">        <span class="keyword">final</span> TextView tv = findViewById(R.id.tv);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 这里使用RxBinding：RxTextView.textChanges(name)对对控件数据变更进行监听（功能类似TextWatcher）</span></span><br><span class="line">        <span class="comment">// 2. 传入EditText控件，输入字符时都会发送数据事件（此处不会马上发送，因为使用了debounce()）</span></span><br><span class="line">        <span class="comment">// 3. 采用skip(1)原因：跳过第1次请求，即初始输入框的空字符状态</span></span><br><span class="line">        RxTextView.textChanges(et)</span><br><span class="line">                .debounce(<span class="number">1</span>, TimeUnit.SECONDS).skip(<span class="number">1</span>)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;CharSequence&gt;() &#123;</span><br><span class="line">                    <span class="meta">@SuppressLint</span>(<span class="string">"SetTextI18n"</span>)</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(CharSequence charSequence)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        tv.setText(<span class="string">"发送给服务器的字符 = "</span> + charSequence.toString());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/23/Android-RxJava应用：联想搜索优化/企业微信截图_20190823164747.png"><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;p&gt;背景：每当用户输入一个字符，即显示与当前输入框内字符相关的搜索结果。&lt;/p&gt;
&lt;p&gt;基本实现流程：&lt;/p
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：功能防抖</title>
    <link href="https://tylerLiu.top/2019/08/23/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E5%8A%9F%E8%83%BD%E9%98%B2%E6%8A%96/"/>
    <id>https://tylerLiu.top/2019/08/23/Android-RxJava应用：功能防抖/</id>
    <published>2019-08-23T07:33:33.000Z</published>
    <updated>2019-08-23T08:03:18.945Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><p>背景：用户只需要使用功能一次</p><p>问题：如果多次触发功能，就会导致出现冗余功能操作，如：</p><ul><li>用户只需要使用网络请求功能一次（点击按钮）</li><li>但由于网络不好，点击一次后，用户发现没有响应</li><li>于是就多次点击按钮，就会导致发送多次网络请求</li></ul><p>解决方法：功能防抖，通过根据指定时间过滤事件的过滤操作符实现，防止功能抖动</p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>功能防抖：即用户同规定时间内多次触发功能，仅会响应第一次的触发操作。</p><p>原理：使用根据指定时间过滤事件的过滤操作符实现，<code>throttleFirst()</code>操作符。</p><h1 id="3-Demo"><a href="#3-Demo" class="headerlink" title="3. Demo"></a>3. Demo</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AntiShakeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RxJava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_anti_shake);</span><br><span class="line"></span><br><span class="line">        Button button = findViewById(R.id.button);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 此处采用了RxBinding：RxView.clicks(button)控件点击进行监听，</span></span><br><span class="line">        <span class="comment">// 需要引入依赖：implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'</span></span><br><span class="line">        <span class="comment">// 2. 传入Button控件，点击时，都会发送数据事件，</span></span><br><span class="line">        <span class="comment">// 但由于使用了throttleFirst()操作符，所以只会发送该段时间内的第1次点击事件</span></span><br><span class="line">        RxView.clicks(button)</span><br><span class="line">                <span class="comment">// 2s内第1次点击按钮的事件才发送</span></span><br><span class="line">                .throttleFirst(<span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Object&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"发送了网络请求"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 获取异常错误信息</span></span><br><span class="line">                        Log.d(TAG, <span class="string">"对Error事件作出响应"</span> + throwable.getMessage());</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;p&gt;背景：用户只需要使用功能一次&lt;/p&gt;
&lt;p&gt;问题：如果多次触发功能，就会导致出现冗余功能操作，如：&lt;/p
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：网络请求出错重连</title>
    <link href="https://tylerLiu.top/2019/08/23/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%87%BA%E9%94%99%E9%87%8D%E8%BF%9E/"/>
    <id>https://tylerLiu.top/2019/08/23/Android-RxJava应用：网络请求出错重连/</id>
    <published>2019-08-23T06:54:33.000Z</published>
    <updated>2019-08-23T07:32:15.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><p>背景：发送网络请求<br>问题：发送网络请求过程中，出现错误时，导致该次网络请求不成功<br>解决方案：当发生错误使得网络请求不成功时，自动重新发送网络请求，即差错自动重试机制</p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>功能描述：当发送错误时，使得网络请求不成功时，自动重新发送网络请求<br>实现原理：采用<code>RxJava</code>中的<code>retryWhen()</code>操作符<br>具体说明：根据错误类型判断实现需要重连，所有网络错误异常都属于IOException，其余异常都不在重试范围内。若要重试，设置退避策略，即，为请求重试设置一个合理的退避算法，而不是一出现错误马上就重试。<br>合理的退避算法：</p><ol><li>遇到错误时，等待一段时间后再重试</li><li>若遇到的异常次数越多，等待时间应该越长</li></ol><ul><li>即，设置等待时间，会随着错误异常次数增多而可变</li></ul><ol start="3"><li>限制可重试次数，避免无限重试</li></ol><ul><li>即，设置重试次数</li></ul><img src="/2019/08/23/Android-RxJava应用：网络请求出错重连/944365-fd347a0ba6a54876.png"><h1 id="3-Demo"><a href="#3-Demo" class="headerlink" title="3. Demo"></a>3. Demo</h1><p>采用<code>GET</code>方法对金山词霸API进行网络请求：</p><ol><li>通过判断网络连接模拟网络异常错误（即回复网络即可发送请求）</li><li>限制重试次数为10次</li><li>采用<code>Gson</code>进行数据解析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxJavafixRxjavaActivity3</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RxJava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxConnectCount = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前已重试次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mCurrentRetryCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重试等待时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mWaitRetryTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_rx_javafix_rxjava3);</span><br><span class="line"></span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(<span class="string">"http://fy.iciba.com/"</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);</span><br><span class="line"></span><br><span class="line">        Observable&lt;Translation&gt; observable = request.getCall();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主要异常才会回调retryWhen()进行重试</span></span><br><span class="line">        observable.retryWhen(<span class="keyword">new</span> Function&lt;Observable&lt;Throwable&gt;, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(Observable&lt;Throwable&gt; throwableObservable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// Observable&lt;Throwable&gt;中的泛型为上游操作符抛出的异常，可以通过该条件判断异常的类型</span></span><br><span class="line">                <span class="keyword">return</span> throwableObservable.flatMap(<span class="keyword">new</span> Function&lt;Throwable, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(Throwable throwable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">// 输出异常信息</span></span><br><span class="line">                        Log.d(TAG, <span class="string">"发生异常 = "</span> + throwable.toString());</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 需求1：根据异常类型选择是否重试</span></span><br><span class="line">                        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> IOException) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"属于IOException，需重试"</span>);</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// 需求2：设置重试次数</span></span><br><span class="line">                            <span class="keyword">if</span> (mCurrentRetryCount &lt; mMaxConnectCount) &#123;</span><br><span class="line">                                <span class="comment">// 记录重试次数</span></span><br><span class="line">                                mCurrentRetryCount++;</span><br><span class="line">                                Log.d(TAG, <span class="string">"重试次数 = "</span> + mCurrentRetryCount);</span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 需求2：实现重试</span></span><br><span class="line">                                <span class="comment">// 通过返回的Observable发送的事件，即Next事件，使得retryWhen()重新订阅，实现重试功能</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 需求3：延迟重试</span></span><br><span class="line">                                <span class="comment">// 使用delay()操作符</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 需求4：遇到的异常次数越多，时间越长</span></span><br><span class="line">                                <span class="comment">// 设置delay()操作符的等待时间，每重试一次，增加延迟重试时间1s</span></span><br><span class="line"></span><br><span class="line">                                <span class="comment">// 设置等待时间</span></span><br><span class="line">                                mWaitRetryTime = <span class="number">1000</span> + mCurrentRetryCount * <span class="number">1000</span>;</span><br><span class="line">                                Log.d(TAG, <span class="string">"等待时间 ="</span> + mWaitRetryTime);</span><br><span class="line">                                <span class="keyword">return</span> Observable.just(<span class="number">1</span>).delay(mWaitRetryTime, TimeUnit.MILLISECONDS);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 若重试次数已 ＞ 设置重试次数，则不重试</span></span><br><span class="line">                                <span class="comment">// 通过发送error来停止重试（可在观察者的onError()中获取信息）</span></span><br><span class="line">                                <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> Throwable(<span class="string">"重试次数已超过设置次数 = "</span></span><br><span class="line">                                        + mCurrentRetryCount + <span class="string">"，即，不再重试"</span>));</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 若发生的异常不属于I/O异常，则不重试</span></span><br><span class="line">                        <span class="comment">// 通过返回的Observable发送的Error事件，实现（可在观察者的onError()中获取信息）</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> Throwable(<span class="string">"发生了非网络异常（非I/O异常）"</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Translation&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Translation translation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 接收服务器返回的数据</span></span><br><span class="line">                        Log.d(TAG, <span class="string">"发送成功"</span>);</span><br><span class="line">                        translation.show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 获取停止重试的信息</span></span><br><span class="line">                        Log.d(TAG, throwable.getMessage());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">D/RxJava: 发生异常 = java.net.UnknownHostException: Unable to resolve host &quot;fy.iciba.com&quot;: No address associated with hostname</span><br><span class="line">D/RxJava: 属于IOException，需重试</span><br><span class="line">D/RxJava: 重试次数 = 1</span><br><span class="line">D/RxJava: 等待时间 =2000</span><br><span class="line">D/RxJava: 发生异常 = java.net.UnknownHostException: Unable to resolve host &quot;fy.iciba.com&quot;: No address associated with hostname</span><br><span class="line">D/RxJava: 属于IOException，需重试</span><br><span class="line">D/RxJava: 重试次数 = 2</span><br><span class="line">D/RxJava: 等待时间 =3000</span><br><span class="line">D/RxJava: 发生异常 = java.net.UnknownHostException: Unable to resolve host &quot;fy.iciba.com&quot;: No address associated with hostname</span><br><span class="line">D/RxJava: 属于IOException，需重试</span><br><span class="line">D/RxJava: 重试次数 = 3</span><br><span class="line">D/RxJava: 等待时间 =4000</span><br><span class="line">D/RxJava: 发生异常 = java.net.UnknownHostException: Unable to resolve host &quot;fy.iciba.com&quot;: No address associated with hostname</span><br><span class="line">D/RxJava: 属于IOException，需重试</span><br><span class="line">D/RxJava: 重试次数 = 4</span><br><span class="line">D/RxJava: 等待时间 =5000</span><br><span class="line">D/RxJava: 发送成功</span><br><span class="line">D/RxJava: 嗨世界</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;p&gt;背景：发送网络请求&lt;br&gt;问题：发送网络请求过程中，出现错误时，导致该次网络请求不成功&lt;br&gt;解决方案：
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：网络请求轮询（有条件）</title>
    <link href="https://tylerLiu.top/2019/08/23/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BD%AE%E8%AF%A2%EF%BC%88%E6%9C%89%E6%9D%A1%E4%BB%B6%EF%BC%89/"/>
    <id>https://tylerLiu.top/2019/08/23/Android-RxJava应用：网络请求轮询（有条件）/</id>
    <published>2019-08-23T05:01:55.000Z</published>
    <updated>2019-08-23T06:52:39.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><p>背景：实现轮询，也称pull。客户端隔固定时间主动向服务器发送请求获取信息，可根据服务器返回信息停止轮询，即，有条件轮询。<br>解决方案：使用<code>RxJava</code>的<code>repeatWhen()</code>操作符</p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>采用<code>GET</code>，对金山词霸API按规定时间重复发送网络请求，模拟轮询。</p><ol><li>停止轮询的条件：当轮询到第四次时</li><li>采用<code>Gson</code>解析数据</li></ol><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxJavafixRxjavaActivity2</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RxJava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟轮询服务器次数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_rx_javafix_rxjava2);</span><br><span class="line"></span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(<span class="string">"http://fy.iciba.com/"</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);</span><br><span class="line"></span><br><span class="line">        Observable&lt;Translation&gt; observable = request.getCall();</span><br><span class="line"></span><br><span class="line">        observable.repeatWhen(<span class="keyword">new</span> Function&lt;Observable&lt;Object&gt;, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">            <span class="comment">// 在Function函数中，必须对输入的 Observable&lt;Object&gt;进行处理，此处使用flatMap()操作符接收上游的数据</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(Observable&lt;Object&gt; objectObservable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 将原始Observable停止发送事件的标识（Complete()/Error()）转换成一个Object类型数据传递给一个新的Observable，</span></span><br><span class="line">                <span class="comment">// 以此决定是否重新订阅并发送原来的Observable，即轮询</span></span><br><span class="line">                <span class="comment">// 此处由两种情况：</span></span><br><span class="line">                <span class="comment">// 1. 若返回一个Complete()/Error()事件，则不重新订阅并发送原来的Observable，即轮询结束</span></span><br><span class="line">                <span class="comment">// 2. 若返回其余事件，则重新订阅并发送原来的Observable，即继续轮询</span></span><br><span class="line">                <span class="keyword">return</span> objectObservable.flatMap(<span class="keyword">new</span> Function&lt;Object, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(Object o) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">// 加入判断条件，当轮询次数为5次时，停止轮询</span></span><br><span class="line">                        <span class="keyword">if</span> (i &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                            <span class="comment">// 此处选择发送onError()事件以结束轮询，因为可触发下游观察者的onError()方法回调</span></span><br><span class="line">                            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> Throwable(<span class="string">"轮询结束"</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 若轮询次数 ＜ 4，发送一个Next事件继续轮询</span></span><br><span class="line">                        <span class="keyword">return</span> Observable.just(<span class="number">1</span>).delay(<span class="number">2</span>, TimeUnit.SECONDS);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Translation&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Translation translation)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// e.接收服务器返回的数据</span></span><br><span class="line">                        translation.show();</span><br><span class="line">                        i++;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 获取轮询结束信息</span></span><br><span class="line">                        Log.d(TAG, e.toString());</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">14:46:35.250 3950-3950/com.ly.allendemorx D/RxJava: 嗨世界</span><br><span class="line">14:46:37.240 3950-3950/com.ly.allendemorx D/RxJava: 嗨世界</span><br><span class="line">14:46:39.554 3950-3950/com.ly.allendemorx D/RxJava: 嗨世界</span><br><span class="line">14:46:42.787 3950-3950/com.ly.allendemorx D/RxJava: 嗨世界</span><br><span class="line">14:46:44.929 3950-3950/com.ly.allendemorx D/RxJava: 嗨世界</span><br><span class="line">14:46:44.971 3950-3950/com.ly.allendemorx D/RxJava: java.lang.Throwable: 轮询结束</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;p&gt;背景：实现轮询，也称pull。客户端隔固定时间主动向服务器发送请求获取信息，可根据服务器返回信息停止轮询
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：联合判断多个事件</title>
    <link href="https://tylerLiu.top/2019/08/22/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E8%81%94%E5%90%88%E5%88%A4%E6%96%AD%E5%A4%9A%E4%B8%AA%E4%BA%8B%E4%BB%B6/"/>
    <id>https://tylerLiu.top/2019/08/22/Android-RxJava应用：联合判断多个事件/</id>
    <published>2019-08-22T08:46:29.000Z</published>
    <updated>2019-08-22T09:22:59.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><p>同时对多个事件进行联合判断。如，填写表单时，需要表里的所有信息（姓名、年龄、职业等）都被填写后，才能点击提交按钮。</p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>此处采用 填写表单 作为联合判断功能展示，即，表单里所有信息（姓名、年龄、职业等）都被填写后，才允许点击 “提交” 按钮。</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h1><p>采用<code>combineLatest()</code>操作符。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"请填写姓名"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/age"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"请填写年龄"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/job"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"请填写职业"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:enabled</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CombineJudgeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText mName, mAge, mJob;</span><br><span class="line">    <span class="keyword">private</span> Button mButton;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_combine_judge);</span><br><span class="line">        mName = findViewById(R.id.name);</span><br><span class="line">        mAge = findViewById(R.id.age);</span><br><span class="line">        mJob = findViewById(R.id.job);</span><br><span class="line">        mButton = findViewById(R.id.list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为每个EditText设置被观察者，用于发送监听事件</span></span><br><span class="line">        <span class="comment">// 说明：</span></span><br><span class="line">        <span class="comment">// 1. 这里使用RxBinding的RxTextView.textChanges(name)是对对控件数据变更进行监听</span></span><br><span class="line">        <span class="comment">// （功能类似TextWatcher），需要引入依赖：implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'</span></span><br><span class="line">        <span class="comment">// 2. 传入EditText控件，点击任一个EditText撰写时，都会发送数据事件 = Function3（）的返回值（下面会详细说明）</span></span><br><span class="line">        <span class="comment">// 3. 采用skip(1)原因：跳过 一开始EditText无任何输入时的空值</span></span><br><span class="line">        Observable&lt;CharSequence&gt; nameObservable = RxTextView.textChanges(mName).skip(<span class="number">1</span>);</span><br><span class="line">        Observable&lt;CharSequence&gt; ageObservable = RxTextView.textChanges(mAge).skip(<span class="number">1</span>);</span><br><span class="line">        Observable&lt;CharSequence&gt; jobObservable = RxTextView.textChanges(mJob).skip(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过combineLatest()合并事件并联合判断</span></span><br><span class="line">        Observable.combineLatest(nameObservable, ageObservable, jobObservable, <span class="keyword">new</span> Function3&lt;CharSequence,</span><br><span class="line">                CharSequence, CharSequence, Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">apply</span><span class="params">(CharSequence charSequence, CharSequence charSequence2, CharSequence charSequence3)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 规定表单输入信息不能为空</span></span><br><span class="line">                <span class="keyword">boolean</span> isNameEmpty = !TextUtils.isEmpty(mName.getText());</span><br><span class="line">                <span class="keyword">boolean</span> isAgeEmpty = !TextUtils.isEmpty(mAge.getText());</span><br><span class="line">                <span class="keyword">boolean</span> isJobEmpty = !TextUtils.isEmpty(mJob.getText());</span><br><span class="line">                <span class="keyword">return</span> isNameEmpty &amp;&amp; isAgeEmpty &amp;&amp; isJobEmpty;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean aBoolean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 返回结果 &amp; 设置按钮可点击样式</span></span><br><span class="line">                mButton.setEnabled(aBoolean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;p&gt;同时对多个事件进行联合判断。如，填写表单时，需要表里的所有信息（姓名、年龄、职业等）都被填写后，才能点击
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：从磁盘/内存缓存中获取数据</title>
    <link href="https://tylerLiu.top/2019/08/22/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E4%BB%8E%E7%A3%81%E7%9B%98-%E5%86%85%E5%AD%98%E7%BC%93%E5%AD%98%E4%B8%AD%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE/"/>
    <id>https://tylerLiu.top/2019/08/22/Android-RxJava应用：从磁盘-内存缓存中获取数据/</id>
    <published>2019-08-22T08:13:41.000Z</published>
    <updated>2019-08-22T08:44:49.142Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><p>背景：从服务器获取数据<br>问题：每次获取数据都通过网络请求向服务器获取会浪费很多资源，包括流量和时间<br>解决方案：从缓存中读取数据，即，当需要获取数据时，先从本地的磁盘/内存缓存中获取所需数据，如果缓存中没有数据，再通过网络请求向服务器获取数据<br>实现原理：组合操作符<code>concat()</code>和过滤操作符<code>firstElement()</code></p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><img src="/2019/08/22/Android-RxJava应用：从磁盘-内存缓存中获取数据/944365-ac1bc26fa511c836.png"><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RxJava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟内存缓存和磁盘缓存</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String memoryCache = <span class="keyword">null</span>;</span><br><span class="line">    String diskCache = <span class="string">"从磁盘缓存中获取的数据"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_cache_demo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置第一个Observable，检查内存缓存是否由该数据的缓存</span></span><br><span class="line">        Observable&lt;String&gt; memory = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 判断内存缓存有无数据</span></span><br><span class="line">                <span class="keyword">if</span> (memoryCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 若有该数据，则发送</span></span><br><span class="line">                    emitter.onNext(memoryCache);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 若没有，直接发送结束事件</span></span><br><span class="line">                    emitter.onComplete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置第二个Observable，检查磁盘缓存是否由该数据的缓存</span></span><br><span class="line">        Observable&lt;String&gt; disk = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 判断磁盘缓存有无数据</span></span><br><span class="line">                <span class="keyword">if</span> (diskCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 若有该数据，则发送</span></span><br><span class="line">                    emitter.onNext(diskCache);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 若没有，直接发送结束事件</span></span><br><span class="line">                    emitter.onComplete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置第三个Observable：通过网络获取数据</span></span><br><span class="line">        Observable&lt;String&gt; network = Observable.just(<span class="string">"从网络获取数据"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用concat()和firstElement()实现缓存功能</span></span><br><span class="line">        <span class="comment">// 1. 通过concat()合并三个被观察者的事件，并将它们按顺序串成队列</span></span><br><span class="line">        Observable.concat(memory, disk, network)</span><br><span class="line">                <span class="comment">// 通过firstElement()，从队列中取出并发送第一个有效事件，即依次判断检查三个Observable</span></span><br><span class="line">                <span class="comment">// 即本例的逻辑为：</span></span><br><span class="line">                <span class="comment">// a. firstElement()取出第一个事件memory，即先判断内存缓存中有无数据缓存；</span></span><br><span class="line">                <span class="comment">// 由于memoryCache = null，即内存缓存中无数据，所以发送结束事件（视为无效事件）</span></span><br><span class="line">                <span class="comment">// b. firstElement()继续取出第二个事件disk，即判断磁盘缓存中有无数据缓存：</span></span><br><span class="line">                <span class="comment">// 由于diskCache ≠ null，即磁盘缓存中有数据，所以发送Next事件（有效事件）</span></span><br><span class="line">                <span class="comment">// c. 即firstElement()已发出第一个有效事件（disk事件），所以停止判断。</span></span><br><span class="line">                .firstElement()</span><br><span class="line">                <span class="comment">// 3. 订阅</span></span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"最终获取的数据来源 =  "</span> + s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/RxJava: 最终获取的数据来源 =  从磁盘缓存中获取的数据</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;p&gt;背景：从服务器获取数据&lt;br&gt;问题：每次获取数据都通过网络请求向服务器获取会浪费很多资源，包括流量和时间
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：合并数据源并展示</title>
    <link href="https://tylerLiu.top/2019/08/22/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E5%90%88%E5%B9%B6%E6%95%B0%E6%8D%AE%E6%BA%90%E5%B9%B6%E5%B1%95%E7%A4%BA/"/>
    <id>https://tylerLiu.top/2019/08/22/Android-RxJava应用：合并数据源并展示/</id>
    <published>2019-08-22T07:47:34.000Z</published>
    <updated>2019-08-22T08:12:03.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><p>背景：获取数据并统一展示到客户端<br>冲突：数据来源不同，网络和本地，即，数据源多样<br>解决方案：采用RxJava操作符，这里使用<code>merge()</code>和<code>zip()</code>演示。</p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>获取数据并统一展示到客户端</p><h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h1><ul><li><code>merge()</code>：实现从（网络和本地）获取数据并统一展示</li><li><code>zip()</code>：结合<code>Retrofit</code>和<code>RxJava</code>，实现合并两个网络请求，向两个服务器获取数据并统一展示。</li></ul><h2 id="3-1-merge"><a href="#3-1-merge" class="headerlink" title="3.1 merge()"></a>3.1 merge()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"RxJava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于存放最终展示的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String result = <span class="string">"数据源来自 = "</span>;</span><br><span class="line"></span><br><span class="line">    Observable&lt;String&gt; network = Observable.just(<span class="string">"网络"</span>);</span><br><span class="line">    Observable&lt;String&gt; file = Observable.just(<span class="string">"本地文件"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_merge_demo);</span><br><span class="line"></span><br><span class="line">        Observable.merge(network, file)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"数据源有： "</span> + value);</span><br><span class="line">                        result += value + <span class="string">"+"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 接收合并事件后，统一展示</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"获取数据完成"</span>);</span><br><span class="line">                        Log.d(TAG, result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">D/RxJava: 数据源有： 网络</span><br><span class="line">D/RxJava: 数据源有： 本地文件</span><br><span class="line">D/RxJava: 获取数据完成</span><br><span class="line">D/RxJava: 数据源来自 = 网络+本地文件+</span><br></pre></td></tr></table></figure><h2 id="3-2-zip"><a href="#3-2-zip" class="headerlink" title="3.2 zip()"></a>3.2 zip()</h2><ol><li>从不同数据源（两个服务器）获取数据，并合并</li><li>统一显示结果</li></ol><p>两个接收服务器数据的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Translation1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> ContentBean content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentBean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String from;</span><br><span class="line">        <span class="keyword">private</span> String to;</span><br><span class="line">        <span class="keyword">private</span> String vendor;</span><br><span class="line">        <span class="keyword">private</span> String out;</span><br><span class="line">        <span class="keyword">private</span> String ciba_use;</span><br><span class="line">        <span class="keyword">private</span> String ciba_out;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> err_no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义输出返回数据的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"第1次翻译="</span> + content.out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Translation2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> ContentBean content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentBean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String from;</span><br><span class="line">        <span class="keyword">private</span> String to;</span><br><span class="line">        <span class="keyword">private</span> String vendor;</span><br><span class="line">        <span class="keyword">private</span> String out;</span><br><span class="line">        <span class="keyword">private</span> String ciba_use;</span><br><span class="line">        <span class="keyword">private</span> String ciba_out;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> err_no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义输出返回数据的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">"第2翻译="</span> + content.out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Activity</code>中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZipDemoActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Rxjava"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Observable接口类型的网络请求对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Observable&lt;Translation1&gt; mObservable1;</span><br><span class="line">    Observable&lt;Translation2&gt; mObservable2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_zip_demo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤1：创建Retrofit对象</span></span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(<span class="string">"http://fy.iciba.com/"</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤2：创建网络请求接口的实例</span></span><br><span class="line">        GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤3：对两个网络请求进行封装</span></span><br><span class="line">        mObservable1 = request.getCall_1().subscribeOn(Schedulers.io());</span><br><span class="line">        mObservable2 = request.getCall_2().subscribeOn(Schedulers.io());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤4：通过使用zip()对两个网络请求进行合并再发送</span></span><br><span class="line">        Observable.zip(mObservable1, mObservable2, <span class="keyword">new</span> BiFunction&lt;Translation1, Translation2, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Translation1 translation1, Translation2 translation2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> translation1.show() + <span class="string">" &amp; "</span> + translation2.show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 结合显示2个网络请求的数据结果</span></span><br><span class="line">                        Log.d(TAG, <span class="string">"最终接收到的数据是："</span> + s);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"登录失败"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/Rxjava: 最终接收到的数据是：第1次翻译=HI寄存器 &amp; 第2翻译=嗨登录</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;p&gt;背景：获取数据并统一展示到客户端&lt;br&gt;冲突：数据来源不同，网络和本地，即，数据源多样&lt;br&gt;解决方案：
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：网络请求嵌套回调</title>
    <link href="https://tylerLiu.top/2019/08/22/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B5%8C%E5%A5%97%E5%9B%9E%E8%B0%83/"/>
    <id>https://tylerLiu.top/2019/08/22/Android-RxJava应用：网络请求嵌套回调/</id>
    <published>2019-08-22T05:46:45.000Z</published>
    <updated>2019-08-22T07:38:19.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><h2 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h2><p>需要进行嵌套网络请求，即，在第一个网络请求成功后，再继续进行一次网络请求。</p><blockquote><p>如先进行注册的网路请求，等注册成功后，再进行登录的网路请求。</p></blockquote><h2 id="1-2-冲突"><a href="#1-2-冲突" class="headerlink" title="1.2 冲突"></a>1.2 冲突</h2><p>嵌套实现网路请求较为复杂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送注册网络请求的函数方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    api.register(<span class="keyword">new</span> RegisterRequest())</span><br><span class="line">            <span class="comment">// 在IO线程进行网络请求</span></span><br><span class="line">            .subscribeOn(Schedulers.io()) </span><br><span class="line">            <span class="comment">// 回到主线程去处理请求结果</span></span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread()) </span><br><span class="line">            .subscribe(<span class="keyword">new</span> Consumer&lt;RegisterResponse&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(RegisterResponse registerResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"注册成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="comment">// 注册成功, 调用登录的方法</span></span><br><span class="line">                    login();   </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"注册失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送登录网络请求的函数方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    api.login(<span class="keyword">new</span> LoginRequest())</span><br><span class="line">            .subscribeOn(Schedulers.io())           </span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread()) </span><br><span class="line">            .subscribe(<span class="keyword">new</span> Consumer&lt;LoginResponse&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(LoginResponse loginResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"登录成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"登录失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h2><p>结合<code>RxJava</code>中的变换操作符<code>flatMap()</code>实现嵌套网路请求。<br><a href="https://tylerliu.top/2019/08/15/Android-RxJava%EF%BC%9A变换操作符/">Android RxJava：变换操作符</a></p><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>实现功能：发送嵌套网络请求（将英文翻译成中文，翻译两次）<br>Demo：先翻译注册，再翻译登录。</p><h1 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h1><p>步骤和前面的相同，这里列出不同的部分。</p><p>为了演示两个网络请求，这里设置两个接收服务器的数据类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Translation1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> ContentBean content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentBean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String from;</span><br><span class="line">        <span class="keyword">private</span> String to;</span><br><span class="line">        <span class="keyword">private</span> String vendor;</span><br><span class="line">        <span class="keyword">private</span> String out;</span><br><span class="line">        <span class="keyword">private</span> String ciba_use;</span><br><span class="line">        <span class="keyword">private</span> String ciba_out;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> err_no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义输出返回数据的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"RxJava"</span>, <span class="string">"翻译内容 = "</span> + content.out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Translation2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> ContentBean content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentBean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String from;</span><br><span class="line">        <span class="keyword">private</span> String to;</span><br><span class="line">        <span class="keyword">private</span> String vendor;</span><br><span class="line">        <span class="keyword">private</span> String out;</span><br><span class="line">        <span class="keyword">private</span> String ciba_use;</span><br><span class="line">        <span class="keyword">private</span> String ciba_out;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> err_no;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义输出返回数据的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(<span class="string">"RxJava"</span>, <span class="string">"翻译内容 = "</span> + content.out);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建用于描述网络请求的接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GetRequest_Interface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网络请求1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"ajax.php?a=fy&amp;f=auto&amp;t=auto&amp;w=hi%20register"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Translation1&gt; <span class="title">getCall_1</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 网络请求2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"ajax.php?a=fy&amp;f=auto&amp;t=auto&amp;w=hi%20login"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Translation2&gt; <span class="title">getCall_2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Activity</code>中的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemorx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jakewharton.retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.reactivex.Observable;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.ObservableSource;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.android.schedulers.AndroidSchedulers;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.functions.Consumer;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.functions.Function;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Retrofit;</span><br><span class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RxJava实现嵌套网络请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main8Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Rxjava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义Observable接口类型的网络请求对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Observable&lt;Translation1&gt; mObservable1;</span><br><span class="line">    Observable&lt;Translation2&gt; mObservable2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main8);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤1：创建Retrofit对象</span></span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                .baseUrl(<span class="string">"http://fy.iciba.com/"</span>)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤2：创建网络请求接口实例</span></span><br><span class="line">        GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤3：对两个网络请求进行封装</span></span><br><span class="line">        mObservable1 = request.getCall_1();</span><br><span class="line">        mObservable2 = request.getCall_2();</span><br><span class="line"></span><br><span class="line">        mObservable1</span><br><span class="line">                <span class="comment">// 在IO线程进行第一次网络请求</span></span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .doOnNext(<span class="keyword">new</span> Consumer&lt;Translation1&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Translation1 translation1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"第1次网络请求成功"</span>);</span><br><span class="line">                        translation1.show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 切换到IO线程进行第二次网络请求</span></span><br><span class="line">                <span class="comment">// 因为flatMap()是对初始被观察者作变换，所以对于旧的被观察者，它是新的观察者，</span></span><br><span class="line">                <span class="comment">// 所以使用observeOn()进行线程切换，但是对于初始观察者，它就是新的被观察者。</span></span><br><span class="line">                .observeOn(Schedulers.io())</span><br><span class="line">                .flatMap(<span class="keyword">new</span> Function&lt;Translation1, ObservableSource&lt;Translation2&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> ObservableSource&lt;Translation2&gt; <span class="title">apply</span><span class="params">(Translation1 translation1)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 将网络请求1转换成网络请求2，即发送网络请求2</span></span><br><span class="line">                        <span class="keyword">return</span> mObservable2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 初始观察者切换到主线程，处理网络请求2的结果</span></span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Consumer&lt;Translation2&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Translation2 translation2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"第2次网络请求成功"</span>);</span><br><span class="line">                        translation2.show();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"登录失败"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;h2 id=&quot;1-1-背景&quot;&gt;&lt;a href=&quot;#1-1-背景&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava应用：网络请求轮询（无条件）</title>
    <link href="https://tylerLiu.top/2019/08/22/Android-RxJava%E5%BA%94%E7%94%A8%EF%BC%9A%E7%BD%91%E7%BB%9C%E8%BD%AE%E8%AF%A2%E8%AF%B7%E6%B1%82/"/>
    <id>https://tylerLiu.top/2019/08/22/Android-RxJava应用：网络轮询请求/</id>
    <published>2019-08-22T03:17:01.000Z</published>
    <updated>2019-08-23T05:03:32.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h1><ol><li>背景：实现轮询请求，即，客户端固定时间主动向服务器发送请求，获取信息，也称pull。</li><li>冲突：通过<code>Handler</code>和<code>Timer</code>定时器 的实现方式较为复杂，可扩展性差。</li><li>解决方案：采用<code>RxJava</code>的延时创建操作符</li></ol><ul><li><code>interval()</code>：无限次轮询</li><li><code>intervalRange()</code>：有限次轮询</li></ul><h1 id="2-功能说明"><a href="#2-功能说明" class="headerlink" title="2. 功能说明"></a>2. 功能说明</h1><p>采用<code>GET</code>方法对金山词霸API按规定时间重复发送网络请求，模拟轮询需求。<br>采用<code>Gson</code>进行数据解析。</p><h1 id="3-具体实现"><a href="#3-具体实现" class="headerlink" title="3. 具体实现"></a>3. 具体实现</h1><h2 id="3-1-步骤说明"><a href="#3-1-步骤说明" class="headerlink" title="3.1 步骤说明"></a>3.1 步骤说明</h2><ol><li>添加依赖</li><li>创建接收服务器返回的数据的类</li><li>创建用于描述网络请求的接口</li><li>创建<code>Retrofit</code>实例</li><li>创建网络请求接口实例，配置网络请求参数</li><li>发送网络请求</li><li>对返回的数据进行处理</li></ol><p>前面的步骤在<a href="https://tylerliu.top/2019/08/17/Android-RxJava%EF%BC%9A线程控制/">Android RxJava：线程控制</a>中已经讲解，这里主要分析轮询部分的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RxJava实现轮询</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxJavafixRxjavaActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Rxjava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"CheckResult"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_rx_javafix_rxjava);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤1：采用interval()延迟发送</span></span><br><span class="line">        <span class="comment">// 注：此处主要展示无限轮询，要实现有限轮询，使用intervalRange()即可</span></span><br><span class="line">        Observable.interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                <span class="comment">// 步骤2：每次发送数字前发送一次网络请求（doOnNext()在执行Next事件前调用）</span></span><br><span class="line">                <span class="comment">// 即每隔1秒产生一个数字前，就发送一次网络请求，实现轮询</span></span><br><span class="line">                .doOnNext(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"第 "</span> + aLong + <span class="string">" 次轮询"</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 步骤3：通过Retrofit实现网络请求</span></span><br><span class="line">                        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                                .baseUrl(<span class="string">"http://fy.iciba.com/"</span>)</span><br><span class="line">                                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                                .build();</span><br><span class="line"></span><br><span class="line">                        GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);</span><br><span class="line"></span><br><span class="line">                        Observable&lt;Translation&gt; observable = request.getCall();</span><br><span class="line"></span><br><span class="line">                        observable.subscribeOn(Schedulers.io())</span><br><span class="line">                                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                                .subscribe(<span class="keyword">new</span> Consumer&lt;Translation&gt;() &#123;</span><br><span class="line">                                    <span class="meta">@Override</span></span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Translation translation)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                                        <span class="keyword">if</span> (translation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                            Log.d(TAG, <span class="string">"结果 from："</span> + translation.getContent().getFrom());</span><br><span class="line">                                            Log.d(TAG, <span class="string">"结果 to："</span> + translation.getContent().getTo());</span><br><span class="line">                                            Log.d(TAG, <span class="string">"结果 vendor："</span> + translation.getContent().getVendor());</span><br><span class="line">                                            Log.d(TAG, <span class="string">"结果 out："</span> + translation.getContent().getOut());</span><br><span class="line">                                            Log.d(TAG, <span class="string">"结果 ciba_use："</span> + translation.getContent().getCiba_use());</span><br><span class="line">                                            Log.d(TAG, <span class="string">"结果 ciba_out："</span> + translation.getContent().getCiba_out());</span><br><span class="line">                                            Log.d(TAG, <span class="string">"结果 err_no："</span> + translation.getContent().getErr_no());</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到的事件："</span> + aLong);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">D/Rxjava: 第 0 次轮询</span><br><span class="line">D/Rxjava: 接收到的事件：0</span><br><span class="line">D/Rxjava: 第 1 次轮询</span><br><span class="line">D/Rxjava: 接收到的事件：1</span><br><span class="line">D/Rxjava: 第 2 次轮询</span><br><span class="line">D/Rxjava: 接收到的事件：2</span><br><span class="line">D/Rxjava: 结果 from：en-EU</span><br><span class="line">D/Rxjava: 结果 to：zh-CN</span><br><span class="line">D/Rxjava: 结果 vendor：tencent</span><br><span class="line">D/Rxjava: 结果 out：嗨世界</span><br><span class="line">D/Rxjava: 结果 ciba_use：来自机器翻译。</span><br><span class="line">D/Rxjava: 结果 ciba_out：</span><br><span class="line">D/Rxjava: 结果 err_no：0</span><br><span class="line">D/Rxjava: 第 3 次轮询</span><br><span class="line">D/Rxjava: 接收到的事件：3</span><br><span class="line">D/Rxjava: 结果 from：en-EU</span><br><span class="line">D/Rxjava: 结果 to：zh-CN</span><br><span class="line">D/Rxjava: 结果 vendor：tencent</span><br><span class="line">D/Rxjava: 结果 out：嗨世界</span><br><span class="line">D/Rxjava: 结果 ciba_use：来自机器翻译。</span><br><span class="line">D/Rxjava: 结果 ciba_out：</span><br><span class="line">D/Rxjava: 结果 err_no：0</span><br><span class="line">D/Rxjava: 结果 from：en-EU</span><br><span class="line">D/Rxjava: 结果 to：zh-CN</span><br><span class="line">D/Rxjava: 结果 vendor：tencent</span><br><span class="line">D/Rxjava: 结果 out：嗨世界</span><br><span class="line">D/Rxjava: 结果 ciba_use：来自机器翻译。</span><br><span class="line">D/Rxjava: 结果 ciba_out：</span><br><span class="line">D/Rxjava: 结果 err_no：0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-需求场景&quot;&gt;&lt;a href=&quot;#1-需求场景&quot; class=&quot;headerlink&quot; title=&quot;1. 需求场景&quot;&gt;&lt;/a&gt;1. 需求场景&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;背景：实现轮询请求，即，客户端固定时间主动向服务器发送请求，获取信息，也称pull。&lt;/li
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：背压策略</title>
    <link href="https://tylerLiu.top/2019/08/20/Android-RxJava%EF%BC%9A%E8%83%8C%E5%8E%8B%E7%AD%96%E7%95%A5/"/>
    <id>https://tylerLiu.top/2019/08/20/Android-RxJava：背压策略/</id>
    <published>2019-08-20T02:43:13.000Z</published>
    <updated>2019-08-22T03:14:05.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h1><h2 id="1-1-背景"><a href="#1-1-背景" class="headerlink" title="1.1 背景"></a>1.1 背景</h2><p>观察者和被观察者之间存在两种订阅关系：同步、异步。</p><ol><li>同步订阅：</li></ol><ul><li>观察者和被观察者工作在同一个线程</li><li>被观察者每发送一个事件，必须等到观察者接收且处理后，才能继续发送下一个事件。</li></ul><img src="/2019/08/20/Android-RxJava：背压策略/微信截图_20190820105132.png"><ol start="2"><li>异步订阅</li></ol><ul><li>观察者和被观察者工作不在同一线程</li><li>被观察者不需要等待观察者接收和处理后才能继续发送下一个事件，而是不断发送，直到发送事件完毕</li><li>此时的事件并不会直接发送到观察者处，而是先发送到缓存区，等观察者从缓存区取出事件来处理</li></ul><img src="/2019/08/20/Android-RxJava：背压策略/微信截图_20190820134939.png"><p>对于异步订阅关系，存在<strong>被观察者发送事件的速度与观察者接收事件的速度不匹配的情况</strong>：</p><blockquote><ol><li>发送和接收事件速度就是单位时间内发送和接收事件的数量</li><li>大部分情况是，<strong>被观察者发送事件速度  &gt; 观察者接收事件速度</strong></li></ol></blockquote><h2 id="1-2-问题"><a href="#1-2-问题" class="headerlink" title="1.2 问题"></a>1.2 问题</h2><p>被观察者发送事件速度太快，观察者来不及接收所有事件，导致<strong>观察者无法及时响应/处理所有发送过来的事件，最终导致缓存区溢出、事件丢失或OOM问题</strong>。</p><blockquote><ol><li>点击按钮事件：连续快速点击按钮，则只会造成点击两次的效果。</li><li>原因：因为点击速度太快，按钮来不及响应。</li></ol></blockquote><p>例子：<br>被观察者发送事件速度为10ms/个，观察者接收事件速度为5s/个，即发送和接收速度严重不匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"发送了事件"</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">// 发送事件速度：10ms / 个</span></span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 设置被观察者在IO线程中进行</span></span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        <span class="comment">// 设置观察者在主线程中进行</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 接收事件速度：5s / 个</span></span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                    Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/20/Android-RxJava：背压策略/微信截图_20190820143554.png"><h2 id="1-3-解决方案"><a href="#1-3-解决方案" class="headerlink" title="1.3 解决方案"></a>1.3 解决方案</h2><p>背压策略。</p><h1 id="2-背压策略简介"><a href="#2-背压策略简介" class="headerlink" title="2. 背压策略简介"></a>2. 背压策略简介</h1><h2 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h2><p>一种<strong>控制事件流速</strong>的策略。</p><h2 id="2-2-作用"><a href="#2-2-作用" class="headerlink" title="2.2 作用"></a>2.2 作用</h2><p>在<strong>异步订阅关系</strong>中，<strong>控制事件发送和接收的速度</strong>。</p><h2 id="2-3-解决的问题"><a href="#2-3-解决的问题" class="headerlink" title="2.3 解决的问题"></a>2.3 解决的问题</h2><p>解决因为被观察者发送事件速度和观察者接收事件速度不匹配，导致的观察者无法及时响应/处理所有被观察者发送事件的问题。</p><h2 id="2-4-应用场景"><a href="#2-4-应用场景" class="headerlink" title="2.4 应用场景"></a>2.4 应用场景</h2><p>被观察者发送事件速度与观察者接收事件速度不匹配的场景。<br>具体场景取决于该事件的类型，如：网络请求，具体场景：有很多网络请求需要执行，但执行者的执行速度没有那么快，此时就需要使用背压策略来控制。</p><h1 id="3-背压策略的原理"><a href="#3-背压策略的原理" class="headerlink" title="3. 背压策略的原理"></a>3. 背压策略的原理</h1><p><code>RxJava</code>实现背压策略<code>Backpressure</code>的原理：</p><ol><li>避免出现事件发送和接收流速不匹配的情况：</li></ol><ul><li>a. 控制观察者接收事件的速度：响应式拉拉取，响应式拉取，即观察者根据自身实际情况按需接收事件</li><li>b. 控制被观察者发送事件的速度：反馈控制，即被观察者根据观察者接收事件能力l来控制发送事件的速度</li></ul><ol start="2"><li>当出现事件发送和接收流速不匹配时的解决方案：采用背压策略模式，使用缓存区，对超出缓存区大小的事件进行丢弃、保留和报错的措施</li></ol><p>示意图如下：</p><img src="/2019/08/20/Android-RxJava：背压策略/944365-d37b89b86aea104d.png"><p>与<code>RxJava 1.0</code> 中的<code>Observable</code>相比：</p><img src="/2019/08/20/Android-RxJava：背压策略/944365-c01363ed15386193.png"><p>在<code>RxJava 2.0</code>中的<code>Flowable</code>是什么呢？它其实是<code>RxJava 2.0</code>中被观察者的一种新的实现，同时也是背压策略实现的承载着。</p><h1 id="4-背压策略的具体实现：Flowable"><a href="#4-背压策略的具体实现：Flowable" class="headerlink" title="4. 背压策略的具体实现：Flowable"></a>4. 背压策略的具体实现：Flowable</h1><p>在<code>RxJava 2.0</code>中，采用<code>Flowable</code>来实现背压策略。</p><blockquote><p>准确来说，是<strong>非阻塞式背压</strong>策略</p></blockquote><h2 id="4-1-Flowable介绍"><a href="#4-1-Flowable介绍" class="headerlink" title="4.1 Flowable介绍"></a>4.1 Flowable介绍</h2><p>定义：在<code>RxJava 2.0</code>中，<code>Observable</code>的一种新实现。<br>作用：实现非阻塞式背压策略。</p><h2 id="4-2-Flowable特点"><a href="#4-2-Flowable特点" class="headerlink" title="4.2 Flowable特点"></a>4.2 Flowable特点</h2><ol><li>对应的<code>Observer</code>变为<code>Subscriber</code>：被观察者<code>Flowable</code>——观察者<code>Subscriber</code></li><li>所有的操作符强制支持背压：<code>Flowable</code>中的操作符大多与旧有的<code>Observable</code>类似</li><li>缓存区存放策略：按发送的顺序保存在缓存区：即先发送先进入缓存区，先进入缓存区的事件先取出</li><li>默认的缓存区（队列）大小为128</li></ol><p>下面是1.0与2.0观察者模型的对比图：实际上<code>RxJava 2.0</code>也保留了<code>Observable</code>——<code>Observer</code>的观察者模型。</p><img src="/2019/08/20/Android-RxJava：背压策略/944365-9c67239dfbc77eed.png"><h2 id="4-3-与RxJava-1-0中被观察者的旧实现Observable的关系"><a href="#4-3-与RxJava-1-0中被观察者的旧实现Observable的关系" class="headerlink" title="4.3 与RxJava 1.0中被观察者的旧实现Observable的关系"></a>4.3 与RxJava 1.0中被观察者的旧实现Observable的关系</h2><img src="/2019/08/20/Android-RxJava：背压策略/944365-025e8828a7dd1fd9.png"><p>为什么要采用<code>Flowable</code>实现背压，而不采用旧的<code>Observable</code>呢？<br><strong>原因：<code>Observable</code>无法很好解决背压问题</strong>。</p><ul><li>背景：在<code>RxJava 1.0</code>中，<code>Observable</code>内部采用队列存储事件，在Android中，默认缓存大小为16</li><li>冲突：若发送事件速度 &gt; 接收事件速度时，队列中的数目可能会超过16个，从而导致<code>Observable</code>有很多事件不能被正确背压，最终抛出<code>MissingBackpressureException</code>。在<code>RxJava 1.0</code>也有解决背压的方案：手动减少被观察者发送的事件，降低被观察者发送事件的速度（采用延迟方式），但效果并不好，还是会出现丢失的可能性。</li><li>解决方案：采用<code>RxJava 2.0</code>被观察者的新实现<code>Flowable</code>来实现背压。</li></ul><h2 id="4-4-Flowable的基础使用"><a href="#4-4-Flowable的基础使用" class="headerlink" title="4.4 Flowable的基础使用"></a>4.4 Flowable的基础使用</h2><p>使用方式类似于<code>Observable</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建被观察者Flowable</span></span><br><span class="line">Flowable&lt;Integer&gt; upstream = Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 传入背压参数</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建观察者Subscriber</span></span><br><span class="line">Subscriber&lt;Integer&gt; downstream = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对比Observable传入的Disposable参数，Subscriber这里传入的参数为Subscription</span></span><br><span class="line">        <span class="comment">// 相同点：Subscription具备Disposable参数的作用，可以通过调用Subscription.cancel()切断连接</span></span><br><span class="line">        <span class="comment">// 不同点：Subscription增加了void request(long n)</span></span><br><span class="line">        Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">        s.request(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onNext: "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立订阅关系</span></span><br><span class="line">upstream.subscribe(downstream);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity6: onSubscribe</span><br><span class="line">D/MainActivity6: onNext: 1</span><br><span class="line">D/MainActivity6: onNext: 2</span><br><span class="line">D/MainActivity6: onNext: 3</span><br><span class="line">D/MainActivity6: onComplete</span><br></pre></td></tr></table></figure><p>更优雅的链式调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件 1"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件 2"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件 3"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送完成"</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">        s.request(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="5-背压策略的使用"><a href="#5-背压策略的使用" class="headerlink" title="5. 背压策略的使用"></a>5. 背压策略的使用</h1><p>前面说到，<strong>使用背压的场景一般是在异步订阅关系下的</strong>，所以下面主要讲解异步订阅关系场景，即被观察者和观察者工作在不同线程，但是，<strong>由于在同步订阅场景中也有可能出现流速不匹配的问题</strong>，所以会以同讲解一下。</p><h2 id="5-1-控制观察者接收事件的速度"><a href="#5-1-控制观察者接收事件的速度" class="headerlink" title="5.1 控制观察者接收事件的速度"></a>5.1 控制观察者接收事件的速度</h2><h3 id="5-1-1-异步订阅情况"><a href="#5-1-1-异步订阅情况" class="headerlink" title="5.1.1 异步订阅情况"></a>5.1.1 异步订阅情况</h3><p>面向对象：观察者<br>原理：响应式拉取，观察者根据自身实际情况按需接收事件。虽然观察者是响应式拉取接收事件，但被观察者还是一次性发送完毕。<br>实现方式：<code>Subscriber.Subscription.request()</code>。</p><img src="/2019/08/20/Android-RxJava：背压策略/944365-3eebc18cf5bfe45b.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 一共发送4个事件</span></span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件 1"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件 2"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件 3"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件 4"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">4</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送完成"</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 观察者能够接收多少个事件</span></span><br><span class="line">                <span class="comment">// 官方默认推荐使用Long.MAX_VALUE，即s.request(Long.MAX_VALUE);</span></span><br><span class="line">                s.request(<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity6: 发送事件 1</span><br><span class="line">D/MainActivity6: 发送事件 2</span><br><span class="line">D/MainActivity6: 发送事件 3</span><br><span class="line">D/MainActivity6: 发送事件 4</span><br><span class="line">D/MainActivity6: 发送完成</span><br><span class="line">D/MainActivity6: 接收到了事件1</span><br><span class="line">D/MainActivity6: 接收到了事件2</span><br><span class="line">D/MainActivity6: 接收到了事件3</span><br></pre></td></tr></table></figure><p>特别注意：</p><ol><li>结论：对于异步订阅情况，若观察者没有设置<code>Subscription.request(long n)</code>，说明观察者不接受事件。此时被观察者仍能继续发送事件（存放在缓存区），等观察者需要时再取出。</li><li>解释：不设置<code>Subscription.request(long n)</code>，观察者虽然不能接收事件，但是由于异步订阅关系中存在缓存区（大小为128），所以被观察者仍然能继续发送事件并暂时存放到缓存区。当缓存区满（128个事件）时，就会溢出报错。只有当观察者有需求时，才调用<code>request()</code>从缓存区按需取出事件。</li><li>额外：缓存区大小默认为128个事件，由<code>Flowable</code>的<code>bufferSize</code>决定。</li></ol><p>代码演示1：观察者不接收事件的情况下，被观察者继续发送事件并存到缓存区，再按需取出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main7Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity7"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该按钮用于调用Subscription.request()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Button btn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于保存Subscription对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Subscription mSubscription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main7);</span><br><span class="line"></span><br><span class="line">        btn = findViewById(R.id.button);</span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                mSubscription.request(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"发送事件 1"</span>);</span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">"发送事件 2"</span>);</span><br><span class="line">                emitter.onNext(<span class="number">2</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">"发送事件 3"</span>);</span><br><span class="line">                emitter.onNext(<span class="number">3</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">"发送事件 4"</span>);</span><br><span class="line">                emitter.onNext(<span class="number">4</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">"发送完成"</span>);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, BackpressureStrategy.ERROR)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                        <span class="comment">// 保存Subscription对象，等待点击按钮时（调用request(2)）观察者再接收事件</span></span><br><span class="line">                        mSubscription = s;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                        Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity7: onSubscribe</span><br><span class="line">D/MainActivity7: 发送事件 1</span><br><span class="line">D/MainActivity7: 发送事件 2</span><br><span class="line">D/MainActivity7: 发送事件 3</span><br><span class="line">D/MainActivity7: 发送事件 4</span><br><span class="line">D/MainActivity7: 发送完成</span><br><span class="line">D/MainActivity7: 接收到了事件1</span><br><span class="line">D/MainActivity7: 接收到了事件2</span><br></pre></td></tr></table></figure><p>代码演示2：观察者不接收事件的情况下，被观察者连续发送事件，直到超出缓存区大小（128）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 一共发送129个事件，即超出了缓存区的大小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">129</span>; i++) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"发送了事件"</span> + i);</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                <span class="comment">// 默认不设置可接收事件大小</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">2019-08-21 15:43:16.479 4703-4703/com.ly.allendemorx W/MainActivity7: onError: </span><br><span class="line">    io.reactivex.exceptions.MissingBackpressureException: create: could not emit value due to lack of requests</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter.onOverflow(FlowableCreate.java:438)</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.onNext(FlowableCreate.java:406)</span><br><span class="line">        at com.ly.allendemorx.Main7Activity$3.subscribe(Main7Activity.java:55)</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate.subscribeActual(FlowableCreate.java:71)</span><br><span class="line">        at io.reactivex.Flowable.subscribe(Flowable.java:14827)</span><br><span class="line">        at io.reactivex.Flowable.subscribe(Flowable.java:14774)</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableSubscribeOn$SubscribeOnSubscriber.run(FlowableSubscribeOn.java:82)</span><br><span class="line">        at io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:66)</span><br><span class="line">        at io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57)</span><br><span class="line">        at java.util.concurrent.FutureTask.run(FutureTask.java:237)</span><br><span class="line">        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:272)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)</span><br><span class="line">        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)</span><br><span class="line">        at java.lang.Thread.run(Thread.java:761)</span><br></pre></td></tr></table></figure><h3 id="5-1-2-同步订阅情况"><a href="#5-1-2-同步订阅情况" class="headerlink" title="5.1.2 同步订阅情况"></a>5.1.2 同步订阅情况</h3><p>与异步订阅的区别：</p><ul><li>同步订阅中，被观察者和观察者工作于同一线程</li><li>同步订阅中，没有缓存区</li></ul><p>被观察者再发送一个事件后，必须等待观察者接收后，才能继续发送下一个事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 发送3个事件</span></span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件1"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件2"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件3"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                s.request(<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity7: onSubscribe</span><br><span class="line">D/MainActivity7: 发送了事件1</span><br><span class="line">D/MainActivity7: 接收到了事件1</span><br><span class="line">D/MainActivity7: 发送了事件2</span><br><span class="line">D/MainActivity7: 接收到了事件2</span><br><span class="line">D/MainActivity7: 发送了事件3</span><br><span class="line">D/MainActivity7: 接收到了事件3</span><br><span class="line">D/MainActivity7: onComplete</span><br></pre></td></tr></table></figure><p>所以，同步订阅不会出现被观察者发送事件速度 ＞ 观察者接收事件速度的情况，而是会出现<strong>被观察者发送事件数量 ＞ 观察者接收事件数量的问题</strong>。</p><p>如：观察者子还能接收三个事件，被观察者发送了四个事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 被观察者发送事件数量 = 4个</span></span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件1"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件2"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件3"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件4"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">4</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                s.request(<span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">2019-08-21 15:52:30.381 5179-5179/com.ly.allendemorx D/MainActivity7: onSubscribe</span><br><span class="line">2019-08-21 15:52:30.388 5179-5179/com.ly.allendemorx D/MainActivity7: 发送了事件1</span><br><span class="line">2019-08-21 15:52:30.388 5179-5179/com.ly.allendemorx D/MainActivity7: 接收到了事件1</span><br><span class="line">2019-08-21 15:52:30.388 5179-5179/com.ly.allendemorx D/MainActivity7: 发送了事件2</span><br><span class="line">2019-08-21 15:52:30.388 5179-5179/com.ly.allendemorx D/MainActivity7: 接收到了事件2</span><br><span class="line">2019-08-21 15:52:30.388 5179-5179/com.ly.allendemorx D/MainActivity7: 发送了事件3</span><br><span class="line">2019-08-21 15:52:30.388 5179-5179/com.ly.allendemorx D/MainActivity7: 接收到了事件3</span><br><span class="line">2019-08-21 15:52:30.388 5179-5179/com.ly.allendemorx D/MainActivity7: 发送了事件4</span><br><span class="line">2019-08-21 15:52:30.391 5179-5179/com.ly.allendemorx W/MainActivity7: onError: </span><br><span class="line">    io.reactivex.exceptions.MissingBackpressureException: create: could not emit value due to lack of requests</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter.onOverflow(FlowableCreate.java:438)</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.onNext(FlowableCreate.java:406)</span><br><span class="line">        at com.ly.allendemorx.Main7Activity$3.subscribe(Main7Activity.java:60)</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate.subscribeActual(FlowableCreate.java:71)</span><br><span class="line">        at io.reactivex.Flowable.subscribe(Flowable.java:14827)</span><br><span class="line">        at io.reactivex.Flowable.subscribe(Flowable.java:14777)</span><br><span class="line">        at com.ly.allendemorx.Main7Activity.onCreate(Main7Activity.java:64)</span><br><span class="line">        at android.app.Activity.performCreate(Activity.java:6692)</span><br><span class="line">        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1118)</span><br><span class="line">        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2621)</span><br><span class="line">        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2729)</span><br><span class="line">        at android.app.ActivityThread.-wrap12(ActivityThread.java)</span><br><span class="line">        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1480)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:102)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:154)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:6169)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:891)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:781)</span><br></pre></td></tr></table></figure><h2 id="5-2-控制被观察者发送事件的速度"><a href="#5-2-控制被观察者发送事件的速度" class="headerlink" title="5.2 控制被观察者发送事件的速度"></a>5.2 控制被观察者发送事件的速度</h2><p>面向对象：被观察者<br>原理：反馈控制，被观察者根据观察者接收事件的能力控制发送事件的速度，观察者预先告知被观察者其事件接收的能力。<br>实现方式：<code>FlowableEmitter.requested()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FlowableEmitter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Emitter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">// FlowableEmitter = 1个接口，继承自Emitter</span></span><br><span class="line"><span class="comment">// Emitter接口方法包括：onNext(),onComplete() &amp; onError</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">requested</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// 作用：返回当前线程中request（a）中的a值</span></span><br><span class="line">    <span class="comment">// 该request（a）则是措施1中讲解的方法，作用  = 设置</span></span><br><span class="line">   </span><br><span class="line">    ....<span class="comment">// 仅贴出关键代码</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个线程中的<code>requested()</code>的返回值为该线程中<code>request(a)</code>的<code>a</code>值。    </p><img src="/2019/08/20/Android-RxJava：背压策略/944365-88e1f3c641eb54e3.png"><h3 id="5-2-1-同步订阅情况"><a href="#5-2-1-同步订阅情况" class="headerlink" title="5.2.1  同步订阅情况"></a>5.2.1  同步订阅情况</h3><p>在同步订阅中，被观察者通过<code>FlowableEmitter.requested()</code>获得观察者自身接收事件能力，<strong>从而根据该信息控制事件发送速度，从而达到观察者反向控制被观察者的效果</strong>。</p><p>例子：被观察者根据观察者自身接收能力（10事件），从而进发送10个事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前观察者接收事件的能力</span></span><br><span class="line">        <span class="keyword">long</span> l = emitter.requested();</span><br><span class="line">        Log.d(TAG, <span class="string">"观察者可接收事件"</span> + l);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据获得的值，控制发送事件的数量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; i++) &#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"发送了事件"</span> + i);</span><br><span class="line">            emitter.onNext(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                <span class="comment">// 设置观察者接收事件的能力</span></span><br><span class="line">                s.request(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity7: onSubscribe</span><br><span class="line">D/MainActivity7: 观察者可接收事件10</span><br><span class="line">D/MainActivity7: 发送了事件0</span><br><span class="line">D/MainActivity7: 接收到了事件0</span><br><span class="line">D/MainActivity7: 发送了事件1</span><br><span class="line">D/MainActivity7: 接收到了事件1</span><br><span class="line">D/MainActivity7: 发送了事件2</span><br><span class="line">D/MainActivity7: 接收到了事件2</span><br><span class="line">D/MainActivity7: 发送了事件3</span><br><span class="line">D/MainActivity7: 接收到了事件3</span><br><span class="line">D/MainActivity7: 发送了事件4</span><br><span class="line">D/MainActivity7: 接收到了事件4</span><br><span class="line">D/MainActivity7: 发送了事件5</span><br><span class="line">D/MainActivity7: 接收到了事件5</span><br><span class="line">D/MainActivity7: 发送了事件6</span><br><span class="line">D/MainActivity7: 接收到了事件6</span><br><span class="line">D/MainActivity7: 发送了事件7</span><br><span class="line">D/MainActivity7: 接收到了事件7</span><br><span class="line">D/MainActivity7: 发送了事件8</span><br><span class="line">D/MainActivity7: 接收到了事件8</span><br><span class="line">D/MainActivity7: 发送了事件9</span><br><span class="line">D/MainActivity7: 接收到了事件9</span><br></pre></td></tr></table></figure><p>特别注意：在同步订阅时，使用<code>FlowableEmitter.requested()</code>时，要注意以下使用特性。</p><ol><li>可叠加性：观察者可连续要求接收事件，被观察者会进行叠加，一起发送。</li><li>实时更新性：每次发送事件后，<code>FlowableEmitter.requested()</code>的返回值会实时更新观察者能接收的事件。</li><li>异常：</li></ol><ul><li>当<code>FlowableEmitter.requested()</code>返回0时，代表观察者已经不能接收事件，此时被观察者若继续发送事件，会抛出<code>MissingBackpressureException</code></li><li>若观察者中没有设置可接收事件数量，即，没有调用<code>Subscription.request()</code>，那么被观察者默认观察者可接收事件为0，因为同步订阅中没有缓存区。</li></ul><h4 id="可叠加性"><a href="#可叠加性" class="headerlink" title="可叠加性"></a>可叠加性</h4><p>观察者可连续要求接收事件，被观察者会进行叠加，一起发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Subscription.request（a1）；</span><br><span class="line">Subscription.request（a2）；</span><br><span class="line"></span><br><span class="line">FlowableEmitter.requested()的返回值 = a1 + a2</span><br></pre></td></tr></table></figure><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 调用emitter.requested()获取当前观察者需要接收的事件数量</span></span><br><span class="line">        Log.d(TAG, <span class="string">"观察者可接收事件"</span> + emitter.requested());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                <span class="comment">// 第1次设置观察者每次能接受10个事件</span></span><br><span class="line">                s.request(<span class="number">10</span>);</span><br><span class="line">                <span class="comment">// 第2次设置观察者每次能接受20个事件</span></span><br><span class="line">                s.request(<span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity7: onSubscribe</span><br><span class="line">D/MainActivity7: 观察者可接收事件30</span><br></pre></td></tr></table></figure><h4 id="实时更新性"><a href="#实时更新性" class="headerlink" title="实时更新性"></a>实时更新性</h4><p>每次发送事件后，<code>FlowableEmitter.requested()</code>的返回值会实时更新观察者能接收的事件。</p><blockquote><ol><li>即一开始观察者可接收事件的数量为10，发送一个后，会实时更新为9。</li><li>仅计算<code>Next</code>事件，<code>Complete</code>和<code>Error</code>事件不算。</li></ol></blockquote><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 调用emitter.requested()获取当前观察者需要接收的事件数量</span></span><br><span class="line">        Log.d(TAG, <span class="string">"观察者可接收事件数量 = "</span> + emitter.requested());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 每次发送事件后，emitter.requested()会实时更新观察者能接受的事件</span></span><br><span class="line">        <span class="comment">// 即一开始观察者要接收10个事件，发送了1个后，会实时更新为9个</span></span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 1"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件1后, 还需要发送事件数量 = "</span> + emitter.requested());</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 2"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件2后, 还需要发送事件数量 = "</span> + emitter.requested());</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 3"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件3后, 还需要发送事件数量 = "</span> + emitter.requested());</span><br><span class="line"></span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                s.request(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity7: onSubscribe</span><br><span class="line">D/MainActivity7: 观察者可接收事件数量 = 10</span><br><span class="line">D/MainActivity7: 发送了事件 1</span><br><span class="line">D/MainActivity7: 接收到了事件1</span><br><span class="line">D/MainActivity7: 发送了事件1后, 还需要发送事件数量 = 9</span><br><span class="line">D/MainActivity7: 发送了事件 2</span><br><span class="line">D/MainActivity7: 接收到了事件2</span><br><span class="line">D/MainActivity7: 发送事件2后, 还需要发送事件数量 = 8</span><br><span class="line">D/MainActivity7: 发送了事件 3</span><br><span class="line">D/MainActivity7: 接收到了事件3</span><br><span class="line">D/MainActivity7: 发送事件3后, 还需要发送事件数量 = 7</span><br><span class="line">D/MainActivity7: onComplete</span><br></pre></td></tr></table></figure><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><p>当<code>FlowableEmitter.requested()</code>减到0时，则代表观察者已经不可接收事件，此时被观察者若继续发送事件，则会抛出<code>MissingBackpressureException</code>。<br>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 调用emitter.requested()获取当前观察者需要接收的事件数量</span></span><br><span class="line">        Log.d(TAG, <span class="string">"观察者可接收事件数量 = "</span> + emitter.requested());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 每次发送事件后，emitter.requested()会实时更新观察者能接受的事件</span></span><br><span class="line">        <span class="comment">// 即一开始观察者要接收10个事件，发送了1个后，会实时更新为9个</span></span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 1"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件1后, 还需要发送事件数量 = "</span> + emitter.requested());</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 2"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Log.d(TAG, <span class="string">"发送事件2后, 还需要发送事件数量 = "</span> + emitter.requested());</span><br><span class="line"></span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                s.request(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">2019-08-21 17:23:57.540 6023-6023/com.ly.allendemorx D/MainActivity7: onSubscribe</span><br><span class="line">2019-08-21 17:23:57.547 6023-6023/com.ly.allendemorx D/MainActivity7: 观察者可接收事件数量 = 1</span><br><span class="line">2019-08-21 17:23:57.547 6023-6023/com.ly.allendemorx D/MainActivity7: 发送了事件 1</span><br><span class="line">2019-08-21 17:23:57.547 6023-6023/com.ly.allendemorx D/MainActivity7: 接收到了事件1</span><br><span class="line">2019-08-21 17:23:57.547 6023-6023/com.ly.allendemorx D/MainActivity7: 发送了事件1后, 还需要发送事件数量 = 0</span><br><span class="line">2019-08-21 17:23:57.547 6023-6023/com.ly.allendemorx D/MainActivity7: 发送了事件 2</span><br><span class="line">2019-08-21 17:23:57.551 6023-6023/com.ly.allendemorx W/MainActivity7: onError: </span><br><span class="line">    io.reactivex.exceptions.MissingBackpressureException: create: could not emit value due to lack of requests</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate$ErrorAsyncEmitter.onOverflow(FlowableCreate.java:438)</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate$NoOverflowBaseAsyncEmitter.onNext(FlowableCreate.java:406)</span><br><span class="line">        at com.ly.allendemorx.Main7Activity$3.subscribe(Main7Activity.java:62)</span><br><span class="line">        at io.reactivex.internal.operators.flowable.FlowableCreate.subscribeActual(FlowableCreate.java:71)</span><br><span class="line">        at io.reactivex.Flowable.subscribe(Flowable.java:14827)</span><br><span class="line">        at io.reactivex.Flowable.subscribe(Flowable.java:14777)</span><br><span class="line">        at com.ly.allendemorx.Main7Activity.onCreate(Main7Activity.java:68)</span><br><span class="line">        at android.app.Activity.performCreate(Activity.java:6692)</span><br><span class="line">        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1118)</span><br><span class="line">        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2621)</span><br><span class="line">        at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2729)</span><br><span class="line">        at android.app.ActivityThread.-wrap12(ActivityThread.java)</span><br><span class="line">        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1480)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:102)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:154)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:6169)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:891)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:781)</span><br><span class="line">2019-08-21 17:23:57.551 6023-6023/com.ly.allendemorx D/MainActivity7: 发送事件2后, 还需要发送事件数量 = 0</span><br></pre></td></tr></table></figure><h3 id="5-2-2-异步订阅情况"><a href="#5-2-2-异步订阅情况" class="headerlink" title="5.2.2 异步订阅情况"></a>5.2.2 异步订阅情况</h3><p>由于二者不在同一线程，所以被观察者无法通过<code>FlowableEmitter.requested()</code>获取观察者接收事件的能力。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"观察者可接收事件数量 = "</span> + emitter.requested());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, BackpressureStrategy.ERROR)</span><br><span class="line">        .subscribeOn(Schedulers.io())</span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                <span class="comment">// 该设置仅影响观察者线程中的requested，却不会影响的被观察者中的FlowableEmitter.requested()的返回值</span></span><br><span class="line">                <span class="comment">// 因为FlowableEmitter.requested()的返回值 取决于RxJava内部调用request(n)，而该内部调用会在一开始就调用request(128)</span></span><br><span class="line">                s.request(<span class="number">150</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity7: onSubscribe</span><br><span class="line">D/MainActivity7: 观察者可接收事件数量 = 128</span><br></pre></td></tr></table></figure><p><strong>在异步订阅中，反向控制的原理是：通过<code>RxJava</code>内部固定调用被观察者线程中的<code>request(n)</code>，从而方向控制被观察者的发送事件速度。</strong></p><p>那么该在什么时候调用被观察者线程中的<code>request(n)</code>，<code>n</code>的值该是多少呢？</p><p>关于<code>RxJava</code>内部调用<code>request(n)（n = 128、96、0）</code>的逻辑如下：</p><img src="/2019/08/20/Android-RxJava：背压策略/944365-f6314aba60c08455.png"><blockquote><p>至于为什么调用<code>request(128)</code>、<code>request(96)</code>、<code>request(0)</code>，可以查看<code>Flowable</code>的源码</p></blockquote><p>代码演示：被观察者一共需要发送500个事件，但真正开始发送事件的前提为<code>FlowableEmtter.requested()</code>的返回值不为0；观察者每次接收48个事件（点击按钮接收事件）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main7Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity7"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该按钮用于调用Subscription.request()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Button btn;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于保存Subscription对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Subscription mSubscription;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main7);</span><br><span class="line"></span><br><span class="line">        btn = findViewById(R.id.button);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击按钮接收事件，每次接收48个事件</span></span><br><span class="line">        btn.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                mSubscription.request(<span class="number">48</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"观察者可接收事件数量 = "</span> + emitter.requested());</span><br><span class="line">                <span class="comment">//设置标记位控制</span></span><br><span class="line">                <span class="keyword">boolean</span> flag;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 被观察者一共需要发送500个事件</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 若requested() == 0，则不发送</span></span><br><span class="line">                    <span class="keyword">while</span> (emitter.requested() == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"不再发送"</span>);</span><br><span class="line">                            flag = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// requested() ≠ 0 才发送</span></span><br><span class="line">                    Log.d(TAG, <span class="string">"发送了事件"</span> + i + <span class="string">"，观察者可接收事件数量 = "</span> + emitter.requested());</span><br><span class="line">                    emitter.onNext(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, BackpressureStrategy.ERROR)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                        <span class="comment">// 初始状态 = 不接收事件；通过点击按钮接收事件</span></span><br><span class="line">                        mSubscription = s;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                        Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity7: onSubscribe</span><br><span class="line">D/MainActivity7: 观察者可接收事件数量 = 128</span><br><span class="line">D/MainActivity7: 发送了事件0，观察者可接收事件数量 = 128</span><br><span class="line">D/MainActivity7: 发送了事件1，观察者可接收事件数量 = 127</span><br><span class="line">D/MainActivity7: 发送了事件2，观察者可接收事件数量 = 126</span><br><span class="line">D/MainActivity7: 发送了事件3，观察者可接收事件数量 = 125</span><br><span class="line">D/MainActivity7: 发送了事件4，观察者可接收事件数量 = 124</span><br><span class="line">D/MainActivity7: 发送了事件5，观察者可接收事件数量 = 123</span><br><span class="line">D/MainActivity7: 发送了事件6，观察者可接收事件数量 = 122</span><br><span class="line">D/MainActivity7: 发送了事件7，观察者可接收事件数量 = 121</span><br><span class="line">D/MainActivity7: 发送了事件8，观察者可接收事件数量 = 120</span><br><span class="line">D/MainActivity7: 发送了事件9，观察者可接收事件数量 = 119</span><br><span class="line">D/MainActivity7: 发送了事件10，观察者可接收事件数量 = 118</span><br><span class="line">D/MainActivity7: 发送了事件11，观察者可接收事件数量 = 117</span><br><span class="line">D/MainActivity7: 发送了事件12，观察者可接收事件数量 = 116</span><br><span class="line">D/MainActivity7: 发送了事件13，观察者可接收事件数量 = 115</span><br><span class="line">D/MainActivity7: 发送了事件14，观察者可接收事件数量 = 114</span><br><span class="line">D/MainActivity7: 发送了事件15，观察者可接收事件数量 = 113</span><br><span class="line">D/MainActivity7: 发送了事件16，观察者可接收事件数量 = 112</span><br><span class="line">D/MainActivity7: 发送了事件17，观察者可接收事件数量 = 111</span><br><span class="line">D/MainActivity7: 发送了事件18，观察者可接收事件数量 = 110</span><br><span class="line">D/MainActivity7: 发送了事件19，观察者可接收事件数量 = 109</span><br><span class="line">D/MainActivity7: 发送了事件20，观察者可接收事件数量 = 108</span><br><span class="line">D/MainActivity7: 发送了事件21，观察者可接收事件数量 = 107</span><br><span class="line">D/MainActivity7: 发送了事件22，观察者可接收事件数量 = 106</span><br><span class="line">D/MainActivity7: 发送了事件23，观察者可接收事件数量 = 105</span><br><span class="line">D/MainActivity7: 发送了事件24，观察者可接收事件数量 = 104</span><br><span class="line">D/MainActivity7: 发送了事件25，观察者可接收事件数量 = 103</span><br><span class="line">D/MainActivity7: 发送了事件26，观察者可接收事件数量 = 102</span><br><span class="line">D/MainActivity7: 发送了事件27，观察者可接收事件数量 = 101</span><br><span class="line">D/MainActivity7: 发送了事件28，观察者可接收事件数量 = 100</span><br><span class="line">D/MainActivity7: 发送了事件29，观察者可接收事件数量 = 99</span><br><span class="line">D/MainActivity7: 发送了事件30，观察者可接收事件数量 = 98</span><br><span class="line">D/MainActivity7: 发送了事件31，观察者可接收事件数量 = 97</span><br><span class="line">D/MainActivity7: 发送了事件32，观察者可接收事件数量 = 96</span><br><span class="line">D/MainActivity7: 发送了事件33，观察者可接收事件数量 = 95</span><br><span class="line">D/MainActivity7: 发送了事件34，观察者可接收事件数量 = 94</span><br><span class="line">D/MainActivity7: 发送了事件35，观察者可接收事件数量 = 93</span><br><span class="line">D/MainActivity7: 发送了事件36，观察者可接收事件数量 = 92</span><br><span class="line">D/MainActivity7: 发送了事件37，观察者可接收事件数量 = 91</span><br><span class="line">D/MainActivity7: 发送了事件38，观察者可接收事件数量 = 90</span><br><span class="line">D/MainActivity7: 发送了事件39，观察者可接收事件数量 = 89</span><br><span class="line">D/MainActivity7: 发送了事件40，观察者可接收事件数量 = 88</span><br><span class="line">D/MainActivity7: 发送了事件41，观察者可接收事件数量 = 87</span><br><span class="line">D/MainActivity7: 发送了事件42，观察者可接收事件数量 = 86</span><br><span class="line">D/MainActivity7: 发送了事件43，观察者可接收事件数量 = 85</span><br><span class="line">D/MainActivity7: 发送了事件44，观察者可接收事件数量 = 84</span><br><span class="line">D/MainActivity7: 发送了事件45，观察者可接收事件数量 = 83</span><br><span class="line">D/MainActivity7: 发送了事件46，观察者可接收事件数量 = 82</span><br><span class="line">D/MainActivity7: 发送了事件47，观察者可接收事件数量 = 81</span><br><span class="line">D/MainActivity7: 发送了事件48，观察者可接收事件数量 = 80</span><br><span class="line">D/MainActivity7: 发送了事件49，观察者可接收事件数量 = 79</span><br><span class="line">D/MainActivity7: 发送了事件50，观察者可接收事件数量 = 78</span><br><span class="line">D/MainActivity7: 发送了事件51，观察者可接收事件数量 = 77</span><br><span class="line">D/MainActivity7: 发送了事件52，观察者可接收事件数量 = 76</span><br><span class="line">D/MainActivity7: 发送了事件53，观察者可接收事件数量 = 75</span><br><span class="line">D/MainActivity7: 发送了事件54，观察者可接收事件数量 = 74</span><br><span class="line">D/MainActivity7: 发送了事件55，观察者可接收事件数量 = 73</span><br><span class="line">D/MainActivity7: 发送了事件56，观察者可接收事件数量 = 72</span><br><span class="line">D/MainActivity7: 发送了事件57，观察者可接收事件数量 = 71</span><br><span class="line">D/MainActivity7: 发送了事件58，观察者可接收事件数量 = 70</span><br><span class="line">D/MainActivity7: 发送了事件59，观察者可接收事件数量 = 69</span><br><span class="line">D/MainActivity7: 发送了事件60，观察者可接收事件数量 = 68</span><br><span class="line">D/MainActivity7: 发送了事件61，观察者可接收事件数量 = 67</span><br><span class="line">D/MainActivity7: 发送了事件62，观察者可接收事件数量 = 66</span><br><span class="line">D/MainActivity7: 发送了事件63，观察者可接收事件数量 = 65</span><br><span class="line">D/MainActivity7: 发送了事件64，观察者可接收事件数量 = 64</span><br><span class="line">D/MainActivity7: 发送了事件65，观察者可接收事件数量 = 63</span><br><span class="line">D/MainActivity7: 发送了事件66，观察者可接收事件数量 = 62</span><br><span class="line">D/MainActivity7: 发送了事件67，观察者可接收事件数量 = 61</span><br><span class="line">D/MainActivity7: 发送了事件68，观察者可接收事件数量 = 60</span><br><span class="line">D/MainActivity7: 发送了事件69，观察者可接收事件数量 = 59</span><br><span class="line">D/MainActivity7: 发送了事件70，观察者可接收事件数量 = 58</span><br><span class="line">D/MainActivity7: 发送了事件71，观察者可接收事件数量 = 57</span><br><span class="line">D/MainActivity7: 发送了事件72，观察者可接收事件数量 = 56</span><br><span class="line">D/MainActivity7: 发送了事件73，观察者可接收事件数量 = 55</span><br><span class="line">D/MainActivity7: 发送了事件74，观察者可接收事件数量 = 54</span><br><span class="line">D/MainActivity7: 发送了事件75，观察者可接收事件数量 = 53</span><br><span class="line">D/MainActivity7: 发送了事件76，观察者可接收事件数量 = 52</span><br><span class="line">D/MainActivity7: 发送了事件77，观察者可接收事件数量 = 51</span><br><span class="line">D/MainActivity7: 发送了事件78，观察者可接收事件数量 = 50</span><br><span class="line">D/MainActivity7: 发送了事件79，观察者可接收事件数量 = 49</span><br><span class="line">D/MainActivity7: 发送了事件80，观察者可接收事件数量 = 48</span><br><span class="line">D/MainActivity7: 发送了事件81，观察者可接收事件数量 = 47</span><br><span class="line">D/MainActivity7: 发送了事件82，观察者可接收事件数量 = 46</span><br><span class="line">D/MainActivity7: 发送了事件83，观察者可接收事件数量 = 45</span><br><span class="line">D/MainActivity7: 发送了事件84，观察者可接收事件数量 = 44</span><br><span class="line">D/MainActivity7: 发送了事件85，观察者可接收事件数量 = 43</span><br><span class="line">D/MainActivity7: 发送了事件86，观察者可接收事件数量 = 42</span><br><span class="line">D/MainActivity7: 发送了事件87，观察者可接收事件数量 = 41</span><br><span class="line">D/MainActivity7: 发送了事件88，观察者可接收事件数量 = 40</span><br><span class="line">D/MainActivity7: 发送了事件89，观察者可接收事件数量 = 39</span><br><span class="line">D/MainActivity7: 发送了事件90，观察者可接收事件数量 = 38</span><br><span class="line">D/MainActivity7: 发送了事件91，观察者可接收事件数量 = 37</span><br><span class="line">D/MainActivity7: 发送了事件92，观察者可接收事件数量 = 36</span><br><span class="line">D/MainActivity7: 发送了事件93，观察者可接收事件数量 = 35</span><br><span class="line">D/MainActivity7: 发送了事件94，观察者可接收事件数量 = 34</span><br><span class="line">D/MainActivity7: 发送了事件95，观察者可接收事件数量 = 33</span><br><span class="line">D/MainActivity7: 发送了事件96，观察者可接收事件数量 = 32</span><br><span class="line">D/MainActivity7: 发送了事件97，观察者可接收事件数量 = 31</span><br><span class="line">D/MainActivity7: 发送了事件98，观察者可接收事件数量 = 30</span><br><span class="line">D/MainActivity7: 发送了事件99，观察者可接收事件数量 = 29</span><br><span class="line">D/MainActivity7: 发送了事件100，观察者可接收事件数量 = 28</span><br><span class="line">D/MainActivity7: 发送了事件101，观察者可接收事件数量 = 27</span><br><span class="line">D/MainActivity7: 发送了事件102，观察者可接收事件数量 = 26</span><br><span class="line">D/MainActivity7: 发送了事件103，观察者可接收事件数量 = 25</span><br><span class="line">D/MainActivity7: 发送了事件104，观察者可接收事件数量 = 24</span><br><span class="line">D/MainActivity7: 发送了事件105，观察者可接收事件数量 = 23</span><br><span class="line">D/MainActivity7: 发送了事件106，观察者可接收事件数量 = 22</span><br><span class="line">D/MainActivity7: 发送了事件107，观察者可接收事件数量 = 21</span><br><span class="line">D/MainActivity7: 发送了事件108，观察者可接收事件数量 = 20</span><br><span class="line">D/MainActivity7: 发送了事件109，观察者可接收事件数量 = 19</span><br><span class="line">D/MainActivity7: 发送了事件110，观察者可接收事件数量 = 18</span><br><span class="line">D/MainActivity7: 发送了事件111，观察者可接收事件数量 = 17</span><br><span class="line">D/MainActivity7: 发送了事件112，观察者可接收事件数量 = 16</span><br><span class="line">D/MainActivity7: 发送了事件113，观察者可接收事件数量 = 15</span><br><span class="line">D/MainActivity7: 发送了事件114，观察者可接收事件数量 = 14</span><br><span class="line">D/MainActivity7: 发送了事件115，观察者可接收事件数量 = 13</span><br><span class="line">D/MainActivity7: 发送了事件116，观察者可接收事件数量 = 12</span><br><span class="line">D/MainActivity7: 发送了事件117，观察者可接收事件数量 = 11</span><br><span class="line">D/MainActivity7: 发送了事件118，观察者可接收事件数量 = 10</span><br><span class="line">D/MainActivity7: 发送了事件119，观察者可接收事件数量 = 9</span><br><span class="line">D/MainActivity7: 发送了事件120，观察者可接收事件数量 = 8</span><br><span class="line">D/MainActivity7: 发送了事件121，观察者可接收事件数量 = 7</span><br><span class="line">D/MainActivity7: 发送了事件122，观察者可接收事件数量 = 6</span><br><span class="line">D/MainActivity7: 发送了事件123，观察者可接收事件数量 = 5</span><br><span class="line">D/MainActivity7: 发送了事件124，观察者可接收事件数量 = 4</span><br><span class="line">D/MainActivity7: 发送了事件125，观察者可接收事件数量 = 3</span><br><span class="line">D/MainActivity7: 发送了事件126，观察者可接收事件数量 = 2</span><br><span class="line">D/MainActivity7: 发送了事件127，观察者可接收事件数量 = 1</span><br><span class="line">D/MainActivity7: 不再发送</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D/MainActivity7: 接收到了事件0</span><br><span class="line">D/MainActivity7: 接收到了事件1</span><br><span class="line">D/MainActivity7: 接收到了事件2</span><br><span class="line">D/MainActivity7: 接收到了事件3</span><br><span class="line">D/MainActivity7: 接收到了事件4</span><br><span class="line">D/MainActivity7: 接收到了事件5</span><br><span class="line">D/MainActivity7: 接收到了事件6</span><br><span class="line">D/MainActivity7: 接收到了事件7</span><br><span class="line">D/MainActivity7: 接收到了事件8</span><br><span class="line">D/MainActivity7: 接收到了事件9</span><br><span class="line">D/MainActivity7: 接收到了事件10</span><br><span class="line">D/MainActivity7: 接收到了事件11</span><br><span class="line">D/MainActivity7: 接收到了事件12</span><br><span class="line">D/MainActivity7: 接收到了事件13</span><br><span class="line">D/MainActivity7: 接收到了事件14</span><br><span class="line">D/MainActivity7: 接收到了事件15</span><br><span class="line">D/MainActivity7: 接收到了事件16</span><br><span class="line">D/MainActivity7: 接收到了事件17</span><br><span class="line">D/MainActivity7: 接收到了事件18</span><br><span class="line">D/MainActivity7: 接收到了事件19</span><br><span class="line">D/MainActivity7: 接收到了事件20</span><br><span class="line">D/MainActivity7: 接收到了事件21</span><br><span class="line">D/MainActivity7: 接收到了事件22</span><br><span class="line">D/MainActivity7: 接收到了事件23</span><br><span class="line">D/MainActivity7: 接收到了事件24</span><br><span class="line">D/MainActivity7: 接收到了事件25</span><br><span class="line">D/MainActivity7: 接收到了事件26</span><br><span class="line">D/MainActivity7: 接收到了事件27</span><br><span class="line">D/MainActivity7: 接收到了事件28</span><br><span class="line">D/MainActivity7: 接收到了事件29</span><br><span class="line">D/MainActivity7: 接收到了事件30</span><br><span class="line">D/MainActivity7: 接收到了事件31</span><br><span class="line">D/MainActivity7: 接收到了事件32</span><br><span class="line">D/MainActivity7: 接收到了事件33</span><br><span class="line">D/MainActivity7: 接收到了事件34</span><br><span class="line">D/MainActivity7: 接收到了事件35</span><br><span class="line">D/MainActivity7: 接收到了事件36</span><br><span class="line">D/MainActivity7: 接收到了事件37</span><br><span class="line">D/MainActivity7: 接收到了事件38</span><br><span class="line">D/MainActivity7: 接收到了事件39</span><br><span class="line">D/MainActivity7: 接收到了事件40</span><br><span class="line">D/MainActivity7: 接收到了事件41</span><br><span class="line">D/MainActivity7: 接收到了事件42</span><br><span class="line">D/MainActivity7: 接收到了事件43</span><br><span class="line">D/MainActivity7: 接收到了事件44</span><br><span class="line">D/MainActivity7: 接收到了事件45</span><br><span class="line">D/MainActivity7: 接收到了事件46</span><br><span class="line">D/MainActivity7: 接收到了事件47</span><br></pre></td></tr></table></figure><img src="/2019/08/20/Android-RxJava：背压策略/944365-c3c362cd8e101867.png"><h2 id="5-3-采用背压策略模式：BackpressureStrategy"><a href="#5-3-采用背压策略模式：BackpressureStrategy" class="headerlink" title="5.3 采用背压策略模式：BackpressureStrategy"></a>5.3 采用背压策略模式：BackpressureStrategy</h2><h3 id="5-3-1-背压模式介绍"><a href="#5-3-1-背压模式介绍" class="headerlink" title="5.3.1 背压模式介绍"></a>5.3.1 背压模式介绍</h3><p>在<code>Flowable</code>中要求传入背压模式参数。</p><p>面向对象：针对缓存区。<br>作用：当缓存区存满、被观察者仍然继续发送下一个事件时，如何处理的策略方式。</p><h3 id="5-3-2-背压模式类型："><a href="#5-3-2-背压模式类型：" class="headerlink" title="5.3.2 背压模式类型："></a>5.3.2 背压模式类型：</h3><ol><li>需要解决的问题：流速不匹配，发送事件速度 ＞ 接收事件速度，具体表现为当缓存区存满时，被观察者仍然继续发送下一个事件。</li><li>类型：</li></ol><ul><li><code>BackpressureStrategy.ERROR</code>：直接抛出异常<code>MissingBackpressureException</code></li><li><code>BackpressureStrategy.MISSING</code>：友好提示，缓存区满了</li><li><code>BackpressureStrategy.BUFFER</code>：将缓存区大小设置成无限大，即，被观察者可以无限发送事件到缓存区</li><li><code>BackpressureStrategy.DROP</code>：超过缓存区大小（128）的事件丢弃</li><li><code>BackpressureStrategy.LATEST</code>：只保存最新（最后）事件，超过缓存区大小（128）的事件丢弃</li></ul><h3 id="5-3-3-特别注意"><a href="#5-3-3-特别注意" class="headerlink" title="5.3.3 特别注意"></a>5.3.3 特别注意</h3><p>使用背压策略模式时，有一点要注意：</p><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p><code>Flowable</code>可以通过自己创建，或者通过其他方式自动创建，如<code>interval</code>操作符。</p><blockquote><p><code>interval</code>操作符简介</p><ol><li>作用：每间隔一段时间产生一个数字（<code>Long</code>类型），从0开始、一次递增1，直至无穷大</li><li>默认运行在一个新的线程上</li><li>与<code>timer()</code>操作符区别：<code>timer()</code>操作符可结束发送</li></ol></blockquote><h4 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a>冲突</h4><p>对于手动创建<code>Flowable</code>的情况，可以通过传入背压模式参数选择背压策略，但是对于自动创建<code>Flowable</code>，就无法手动传入背压模式参数，这时，出现流速不匹配的情况，该如何处理？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过interval自动创建被观察者Flowable</span></span><br><span class="line"><span class="comment">// 每隔1ms将当前数字（从0开始）加1，并发送出去</span></span><br><span class="line"><span class="comment">// interval操作符会默认开启一个新的工作线程</span></span><br><span class="line">Flowable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        <span class="comment">// 观察者同样工作在一个新的线程</span></span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                mSubscription = s;</span><br><span class="line">                <span class="comment">// 默认可以接收Long.MAX_VALUE个事件</span></span><br><span class="line">                s.request(Long.MAX_VALUE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onNext: "</span> + aLong);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 每延迟一秒再接收事件</span></span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    <span class="comment">// 因为发送事件为延时1ms，接收事件为延时1s，出现了发送速度与接收速度不匹配的问题</span></span><br><span class="line">                    <span class="comment">// 缓存区很快就存满了128个事件，从而抛出MissingBackpressureException</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p><code>RxJava 2.0</code>内部提供了封装背压策略模式的方法：</p><ul><li><code>onBackpressureBuffer()</code></li><li><code>onBackpressureDrop()</code></li><li><code>onBackpressureLatest()</code></li></ul><blockquote><p>默认采用了<code>BackpressureStrategy.ERROR</code>模式。</p></blockquote><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Flowable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        <span class="comment">// 添加背压策略模式</span></span><br><span class="line">        .onBackpressureBuffer()</span><br><span class="line">        <span class="comment">// 观察者同样工作在一个新的线程</span></span><br><span class="line">        .observeOn(Schedulers.newThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">                mSubscription = s;</span><br><span class="line">                <span class="comment">// 默认可以接收Long.MAX_VALUE个事件</span></span><br><span class="line">                s.request(Long.MAX_VALUE);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onNext: "</span> + aLong);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 每延迟一秒再接收事件</span></span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onError: "</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1. 引言&quot;&gt;&lt;/a&gt;1. 引言&lt;/h1&gt;&lt;h2 id=&quot;1-1-背景&quot;&gt;&lt;a href=&quot;#1-1-背景&quot; class=&quot;headerlink&quot; title=&quot;1.1
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：条件/布尔操作符</title>
    <link href="https://tylerLiu.top/2019/08/20/Android-RxJava%EF%BC%9A%E6%9D%A1%E4%BB%B6-%E5%B8%83%E5%B0%94%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://tylerLiu.top/2019/08/20/Android-RxJava：条件-布尔操作符/</id>
    <published>2019-08-20T00:36:27.000Z</published>
    <updated>2019-08-22T03:14:24.539Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h1><p>通过设置函数，判断<code>Obsevable</code>发送的事件是否符合条件。</p><h1 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h1><img src="/2019/08/20/Android-RxJava：条件-布尔操作符/944365-f97310ceaf53f94f.png"><h1 id="3-详解"><a href="#3-详解" class="headerlink" title="3. 详解"></a>3. 详解</h1><h2 id="3-1-all"><a href="#3-1-all" class="headerlink" title="3.1 all()"></a>3.1 all()</h2><p>作用：判断发送的每项数据是否都满足设置的函数条件。若满足，返回<code>true</code>；否则，返回<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">        .all(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 判断发送的所有数据是否都≤10</span></span><br><span class="line">                <span class="keyword">return</span> integer &lt;= <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean aBoolean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"result is "</span> + aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: result is true</span><br></pre></td></tr></table></figure><h2 id="3-2-takeWhile"><a href="#3-2-takeWhile" class="headerlink" title="3.2 takeWhile()"></a>3.2 takeWhile()</h2><p>作用：判断发送的每项数据是否满足设置函数的条件。若发送的数据满足条件，则发送该项数据，否则不发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        .takeWhile(<span class="keyword">new</span> Predicate&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> aLong &lt;= <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 "</span> + aLong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 发送了事件 0</span><br><span class="line">D/MainActivity5: 发送了事件 1</span><br><span class="line">D/MainActivity5: 发送了事件 2</span><br><span class="line">D/MainActivity5: 发送了事件 3</span><br><span class="line">D/MainActivity5: 发送了事件 4</span><br><span class="line">D/MainActivity5: 发送了事件 5</span><br></pre></td></tr></table></figure><h2 id="3-3-skipWhile"><a href="#3-3-skipWhile" class="headerlink" title="3.3 skipWhile()"></a>3.3 skipWhile()</h2><p>作用：判断发送的每项数据是否满足设置的函数条件。直到该判断条件为<code>false</code>时，才开始发送<code>Observable</code>的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        .skipWhile(<span class="keyword">new</span> Predicate&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 直到发射的数据≥5时，才开始发送</span></span><br><span class="line">                <span class="keyword">return</span> aLong &lt; <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Excaeption </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 "</span> + aLong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 发送了事件 5</span><br><span class="line">D/MainActivity5: 发送了事件 6</span><br><span class="line">D/MainActivity5: 发送了事件 7</span><br><span class="line">D/MainActivity5: 发送了事件 8</span><br><span class="line">D/MainActivity5: 发送了事件 9</span><br><span class="line">D/MainActivity5: 发送了事件 10</span><br><span class="line">D/MainActivity5: 发送了事件 11</span><br></pre></td></tr></table></figure><h2 id="3-4-takeUtil"><a href="#3-4-takeUtil" class="headerlink" title="3.4 takeUtil()"></a>3.4 takeUtil()</h2><p>作用：执行到某个条件时，停止发送事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        .takeUntil(<span class="keyword">new</span> Predicate&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 直到发射的数据＞3时，停止发送事件</span></span><br><span class="line">                <span class="keyword">return</span> aLong &gt; <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"发送了事件 "</span> + aLong);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 发送了事件 0</span><br><span class="line">D/MainActivity5: 发送了事件 1</span><br><span class="line">D/MainActivity5: 发送了事件 2</span><br><span class="line">D/MainActivity5: 发送了事件 3</span><br><span class="line">D/MainActivity5: 发送了事件 4</span><br></pre></td></tr></table></figure><p>该判断条件也可以是<code>Observable</code>，<strong>即等到<code>takeUtil()</code>传入的<code>Observable</code>开始发送函数，（原始）第一个<code>Observable</code>的数据停止发送数据。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始第一个Observable，每个1s发送一个数据</span></span><br><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 第二个Observable，延迟5s后开始发送第一个数据</span></span><br><span class="line">        .takeUntil(Observable.timer(<span class="number">5</span>, TimeUnit.SECONDS))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + aLong);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>当第5s时，第二个<code>Observable</code>开始发送数据，于是（原始）第一个<code>Observable</code>停止发送数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 开始采用subscribe连接</span><br><span class="line">D/MainActivity5: 接收到了事件0</span><br><span class="line">D/MainActivity5: 接收到了事件1</span><br><span class="line">D/MainActivity5: 接收到了事件2</span><br><span class="line">D/MainActivity5: 接收到了事件3</span><br><span class="line">D/MainActivity5: 对Complete事件作出响应</span><br></pre></td></tr></table></figure><h2 id="3-5-skipUtil"><a href="#3-5-skipUtil" class="headerlink" title="3.5 skipUtil()"></a>3.5 skipUtil()</h2><p>作用：等到<code>skipUtil()</code>传入的<code>Observable</code>开始发送数据，（原始）第一个<code>Observable</code>才开始发送数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// （原始）第1个Observable</span></span><br><span class="line">Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 第2个Observable，延迟5s后开始发送型数据</span></span><br><span class="line">        .skipUntil(Observable.timer(<span class="number">5</span>, TimeUnit.SECONDS))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + aLong);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 接收到了事件4</span><br><span class="line">D/MainActivity5: 接收到了事件5</span><br><span class="line">D/MainActivity5: 接收到了事件6</span><br><span class="line">D/MainActivity5: 接收到了事件7</span><br><span class="line">D/MainActivity5: 接收到了事件8</span><br><span class="line">D/MainActivity5: 接收到了事件9</span><br><span class="line">D/MainActivity5: 接收到了事件10</span><br></pre></td></tr></table></figure><h2 id="3-6-sequenceEqual"><a href="#3-6-sequenceEqual" class="headerlink" title="3.6 sequenceEqual()"></a>3.6 sequenceEqual()</h2><p>作用：判断两个<code>Observable</code>需要发送的数据是否相同。若相同，返回<code>true</code>，反之，返回<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable.sequenceEqual(</span><br><span class="line">        Observable.just(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>),</span><br><span class="line">        Observable.just(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">).subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean aBoolean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"2个Observable是否相同："</span> + aBoolean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 2个Observable是否相同：true</span><br></pre></td></tr></table></figure><h2 id="3-7-contains"><a href="#3-7-contains" class="headerlink" title="3.7 contains()"></a>3.7 contains()</h2><p>作用：判断发送的数据中是否包含指定数据。若包含，返回<code>true</code>，反之，返回<code>false</code>。在其内部实现了<code>exists()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .contains(<span class="number">3</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean aBoolean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"result is "</span> + aBoolean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: result is true</span><br></pre></td></tr></table></figure><h2 id="3-8-isEmpty"><a href="#3-8-isEmpty" class="headerlink" title="3.8 isEmpty()"></a>3.8 isEmpty()</h2><p>作用：判断发送的数据是否为空。若为空，返回<code>true</code>，反之，返回<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .isEmpty()</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Boolean aBoolean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"result is "</span> + aBoolean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: result is false</span><br></pre></td></tr></table></figure><h2 id="3-9-amb"><a href="#3-9-amb" class="headerlink" title="3.9 amb()"></a>3.9 amb()</h2><p>作用：当需要发送多个<code>Observable</code>时，只发送<strong>先发送数据的<code>Observable</code>的数据</strong>，而其余<code>Observable</code>则被丢弃。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置两个需要发送的Observable，并放到集合中</span></span><br><span class="line">List&lt;ObservableSource&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 第一个Observable，延迟一秒发送数据</span></span><br><span class="line">list.add(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>).delay(<span class="number">1</span>, TimeUnit.SECONDS));</span><br><span class="line"><span class="comment">// 第二个Observable，正常发送数据</span></span><br><span class="line">list.add(Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用amba()，这样仅发送先发送数据的Observable，即第二个Observable，第一个因为延迟，被丢弃</span></span><br><span class="line">Observable.amb(list)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件 "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 接收到了事件 4</span><br><span class="line">D/MainActivity5: 接收到了事件 5</span><br><span class="line">D/MainActivity5: 接收到了事件 6</span><br></pre></td></tr></table></figure><h2 id="3-10-defaultEmpty"><a href="#3-10-defaultEmpty" class="headerlink" title="3.10 defaultEmpty()"></a>3.10 defaultEmpty()</h2><p>作用：在不发送任何有效事件（<code>Next</code>事件）、仅发送<code>Complete</code>事件的前提下，发送一个默认值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 不发送任何事件，仅发送Complete事件</span></span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 仅发送Complete事件时，默认发送10</span></span><br><span class="line">        .defaultIfEmpty(<span class="number">10</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity5: 接收到了事件10</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; title=&quot;1. 作用&quot;&gt;&lt;/a&gt;1. 作用&lt;/h1&gt;&lt;p&gt;通过设置函数，判断&lt;code&gt;Obsevable&lt;/code&gt;发送的事件是否符合条件。&lt;/p&gt;
&lt;h1 id=&quot;2-类型
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：过滤操作符</title>
    <link href="https://tylerLiu.top/2019/08/19/Android-RxJava%EF%BC%9A%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://tylerLiu.top/2019/08/19/Android-RxJava：过滤操作符/</id>
    <published>2019-08-19T03:27:09.000Z</published>
    <updated>2019-08-22T03:14:18.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h1><p>过滤/筛选<code>Observable</code>发送的事件和<code>Observer</code>接收的事件。</p><h1 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h1><p><code>RxJava</code>中，过滤操作符的类型包括：</p><ol><li>根据指定条件过滤事件：<code>Filter()</code>、<code>ofType()</code>、<code>skip()</code>、<code>skipLast()</code>、<code>distinct()</code>、<code>distinctUntilChanged()</code></li><li>根据指定事件数量过滤事件：<code>take()</code>、<code>takeLast()</code></li><li>根据指定事件过滤：<code>throttleFirst()</code>、<code>throttleLast()</code>、<code>sample()</code>、<code>throttleWithTimeout()</code>、<code>debounce()</code></li><li>根据指定事件位置过滤事件：<code>firstElement()</code>、<code>lastElement()</code>、<code>elementAt()</code>、<code>emelentAtOrErorr()</code></li></ol><h1 id="3-讲解"><a href="#3-讲解" class="headerlink" title="3. 讲解"></a>3. 讲解</h1><h2 id="3-1-根据指定条件过滤"><a href="#3-1-根据指定条件过滤" class="headerlink" title="3.1 根据指定条件过滤"></a>3.1 根据指定条件过滤</h2><p>作用：通过设置指定的过滤条件，当且仅当该事件满足条件时，就将该事件过滤（即不发送）。</p><p><strong>操作符：<code>Filter()</code></strong><br>作用：过滤特定条件的事件。</p><p>原理：</p><img src="/2019/08/19/Android-RxJava：过滤操作符/944365-cbec5a5b97682ed6.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 发送5个事件</span></span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onNext(<span class="number">4</span>);</span><br><span class="line">        emitter.onNext(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 采用filter()变换操作符</span></span><br><span class="line">        .filter(<span class="keyword">new</span> Predicate&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">// 根据test()的返回值，对被观察者发送的事件进行过滤并筛选</span></span><br><span class="line">            <span class="comment">// a. 返回true，则继续发送</span></span><br><span class="line">            <span class="comment">// b. 返回false，则不发送（过滤）</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 过滤≤3的事件</span></span><br><span class="line">                <span class="keyword">return</span> integer &gt; <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"过滤后得到的事件是："</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 开始采用subscribe连接</span><br><span class="line">D/MainActivity4: 过滤后得到的事件是：4</span><br><span class="line">D/MainActivity4: 过滤后得到的事件是：5</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>ofType()</code></strong><br>作用：过滤特定数据类型的事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="string">"Allen"</span>, <span class="number">3</span>, <span class="string">"liu"</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment">// 筛选出整型</span></span><br><span class="line">        .ofType(Integer.class)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"获取到的整型事件元素是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 获取到的整型事件元素是： 1</span><br><span class="line">D/MainActivity4: 获取到的整型事件元素是： 3</span><br><span class="line">D/MainActivity4: 获取到的整型事件元素是： 5</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>skip()</code>和<code>skipLast()</code></strong><br>作用：跳过某个事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用1：根据顺序跳过数据项</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment">// 跳过正序的前一项</span></span><br><span class="line">        .skip(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">// 跳过正序的后两项</span></span><br><span class="line">        .skipLast(<span class="number">2</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"获取到的整型事件元素是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用2：根据时间跳过数据项</span></span><br><span class="line"><span class="comment">// 发送数据0-5，每间隔1s发送一次，每次递增1，第一次发送延迟0s</span></span><br><span class="line">Observable.intervalRange(<span class="number">0</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 跳过第1s发送的数据</span></span><br><span class="line">        .skip(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 跳过最后1s发送的数据</span></span><br><span class="line">        .skipLast(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"获取到的整型事件元素是： "</span> + aLong);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 获取到的整型事件元素是： 2</span><br><span class="line">D/MainActivity4: 获取到的整型事件元素是： 3</span><br><span class="line">D/MainActivity4: 获取到的整型事件元素是： 1</span><br><span class="line">D/MainActivity4: 获取到的整型事件元素是： 2</span><br><span class="line">D/MainActivity4: 获取到的整型事件元素是： 3</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>distinct()</code>和<code>distinctUntilChanged()</code></strong><br>作用：过滤事件序列中重复的事件/连续重复的事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用1：过滤事件序列中重复的事件</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        .distinct()</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"不重复的整型事件元素是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用2：过滤事件序列中 连续重复的事件</span></span><br><span class="line"><span class="comment">// 下面序列中，连续重复的事件 = 3、4</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">        .distinctUntilChanged()</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"不连续重复的整型事件元素是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 不重复的整型事件元素是： 1</span><br><span class="line">D/MainActivity4: 不重复的整型事件元素是： 2</span><br><span class="line">D/MainActivity4: 不重复的整型事件元素是： 3</span><br><span class="line">D/MainActivity4: 不连续重复的整型事件元素是： 1</span><br><span class="line">D/MainActivity4: 不连续重复的整型事件元素是： 2</span><br><span class="line">D/MainActivity4: 不连续重复的整型事件元素是： 3</span><br><span class="line">D/MainActivity4: 不连续重复的整型事件元素是： 1</span><br><span class="line">D/MainActivity4: 不连续重复的整型事件元素是： 2</span><br><span class="line">D/MainActivity4: 不连续重复的整型事件元素是： 3</span><br><span class="line">D/MainActivity4: 不连续重复的整型事件元素是： 4</span><br></pre></td></tr></table></figure><h2 id="3-2-根据指定事件数量过滤事件"><a href="#3-2-根据指定事件数量过滤事件" class="headerlink" title="3.2 根据指定事件数量过滤事件"></a>3.2 根据指定事件数量过滤事件</h2><p>作用：通过设置指定的事件数量，仅发送特定数量的事件。</p><p><strong>操作符：<code>take()</code></strong><br>作用：指定观察者最多能接收到的事件数量<br>原理：</p><img src="/2019/08/19/Android-RxJava：过滤操作符/944365-0ce65f078ec3d259.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 发送5个事件</span></span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onNext(<span class="number">4</span>);</span><br><span class="line">        emitter.onNext(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 采用take()操作符，指定观察者只能接收2个事件</span></span><br><span class="line">        .take(<span class="number">2</span>).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"过滤后得到的事件是："</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实际上，被观察者还是发送了5个事件，只是因为操作符的存在，拦截了3个事件，最终， 观察者只接收到了2个事件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 过滤后得到的事件是：1</span><br><span class="line">D/MainActivity4: 过滤后得到的事件是：2</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>takeLast()</code></strong><br>作用：指定观察者只能接收到被观察者发送的最后几个事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment">//指定观察者只能接受被观察者发送的3个事件</span></span><br><span class="line">        .takeLast(<span class="number">3</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"过滤后得到的事件是："</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 过滤后得到的事件是：3</span><br><span class="line">D/MainActivity4: 过滤后得到的事件是：4</span><br><span class="line">D/MainActivity4: 过滤后得到的事件是：5</span><br></pre></td></tr></table></figure><h2 id="3-3-根据指定事件过滤事件"><a href="#3-3-根据指定事件过滤事件" class="headerlink" title="3.3 根据指定事件过滤事件"></a>3.3 根据指定事件过滤事件</h2><p>作用：通过设置指定的时间，仅发送在该时间内的事件。</p><p><strong>操作符：<code>throttleFirst()</code>和<code>throttlelast()</code></strong><br>作用：在某段时间内，只发送该段时间内第一次事件/最后一次事件。如，一段时间内连续点击按钮，但只执行第一次的点击事件。<br>原理：</p><img src="/2019/08/19/Android-RxJava：过滤操作符/944365-1f42132c7350bd79.png"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在某段时间内，只发送该段时间内第1次事件</span></span><br><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 隔段事件发送时间</span></span><br><span class="line">        e.onNext(<span class="number">1</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">2</span>);</span><br><span class="line">        Thread.sleep(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">3</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">4</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">5</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">6</span>);</span><br><span class="line">        Thread.sleep(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">7</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        e.onNext(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        e.onNext(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">//每1秒中采用数据</span></span><br><span class="line">        .throttleFirst(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在某段时间内，只发送该段时间内最后1次事件</span></span><br><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 隔段事件发送时间</span></span><br><span class="line">        e.onNext(<span class="number">1</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">2</span>);</span><br><span class="line">        Thread.sleep(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">3</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">4</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">5</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">6</span>);</span><br><span class="line">        Thread.sleep(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        e.onNext(<span class="number">7</span>);</span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        e.onNext(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        e.onNext(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">300</span>);</span><br><span class="line">        e.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 每1秒中采用数据</span></span><br><span class="line">        .throttleLast(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 接收到了事件throttleFirst = 1</span><br><span class="line">D/MainActivity4: 接收到了事件throttleFirst = 4</span><br><span class="line">D/MainActivity4: 接收到了事件throttleFirst = 7</span><br><span class="line">D/MainActivity4: 接收到了事件throttleLast = 3</span><br><span class="line">D/MainActivity4: 接收到了事件throttleLast = 6</span><br><span class="line">D/MainActivity4: 接收到了事件throttleLast = 9</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>sample()</code></strong><br>作用：在某段时间内，只发送该段时间内最新一次事件，与<code>throttleLast()</code>操作符类似。<br>使用方法就是把上文的<code>throttleLast()</code>改成<code>sample()</code>操作符即可。</p><p><strong>操作符：<code>throttleWithTimeOut()</code>/<code>debounce()</code></strong><br>作用：发送数据事件时，若2次发送事件的间隔 &lt; 指定时间，就会丢弃前一次的数据，直到指定时间内都没有新数据发射时才会发送后一次的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 隔段事件发送时间</span></span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 1和2之间的间隔小于指定时间1s，所以前1次数据（1）会被抛弃，2会被保留</span></span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        <span class="comment">// 因为2和3之间的间隔大于指定时间1s，所以之前被保留的2事件将发出</span></span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        <span class="comment">// 因为3和4之间的间隔大于指定时间1s，所以3事件将发出</span></span><br><span class="line">        emitter.onNext(<span class="number">4</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 因为4和5之间的间隔小于指定时间1s，所以前1次数据（4）会被抛弃，5会被保留</span></span><br><span class="line">        emitter.onNext(<span class="number">5</span>);</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        <span class="comment">// 因为5和6之间的间隔小于指定时间1s，所以前1次数据（5）会被抛弃，6会被保留</span></span><br><span class="line">        emitter.onNext(<span class="number">6</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1500</span>);</span><br><span class="line">        <span class="comment">// 因为6和Complete实践之间的间隔大于指定时间1s，所以之前被保留的6事件将发出</span></span><br><span class="line"></span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 每1秒采用数据</span></span><br><span class="line">        .throttleWithTimeout(<span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 接收到了事件2</span><br><span class="line">D/MainActivity4: 接收到了事件3</span><br><span class="line">D/MainActivity4: 接收到了事件6</span><br></pre></td></tr></table></figure><h2 id="3-4-根据指定事件位置过滤事件"><a href="#3-4-根据指定事件位置过滤事件" class="headerlink" title="3.4 根据指定事件位置过滤事件"></a>3.4 根据指定事件位置过滤事件</h2><p>作用：通过设置指定的位置，过滤在该位置的事件。</p><p><strong>操作符：<code>firstElement()</code>/<code>lastElement()</code></strong><br>作用：仅选取第一个元素/最后一个元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第1个元素</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .firstElement()</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"获取到的第一个事件是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取最后1个元素</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .lastElement()</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"获取到的最后1个事件是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 获取到的第一个事件： 1</span><br><span class="line">D/MainActivity4: 获取到的最后一个事件： 5</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>elementAt()</code></strong><br>作用：指定接收某个元素（通过索引值确定）。</p><blockquote><p>允许越界，即获取的位置索引 &gt; 发送事件序列长度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用1：获取位置索引为2的元素</span></span><br><span class="line"><span class="comment">// 位置索引从0开始</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .elementAt(<span class="number">2</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"使用1获取到的事件元素是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用2：获取的位置索引 ＞ 发送事件序列长度时，设置默认参数</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .elementAt(<span class="number">6</span>, <span class="number">10</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"使用2获取到的事件元素是： "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/MainActivity4: 使用1获取到的事件元素是： 3</span><br><span class="line">D/MainActivity4: 使用2获取到的事件元素是： 10</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>elementAtOrError()</code></strong><br>作用：在<code>elementAt()</code>的基础上，当出现越界情况（即获取的位置索引 &gt; 发送事件序列长度）时，抛出异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        .elementAtOrError(<span class="number">6</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">( Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG,<span class="string">"获取到的事件元素是： "</span>+ integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h1 id="4-实际开发需求"><a href="#4-实际开发需求" class="headerlink" title="4. 实际开发需求"></a>4. 实际开发需求</h1><p>在实际开发中，常见的过滤操作符实际需求场景有：功能防抖和联想搜索请求优化</p><h2 id="4-1-功能防抖"><a href="#4-1-功能防抖" class="headerlink" title="4.1 功能防抖"></a>4.1 功能防抖</h2><ol><li>背景：用户只需要使用功能1次</li><li>冲突：由于外部原因，多次触发了功能，导致出现冗余功能操作。</li></ol><ul><li>用户只需要使用网络请求功能一次（点击按钮），</li><li>但由于外部网络不好，点击一次后用户发现无响应，</li><li>于是多次点击按钮，最终导致发出了多个网络请求。</li></ul><ol start="3"><li>解决方案：功能防抖，通过根据指定时间过滤事件的过滤操作符实现，防止功能的抖动。</li></ol><p>具体使用可以看看后面的实例详解。</p><h2 id="4-2-联想搜索优化"><a href="#4-2-联想搜索优化" class="headerlink" title="4.2 联想搜索优化"></a>4.2 联想搜索优化</h2><ol><li>背景：实现联想搜索功能，即每当用户输入一个字符，即显示与当前输入框内字符相关的搜索结果。最基本的实现流程：</li></ol><ul><li>通过<code>EditText.addTextChangedListener()</code>监听输入框变化</li><li>当输入框发生变化后，回调<code>afterTextChanged()</code>将当前输入框的文字像服务器发起请求</li><li>服务器返回与该搜索文字关联的结果</li></ul><ol start="2"><li>冲突：在用户搜索需求明确的情况下（体现为连续输入），可能会发起一些不必要的网络请求。例子：</li></ol><ul><li>用户搜索需求明确 = abc，即连续输入了abc</li><li>按上面的实现，客户端会向服务器发起a、ab、abc三个网络请求</li><li>即，多发起了a、ab两个不必要的网络请求</li></ul><ol start="3"><li>解决方案：通过根据指定时间过滤事件的过滤操作符（<code>debounce</code>）实现，防止不必要的网络请求。原理：</li></ol><ul><li>当输入框发生变化时，不会立刻将当前输入框内的文字发送给服务器，而是等待一段时间；</li><li>若在这段时间内，输入框不再有文字输入（无发生变化），那么才发送输入框内的文字给服务器；</li><li>若在这段时间内，输入框有文字输入（有变化），则继续等待该段时间，循环上述过程。</li></ul><p>具体使用可以看看后面的实例详解。</p><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p><img src="/2019/08/19/Android-RxJava：过滤操作符/944365-19889e9538498010.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; title=&quot;1. 作用&quot;&gt;&lt;/a&gt;1. 作用&lt;/h1&gt;&lt;p&gt;过滤/筛选&lt;code&gt;Observable&lt;/code&gt;发送的事件和&lt;code&gt;Observer&lt;/code&gt;接收的事件
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：线程控制</title>
    <link href="https://tylerLiu.top/2019/08/17/Android-RxJava%EF%BC%9A%E7%BA%BF%E7%A8%8B%E6%8E%A7%E5%88%B6/"/>
    <id>https://tylerLiu.top/2019/08/17/Android-RxJava：线程控制/</id>
    <published>2019-08-17T09:23:39.000Z</published>
    <updated>2019-08-22T03:14:28.843Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h1><p>指定<code>Observable</code>/<code>Observer</code>的工作线程类型。</p><h1 id="2-原因"><a href="#2-原因" class="headerlink" title="2. 原因"></a>2. 原因</h1><h2 id="2-1-背景"><a href="#2-1-背景" class="headerlink" title="2.1 背景"></a>2.1 背景</h2><p>在<code>RxJava</code>模型中，<strong><code>Observable</code>/<code>Observer</code>的工作线程就是创建时所在的线程</strong>。<br>如果创建<code>Observable</code>/<code>Observer</code>在主线程，则生产事件/接收和响应事件都发生在主线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Rxjava"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">// 步骤1：创建被观察者 Observable &amp; 发送事件</span></span><br><span class="line">        <span class="comment">// 在主线程创建被观察者 Observable 对象</span></span><br><span class="line">        <span class="comment">// 所以生产事件的线程是：主线程</span></span><br><span class="line"></span><br><span class="line">        Observable&lt;Integer&gt; observable = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">" 被观察者 Observable的工作线程是: "</span> + Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">// 打印验证</span></span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤2：创建观察者 Observer 并 定义响应事件行为</span></span><br><span class="line">        <span class="comment">// 在主线程创建观察者 Observer 对象</span></span><br><span class="line">        <span class="comment">// 所以接收 &amp; 响应事件的线程是：主线程</span></span><br><span class="line">        Observer&lt;Integer&gt; observer = <span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">                Log.d(TAG, <span class="string">" 观察者 Observer的工作线程是: "</span> + Thread.currentThread().getName());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Next事件"</span>+ value +<span class="string">"作出响应"</span>  );</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤3：通过订阅（subscribe）连接观察者和被观察者</span></span><br><span class="line">        observable.subscribe(observer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2019/08/17/Android-RxJava：线程控制/944365-a9feda6734592987.png"><h2 id="2-2-冲突"><a href="#2-2-冲突" class="headerlink" title="2.2 冲突"></a>2.2 冲突</h2><p>一般情况下，需要在子线程中去实现耗时操作，然后回到主线程实现UI操作。<br>对应<code>RxJava</code>，可以理解为：</p><ul><li><code>Observable</code>要在子线程中生产事件（如实现耗时操作等）</li><li><code>Observer</code>在主线程接收和响应事件（如实现UI操作）</li></ul><h2 id="2-3-解决方法"><a href="#2-3-解决方法" class="headerlink" title="2.3 解决方法"></a>2.3 解决方法</h2><p>为了解决上面的冲突，实现异步操作，就需要对<code>RxJava</code>进行线程控制（切换/调度）</p><h1 id="3-实现方式"><a href="#3-实现方式" class="headerlink" title="3. 实现方式"></a>3. 实现方式</h1><p>采用<code>RxJava</code>内置的线程调度器<code>Scheduler</code>，即通过功能型操作符<code>subscribeOn()</code>和<code>observeOn()</code>来实现。</p><h2 id="3-1-subscribeOn和observeOn简介"><a href="#3-1-subscribeOn和observeOn简介" class="headerlink" title="3.1 subscribeOn和observeOn简介"></a>3.1 subscribeOn和observeOn简介</h2><p>作用：线程控制，即指定被观察者<code>Obserable</code>和观察者<code>Observer</code>的工作线程类型</p><p>线程类型：</p><table><thead><tr><th align="left">类型</th><th align="left">含义</th><th align="left">应用场景</th></tr></thead><tbody><tr><td align="left">Schedulers.immediate()</td><td align="left">当前线程，不指定线程</td><td align="left">默认</td></tr><tr><td align="left">AndroidSchedulers.mainThread()</td><td align="left">Android主线程</td><td align="left">操作UI</td></tr><tr><td align="left">Schedulers.newThread()</td><td align="left">常规新线程</td><td align="left">耗时等操作</td></tr><tr><td align="left">Schedulers.io()</td><td align="left">IO操作线程</td><td align="left">网络请求、读写文件等UI密集型操作</td></tr><tr><td align="left">Schedulers.computation()</td><td align="left">CPU计算操作线程</td><td align="left">大量计算操作</td></tr></tbody></table><p>注：<code>RxJava</code>内部使用<strong>线程池</strong>来维护这些线程，所以线程的调度效率非常高。</p><h2 id="3-2-具体使用"><a href="#3-2-具体使用" class="headerlink" title="3.2 具体使用"></a>3.2 具体使用</h2><p>具体是在（上面步骤3）<strong>通过订阅<code>subscribe</code>连接观察者和被观察者</strong>中实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用说明</span></span><br><span class="line"><span class="comment">// Observable.subscribeOn（Schedulers.Thread）：指定被观察者 发送事件的线程（传入RxJava内置的线程类型）</span></span><br><span class="line"><span class="comment">// Observable.observeOn（Schedulers.Thread）：指定观察者 接收 &amp; 响应事件的线程（传入RxJava内置的线程类型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例使用</span></span><br><span class="line"><span class="comment">// 步骤3：通过订阅（subscribe）连接观察者和被观察者</span></span><br><span class="line"><span class="comment">// 1. 指定被观察者 生产事件的线程</span></span><br><span class="line">observable.subscribeOn(Schedulers.newThread())</span><br><span class="line">    <span class="comment">// 2. 指定观察者接收和响应事件的线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())  </span><br><span class="line">    <span class="comment">// 3. 最后再通过订阅（subscribe）连接观察者和被观察者</span></span><br><span class="line">    .subscribe(observer);</span><br></pre></td></tr></table></figure><p>特别注意：</p><ol><li><p>若<code>Observable.subscribeOn()</code>多次指定被观察者生产事件的线程，则只有第一次指定有效，其余的指定线程无效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">observable</span><br><span class="line">    <span class="comment">// 第一次指定被观察者线程为新线程，有效</span></span><br><span class="line">    .subscribeOn(Schedulers.newThread()) </span><br><span class="line">    <span class="comment">// 第二次指定被观察者线程为主线程，无效</span></span><br><span class="line">    .subscribeOn(AndroidSchedulers.mainThread()) </span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(observer);</span><br></pre></td></tr></table></figure></li><li><p>若<code>Observable.observeOn()</code>多次指定<code>Observer</code>接收和响应事件的线程，则每次指定均有效，即没指定一次，就进行一次线程切换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribeOn(Schedulers.newThread())</span><br><span class="line">    <span class="comment">// 第一次指定观察者线程为主线程</span></span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    <span class="comment">// 生产事件</span></span><br><span class="line">    .doOnNext(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123; </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"第一次观察者Observer的工作线程是： "</span> + Thread.currentThread().getName());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line">    <span class="comment">// 第二次指定观察者线程为新的工作线程</span></span><br><span class="line">    .observeOn(Schedulers.newThread()) </span><br><span class="line">    <span class="comment">// 生产事件</span></span><br><span class="line">    .subscribe(observer);</span><br></pre></td></tr></table></figure></li></ol><p>注：</p><ul><li>整体方法调用顺序：<code>观察者.onSubscribe()</code> &gt; <code>被观察者.subscribe()</code> &gt; <code>观察者.doOnNext()</code></li><li><code>观察者.onSubscribe()</code>固定在主线程进行</li></ul><img src="/2019/08/17/Android-RxJava：线程控制/944365-61c84ec87fc621e4.png"><h1 id="4-Demo"><a href="#4-Demo" class="headerlink" title="4. Demo"></a>4. Demo</h1><p>下面，采用<code>Retrofit</code> + <code>RxJava</code>实现网络请求功能，说明<code>RxJava</code>的线程控制的具体应用。</p><h2 id="4-1-功能说明"><a href="#4-1-功能说明" class="headerlink" title="4.1 功能说明"></a>4.1 功能说明</h2><p>实现功能：将中文翻译成英文，并显示到界面<br>实现方案：采用<code>GET</code>方法对金山词霸API发送网络请求</p><h2 id="4-2-步骤说明"><a href="#4-2-步骤说明" class="headerlink" title="4.2 步骤说明"></a>4.2 步骤说明</h2><ol><li>添加依赖</li><li>创建接收服务器返回数据的类</li><li>创建用于描述网络请求的接口（区别于传统形式）</li><li>创建<code>Retrofit</code>实例</li><li>创建网络请求接口实例并配置网络请求参数（区别于传统形式）</li><li>发送网络请求（区别于传统形式）</li><li>对返回数据进行处理</li></ol><h2 id="4-3-具体实现"><a href="#4-3-具体实现" class="headerlink" title="4.3 具体实现"></a>4.3 具体实现</h2><h3 id="4-3-1-添加依赖"><a href="#4-3-1-添加依赖" class="headerlink" title="4.3.1 添加依赖"></a>4.3.1 添加依赖</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android 支持 RxJava</span></span><br><span class="line"><span class="comment">// 此处一定要注意使用RxJava2的版本</span></span><br><span class="line">implementation <span class="string">'io.reactivex.rxjava2:rxjava:2.2.7'</span></span><br><span class="line">implementation <span class="string">'io.reactivex.rxjava2:rxandroid:2.1.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Android 支持 Retrofit</span></span><br><span class="line">implementation <span class="string">'com.squareup.retrofit2:retrofit:2.5.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 衔接 Retrofit &amp; RxJava</span></span><br><span class="line"><span class="comment">// 此处一定要注意使用RxJava2的版本</span></span><br><span class="line">implementation <span class="string">'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 支持Gson解析</span></span><br><span class="line">implementation <span class="string">'com.squareup.retrofit2:converter-gson:2.5.0'</span></span><br></pre></td></tr></table></figure><p>权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-创建接收服务器返回数据的类"><a href="#4-3-2-创建接收服务器返回数据的类" class="headerlink" title="4.3.2 创建接收服务器返回数据的类"></a>4.3.2 创建接收服务器返回数据的类</h3><p>金山词霸API数据格式说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// URL模板</span><br><span class="line">http://fy.iciba.com/ajax.php</span><br><span class="line"></span><br><span class="line">// URL实例</span><br><span class="line">http://fy.iciba.com/ajax.php?a=fy&amp;f=auto&amp;t=auto&amp;w=hello%20world</span><br><span class="line"></span><br><span class="line">// 参数说明：</span><br><span class="line">// a：固定值 fy</span><br><span class="line">// f：原文内容类型，日语取 ja，中文取 zh，英语取 en，韩语取 ko，德语取 de，西班牙语取 es，法语取 fr，自动则取 auto</span><br><span class="line">// t：译文内容类型，日语取 ja，中文取 zh，英语取 en，韩语取 ko，德语取 de，西班牙语取 es，法语取 fr，自动则取 auto</span><br><span class="line">// w：查询内容</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"status"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"content"</span>: &#123;</span><br><span class="line"><span class="attr">"from"</span>: <span class="string">"en-EU"</span>,</span><br><span class="line"><span class="attr">"to"</span>: <span class="string">"zh-CN"</span>,</span><br><span class="line"><span class="attr">"vendor"</span>: <span class="string">"ciba_cnn"</span>,</span><br><span class="line"><span class="attr">"out"</span>: <span class="string">"\u4f60\u597d\u4e16\u754c"</span>,</span><br><span class="line"><span class="attr">"ciba_use"</span>: <span class="string">"\u6765\u81ea\u673a\u5668\u7ffb\u8bd1\u3002"</span>,</span><br><span class="line"><span class="attr">"ciba_out"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"err_no"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemorx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Translation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * status : 1</span></span><br><span class="line"><span class="comment">     * content : &#123;"from":"en-EU","to":"zh-CN","vendor":"ciba_cnn","out":"你好世界","ciba_use":"来自机器翻译。","ciba_out":"",</span></span><br><span class="line"><span class="comment">     * "err_no":0&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">private</span> ContentBean content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ContentBean <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(ContentBean content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentBean</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * from : en-EU</span></span><br><span class="line"><span class="comment">         * to : zh-CN</span></span><br><span class="line"><span class="comment">         * vendor : ciba_cnn</span></span><br><span class="line"><span class="comment">         * out : 你好世界</span></span><br><span class="line"><span class="comment">         * ciba_use : 来自机器翻译。</span></span><br><span class="line"><span class="comment">         * ciba_out :</span></span><br><span class="line"><span class="comment">         * err_no : 0</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String from;</span><br><span class="line">        <span class="keyword">private</span> String to;</span><br><span class="line">        <span class="keyword">private</span> String vendor;</span><br><span class="line">        <span class="keyword">private</span> String out;</span><br><span class="line">        <span class="keyword">private</span> String ciba_use;</span><br><span class="line">        <span class="keyword">private</span> String ciba_out;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> err_no;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> from;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrom</span><span class="params">(String from)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.from = from;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getTo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> to;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTo</span><span class="params">(String to)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.to = to;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getVendor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> vendor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVendor</span><span class="params">(String vendor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.vendor = vendor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> out;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOut</span><span class="params">(String out)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.out = out;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getCiba_use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ciba_use;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCiba_use</span><span class="params">(String ciba_use)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ciba_use = ciba_use;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getCiba_out</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ciba_out;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCiba_out</span><span class="params">(String ciba_out)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.ciba_out = ciba_out;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErr_no</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> err_no;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setErr_no</span><span class="params">(<span class="keyword">int</span> err_no)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.err_no = err_no;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-创建用于描述网络请求的接口"><a href="#4-3-3-创建用于描述网络请求的接口" class="headerlink" title="4.3.3 创建用于描述网络请求的接口"></a>4.3.3 创建用于描述网络请求的接口</h3><p>采用<strong>注解 + Observable</strong>接口描述网络请求参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemorx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.reactivex.Observable;</span><br><span class="line"><span class="keyword">import</span> retrofit2.http.GET;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GetRequest_Interface</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解中传入网络请求部分的URL地址</span></span><br><span class="line"><span class="comment">     * Retrofit将网络请求的URL分成两个部分：一是放在Retrofit对象里，另一是放在网络请求接口里</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GET</span>(<span class="string">"ajax.php?a=fy&amp;f=auto&amp;t=auto&amp;w=hi%20world"</span>)</span><br><span class="line">    <span class="function">Observable&lt;Translation&gt; <span class="title">getCall</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-后面的步骤均可在Activity中实现，详见代码"><a href="#4-3-4-后面的步骤均可在Activity中实现，详见代码" class="headerlink" title="4.3.4 后面的步骤均可在Activity中实现，详见代码"></a>4.3.4 后面的步骤均可在Activity中实现，详见代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemorx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jakewharton.retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.reactivex.Observable;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Observer;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.android.schedulers.AndroidSchedulers;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.disposables.Disposable;</span><br><span class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers;</span><br><span class="line"><span class="keyword">import</span> retrofit2.Retrofit;</span><br><span class="line"><span class="keyword">import</span> retrofit2.converter.gson.GsonConverterFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main3Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Allen"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤4：创建Retrofit对象</span></span><br><span class="line">        Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                <span class="comment">// 设置网络请求URL</span></span><br><span class="line">                .baseUrl(<span class="string">"http://fy.iciba.com/"</span>)</span><br><span class="line">                <span class="comment">// 设置使用GSON解析</span></span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                <span class="comment">// 设置支持RxJava</span></span><br><span class="line">                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤5：创建网络请求接口实例</span></span><br><span class="line">        <span class="keyword">final</span> GetRequest_Interface request = retrofit.create(GetRequest_Interface.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤6：采用Observable&lt;...&gt;形式对网络请求进行封装</span></span><br><span class="line">        Observable&lt;Translation&gt; observable = request.getCall();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 步骤7：发送网络请求</span></span><br><span class="line">        observable</span><br><span class="line">                <span class="comment">// 在IO线程进行网络请求</span></span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                <span class="comment">// 回到主线程 处理请求结果</span></span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> Observer&lt;Translation&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Translation translation)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 步骤8：对返回的数据进行处理</span></span><br><span class="line">                        <span class="keyword">if</span> (translation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            Log.d(TAG, <span class="string">"结果 from："</span> + translation.getContent().getFrom());</span><br><span class="line">                            Log.d(TAG, <span class="string">"结果 to："</span> + translation.getContent().getTo());</span><br><span class="line">                            Log.d(TAG, <span class="string">"结果 vendor："</span> + translation.getContent().getVendor());</span><br><span class="line">                            Log.d(TAG, <span class="string">"结果 out："</span> + translation.getContent().getOut());</span><br><span class="line">                            Log.d(TAG, <span class="string">"结果 ciba_use："</span> + translation.getContent().getCiba_use());</span><br><span class="line">                            Log.d(TAG, <span class="string">"结果 ciba_out："</span> + translation.getContent().getCiba_out());</span><br><span class="line">                            Log.d(TAG, <span class="string">"结果 err_no："</span> + translation.getContent().getErr_no());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"请求失败"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"请求成功"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">D/Allen: 开始采用subscribe连接</span><br><span class="line">D/Allen: 结果 from：en-EU</span><br><span class="line">D/Allen: 结果 to：zh-CN</span><br><span class="line">D/Allen: 结果 vendor：tencent</span><br><span class="line">D/Allen: 结果 out：嗨世界</span><br><span class="line">D/Allen: 结果 ciba_use：来自机器翻译。</span><br><span class="line">D/Allen: 结果 ciba_out：</span><br><span class="line">D/Allen: 结果 err_no：0</span><br><span class="line">D/Allen: 请求成功</span><br></pre></td></tr></table></figure><p>地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p><h1 id="5-程序崩溃问题"><a href="#5-程序崩溃问题" class="headerlink" title="5. 程序崩溃问题"></a>5. 程序崩溃问题</h1><p>背景：在发送网络请求时，退出当前Activity。<br>冲突：此时如果回到主线程更新UI，APP会崩溃<br>解决方案：当Activity退出时，调用<code>Disposiable.dispose()</code>切断观察者和被观察者之间的订阅，使得观察者无法接收到事件和响应事件。</p><blockquote><p>当出现多个<code>Disposiable</code>时，可以采用<code>RxJava</code>内置容器<code>CompositeDisposable</code>进行统一管理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加Disposable到CompositeDisposable容器</span></span><br><span class="line">CompositeDisposable.add()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空CompositeDisposable容器</span></span><br><span class="line">CompositeDisposable.clear()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; title=&quot;1. 作用&quot;&gt;&lt;/a&gt;1. 作用&lt;/h1&gt;&lt;p&gt;指定&lt;code&gt;Observable&lt;/code&gt;/&lt;code&gt;Observer&lt;/code&gt;的工作线程类型。&lt;/p&gt;

      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：功能性操作符</title>
    <link href="https://tylerLiu.top/2019/08/16/Android-RxJava%EF%BC%9A%E5%8A%9F%E8%83%BD%E6%80%A7%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://tylerLiu.top/2019/08/16/Android-RxJava：功能性操作符/</id>
    <published>2019-08-16T06:48:26.000Z</published>
    <updated>2019-08-22T03:14:14.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h1><p>辅助被观察者<code>Observable</code>在发送事件时实现一些功能性需求，如错误处理、线程调度等。</p><h1 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h1><p>常用的功能性操作符：</p><ol><li>连接被观察者和观察者：<code>subscribe()</code>，订阅</li><li>线程调度：<code>subscribeOn()</code>、<code>observeOn()</code></li><li>延迟操作：<code>delay()</code></li><li>在事件的生命周期中操作：<code>do()</code></li><li>错误处理：即遇到错误时的机制，<code>onErrorReturn()</code>、<code>onErrorResumeNext()</code>、<code>onExceptionResumeNext()</code>、<code>retry()</code>、<code>retryUntil()</code>、<code>retryWhen()</code></li><li>重复发起操作：<code>repeat()</code>、<code>repeatWhen()</code></li></ol><h1 id="3-详细说明"><a href="#3-详细说明" class="headerlink" title="3. 详细说明"></a>3. 详细说明</h1><h2 id="3-1-连接被观察者和观察者"><a href="#3-1-连接被观察者和观察者" class="headerlink" title="3.1 连接被观察者和观察者"></a>3.1 连接被观察者和观察者</h2><p>作用：使被观察者和观察者形成订阅关系。</p><p><strong>操作符：<code>subscribe()</code></strong><br>具体例子看前面的就可以了。</p><h2 id="3-2-线程调度"><a href="#3-2-线程调度" class="headerlink" title="3.2 线程调度"></a>3.2 线程调度</h2><p>作用：快速、方便指定和控制被观察者及观察者的工作线程。<br>该部分在下一篇详细看看。</p><h2 id="3-3-延迟操作："><a href="#3-3-延迟操作：" class="headerlink" title="3.3 延迟操作："></a>3.3 延迟操作：</h2><p>作用：使得被观察者延迟一段时间再发送事件。<br>里面有多个重载方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定延迟时间</span></span><br><span class="line"><span class="comment">// @param delay 时间</span></span><br><span class="line"><span class="comment">// @param unit 时间单位</span></span><br><span class="line">delay(<span class="keyword">long</span> delay, TimeUnit unit)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定延迟时间和错误延迟</span></span><br><span class="line"><span class="comment">// 如果出现Error事件，则先正常执行，执行结束之后，再抛出异常</span></span><br><span class="line"><span class="comment">// @param delayError 错误延迟参数</span></span><br><span class="line">delay(<span class="keyword">long</span> delay, TimeUnit unit, <span class="keyword">boolean</span> delayError)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定延迟时间和调度器</span></span><br><span class="line"><span class="comment">// @param scheduler 线程调度器</span></span><br><span class="line">delay(<span class="keyword">long</span> delay, TimeUnit unit, Scheduler scheduler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定延迟时间、调度器和错误延迟参数</span></span><br><span class="line">delay(<span class="keyword">long</span> delay, TimeUnit unit, Scheduler scheduler, <span class="keyword">boolean</span> delayError)</span><br></pre></td></tr></table></figure><h2 id="3-4-在事件的生命周期中操作"><a href="#3-4-在事件的生命周期中操作" class="headerlink" title="3.4 在事件的生命周期中操作"></a>3.4 在事件的生命周期中操作</h2><p>作用：在事件发送和接收的整个生命周期过程中进行操作。如发送事件前的初始化、发送事件后的回调请求等。</p><p><strong>操作符：<code>do()</code></strong><br>作用：在某个事件的生命周期中调用。<br><code>do()</code>操作符包含以下：</p><ol><li>当<code>Observable</code>每发送一次数据事件，就会调用一次。<code>doOnEach()</code>，含<code>onNext()</code>、<code>onError()</code>和<code>onComplete()</code></li><li><code>Next</code>事件</li></ol><ul><li>执行<code>Next</code>事件前调用：<code>doOnNext()</code></li><li>执行<code>Next</code>事件后调用：<code>doAfterNext()</code></li></ul><ol start="3"><li>发送事件完毕后调用</li></ol><ul><li>发送错误事件时：<code>doOnError()</code></li><li>正常发送事件完毕后：<code>doOnCompleted()</code></li><li>无论正常发送/异常终止：<code>doOnTeriminate()</code></li><li>最后执行：<code>doFinaly()</code></li></ul><ol start="4"><li>订阅相关</li></ol><ul><li>观察者订阅时调用：<code>doOnSubscribe()</code></li><li>观察者取消订阅时调用：<code>doOnUnsubscribe()</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onError(<span class="keyword">new</span> Throwable(<span class="string">"发生错误"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 当Observable每发送一次数据事件，就调用一次</span></span><br><span class="line">        .doOnEach(<span class="keyword">new</span> Consumer&lt;Notification&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Notification&lt;Integer&gt; integerNotification)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doOnEach: "</span> + integerNotification.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 执行Next事件前执行</span></span><br><span class="line">        .doOnNext(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doOnNext: "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 执行Next事件后执行</span></span><br><span class="line">        .doAfterNext(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doAfterNext: "</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// Observable正常发送事件结束后调用</span></span><br><span class="line">        .doOnComplete(<span class="keyword">new</span> Action() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doOnComplete: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// Observable发送错误事件时调用</span></span><br><span class="line">        .doOnError(<span class="keyword">new</span> Consumer&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doOnError: "</span> + throwable.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 观察者订阅时调用</span></span><br><span class="line">        .doOnSubscribe(<span class="keyword">new</span> Consumer&lt;Disposable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Disposable disposable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doOnSubscribe: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// Observable发送事件结束后调用，无论正常发送完毕还是异常终止</span></span><br><span class="line">        .doAfterTerminate(<span class="keyword">new</span> Action() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doAfterTerminate: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 最后执行</span></span><br><span class="line">        .doFinally(<span class="keyword">new</span> Action() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"doFinally: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-5-错误处理"><a href="#3-5-错误处理" class="headerlink" title="3.5 错误处理"></a>3.5 错误处理</h2><p>作用：发送事件过程中，遇到错误时的处理机制。</p><p>常用的操作符：</p><ol><li>发送数据</li></ol><ul><li>发送一个特殊的事件并正常终止：<code>onErrorReturn()</code></li><li>发送一个新的<code>Observable</code>：<code>onErrorResumeNext()</code>、<code>onExceptionResumeNext()</code></li></ul><ol start="2"><li>重试</li></ol><ul><li>重试：<code>retry()</code></li><li>让<code>Observable</code>重新订阅：<code>retryUntil()</code></li><li>将错误传递给另一个<code>Observable</code>，来决定是否要重新订阅该<code>Observable</code>：<code>retryWhen()</code></li></ul><p><strong>操作符：<code>onErrorReturn()</code></strong><br>作用：遇到错误时，发送一个特殊事件并正常终止，可以捕获在它之前发生的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onError(<span class="keyword">new</span> Throwable(<span class="string">"发生错误了"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).onErrorReturn(<span class="keyword">new</span> Function&lt;Throwable, Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 捕捉错误异常</span></span><br><span class="line">        Log.e(TAG, <span class="string">"在onErrorReturn处理了错误: "</span> + throwable.toString());</span><br><span class="line">        <span class="comment">// 发生错误事件后，发送一个"666"事件，最终正常结束</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-53f108767f179f0b.png"><p><strong>操作符：<code>onErrorResumeNext()</code></strong><br>作用：遇到错误时，发送一个新的<code>Observable</code>。</p><p>注：</p><ol><li><code>onErrorResumeNext()</code>拦截的错误为<code>Throwable</code>；若需拦截<code>Exception</code>，要用<code>onExceptionResumeNext()</code></li><li>若<code>onErrorResumeNext()</code>拦截的错误为<code>Exception</code>，则会将错误传递给观察者的<code>onError()</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        e.onNext(<span class="number">1</span>);</span><br><span class="line">        e.onNext(<span class="number">2</span>);</span><br><span class="line">        e.onError(<span class="keyword">new</span> Throwable(<span class="string">"发生错误了"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).onErrorResumeNext(<span class="keyword">new</span> Function&lt;Throwable, ObservableSource&lt;? extends Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ObservableSource&lt;? extends Integer&gt; apply(<span class="meta">@NonNull</span> Throwable throwable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 捕捉错误异常</span></span><br><span class="line">        Log.e(TAG, <span class="string">"在onErrorReturn处理了错误: "</span> + throwable.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 发生错误事件后，发送一个新的被观察者 &amp; 发送事件序列</span></span><br><span class="line">        <span class="keyword">return</span> Observable.just(<span class="number">11</span>, <span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-ceec6fa2c9385811.png"><p><strong>操作符：<code>onExceptionResumeNext()</code></strong><br>作用：遇到错误时，发送一个新的<code>Observable</code>。</p><p>注：</p><ol><li><code>onExceptionResumeNext()</code>拦截的错误为<code>Exception</code>；若需拦截<code>Throwable</code>，要用<code>onErrorResumeNext()</code></li><li>若<code>onExceptionResumeNext()</code>拦截的错误为<code>Throwable</code>，则会将错误传递给观察者的<code>onError()</code>方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        e.onNext(<span class="number">1</span>);</span><br><span class="line">        e.onNext(<span class="number">2</span>);</span><br><span class="line">        e.onError(<span class="keyword">new</span> Exception(<span class="string">"发生错误了"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).onExceptionResumeNext(<span class="keyword">new</span> Observable&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">subscribeActual</span><span class="params">(Observer&lt;? <span class="keyword">super</span> Integer&gt; observer)</span> </span>&#123;</span><br><span class="line">        observer.onNext(<span class="number">11</span>);</span><br><span class="line">        observer.onNext(<span class="number">22</span>);</span><br><span class="line">        observer.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-fb80cd4732481f41.png"><p><strong>操作符：<code>retry()</code></strong><br>作用：重试，当出现错误时，让被观察者<code>oBservable</code>重新发送数据</p><ol><li>接收到<code>onError()</code>时，重新订阅并发送事件</li><li><code>Throwable</code>和<code>Exception</code>都可拦截</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 出现错误时，让被观察者重新发送数据，若一直出现错误，就一直重新发送</span></span><br><span class="line">retry()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出现错误时，让被观察者重新发送数据，有重试次数限制</span></span><br><span class="line"><span class="comment">// @param times 重试次数</span></span><br><span class="line">retry(<span class="keyword">long</span> times)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出现错误时，判断是否需要重新发送数据，若需要重新发送，且持续遇到错误，则持续重试</span></span><br><span class="line"><span class="comment">// @param predicate 判断逻辑</span></span><br><span class="line">retry(Predicate&lt;? <span class="keyword">super</span> Throwable&gt; predicate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出现错误时，判断是否需要重新发送数据，若需要重新发送，且持续遇到错误，则持续重试</span></span><br><span class="line"><span class="comment">// @param predicate 判断逻辑，传入当前重试次数和异常错误信息</span></span><br><span class="line">retry(BiPredicate&lt;? <span class="keyword">super</span> Integer, ? <span class="keyword">super</span> Throwable&gt; predicate)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出现错误时，判断是否需要重新发送数据，若需要重新发送，且持续遇到错误，则持续重试</span></span><br><span class="line"><span class="comment">// @param times 重试次数</span></span><br><span class="line"><span class="comment">// @param predicate 判断逻辑</span></span><br><span class="line">retry(<span class="keyword">long</span> times, Predicate&lt;? <span class="keyword">super</span> Throwable&gt; predicate)</span><br></pre></td></tr></table></figure><p>前面的三个方法很简单，看看后面两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onError(<span class="keyword">new</span> Exception(<span class="string">"发生错误了"</span>));</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 拦截错误后，判断是否需要重新发送请求</span></span><br><span class="line">        .retry(<span class="keyword">new</span> BiPredicate&lt;Integer, Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Integer integer, Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 捕获异常</span></span><br><span class="line">                Log.e(TAG, <span class="string">"异常错误 =  "</span> + throwable.toString());</span><br><span class="line">                <span class="comment">// 获取当前重试次数</span></span><br><span class="line">                Log.e(TAG, <span class="string">"当前重试次数 =  "</span> + integer);</span><br><span class="line">                <span class="comment">//返回false：不重新重新发送数据 &amp; 调用观察者的onError结束</span></span><br><span class="line">                <span class="comment">//返回true：重新发送请求（若持续遇到错误，就持续重新发送）</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        e.onNext(<span class="number">1</span>);</span><br><span class="line">        e.onNext(<span class="number">2</span>);</span><br><span class="line">        e.onError(<span class="keyword">new</span> Exception(<span class="string">"发生错误了"</span>));</span><br><span class="line">        e.onNext(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 拦截错误后，判断是否需要重新发送请求</span></span><br><span class="line">        .retry(<span class="number">3</span>, <span class="keyword">new</span> Predicate&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(@NonNull Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 捕获异常</span></span><br><span class="line">                Log.e(TAG, <span class="string">"retry错误: "</span> + throwable.toString());</span><br><span class="line"></span><br><span class="line">                <span class="comment">//返回false：不重新重新发送数据 &amp; 调用观察者的onError（）结束</span></span><br><span class="line">                <span class="comment">//返回true：重新发送请求（最多重新发送3次）</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>retryUntil()</code></strong><br>作用：出现错误后，判断是否需要重新发送数据</p><ol><li>若需要重新发送，且持续遇到错误，则持续重试</li><li>作用类似于：<code>retry(Predicate predicate)</code></li></ol><p>具体使用类似于<code>retry(Predicate predicate)</code>，唯一区别是：返回<code>true</code>，则不重新发送数据事件。</p><p><strong>操作符：<code>retryWhen()</code></strong><br>作用：遇到错误时，将发生的错误传递给一个新的被观察者<code>Observable</code>，并决定是否需要重新订阅原始被观察者并发送事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        e.onNext(<span class="number">1</span>);</span><br><span class="line">        e.onNext(<span class="number">2</span>);</span><br><span class="line">        e.onError(<span class="keyword">new</span> Exception(<span class="string">"发生错误了"</span>));</span><br><span class="line">        e.onNext(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遇到Error事件才会回调</span></span><br><span class="line">        .retryWhen(<span class="keyword">new</span> Function&lt;Observable&lt;Throwable&gt;, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(Observable&lt;Throwable&gt; throwableObservable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 参数Observable&lt;Throwable&gt;中的泛型为上游操作抛出的异常，可通过该条件来判断异常的类型</span></span><br><span class="line">                <span class="comment">// 返回ObservableSource&lt;?&gt;，为新的被观察者Observable，可以是任意类型的</span></span><br><span class="line">                <span class="comment">// 这里有两种处理方式：</span></span><br><span class="line">                <span class="comment">// 1. 若新的Observable发送的事件为Error事件，那么原始Observable则不重新发送事件</span></span><br><span class="line">                <span class="comment">// 2. 若新的Observable发送的事件为Next事件，那么原始Observable则重新发送事件</span></span><br><span class="line">                <span class="keyword">return</span> throwableObservable.flatMap(<span class="keyword">new</span> Function&lt;Throwable, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(Throwable throwable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">// 1. 若返回的Observable发送事件为Error事件，那么原始的Observable则不重新发送事件.</span></span><br><span class="line">                        <span class="comment">// 该异常错误信息可以在观察者中的onError()中获得</span></span><br><span class="line">                        <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> Throwable(<span class="string">"retryWhen终止"</span>));</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 2. 若新的Observable发送的事件为Next事件，那么原始Observable则重新发送事件，</span></span><br><span class="line">                        <span class="comment">// 若持续遇到错误，则持续重试</span></span><br><span class="line">                        <span class="comment">// return Observable.just(1);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span> + e.toString());</span><br><span class="line">        <span class="comment">// 获取异常错误信息</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>情况1：</p><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-85824e55f933b3de.png"><p>情况2：</p><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-875063c39c5f5ef3.png"><h2 id="3-6-重复发送"><a href="#3-6-重复发送" class="headerlink" title="3.6 重复发送"></a>3.6 重复发送</h2><p>作用：重复不断地发送被观察者事件<br>操作符：<code>repeat</code>和<code>repeatWhen()</code></p><p><strong>操作符：<code>repeat()</code></strong><br>作用：无条件、重复发送被观察者事件，具备重载方法，可设置重复创建次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="comment">// 重复创建3次</span></span><br><span class="line">    .repeat(<span class="number">3</span>)</span><br><span class="line">    .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>注：</p><ol><li>接收到<code>onComplete(0</code>事件后，触发重新订阅和发送</li><li>默认运行在一个新的线程上</li></ol><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-c15424be47abd373.png"><p><strong>操作符：<code>repeatWhen()</code></strong><br>作用：有条件地、重复发送被观察者事件<br>原理：将原始<code>Observable</code>停止发送事件的标识（<code>Complete()</code>/<code>Error()</code>）转换成一个<code>Object</code>类型数据传递给一个新的<code>Observable</code>，以此决定是否重新订阅和发送原来的<code>Observable</code>。</p><ol><li>如果新的<code>Observable</code>返回一个<code>Complete</code>/<code>Error</code>事件，则不重新订阅和发送原来的<code>Observable</code></li><li>如果新的<code>Observable</code>返回其余事件时，则重新订阅并发送原来的<code>Observable</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>).repeatWhen(<span class="keyword">new</span> Function&lt;Observable&lt;Object&gt;, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">// 在Function函数中，必须对输入的 Observable&lt;Object&gt;进行处理，这里使用的是flatMap操作符接收上游的数据</span></span><br><span class="line">    <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(<span class="meta">@NonNull</span> Observable&lt;Object&gt; objectObservable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 将原始Observable停止发送事件的标识（Complete()/Error()）转换成一个Object类型数据传递给一个新的Observable</span></span><br><span class="line">        <span class="comment">// 以此决定是否重新订阅和发送原来的Observable</span></span><br><span class="line">        <span class="comment">// 此处有2种情况：</span></span><br><span class="line">        <span class="comment">// 1. 若新的Observable返回一个Complete()/Error()事件，则不重新订阅和发送原来的Observable</span></span><br><span class="line">        <span class="comment">// 2. 若新的Observable返回其余事件，则重新订阅并发送原来的Observable</span></span><br><span class="line">        <span class="keyword">return</span> objectObservable.flatMap(<span class="keyword">new</span> Function&lt;Object, ObservableSource&lt;?&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ObservableSource&lt;?&gt; apply(<span class="meta">@NonNull</span> Object throwable) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 1. 若新的Observable返回一个Complete()/Error()事件，则不重新订阅和发送原来的Observable</span></span><br><span class="line">                <span class="comment">// Observable.empty()则发送Complete事件，但不会回调观察者的onComplete()</span></span><br><span class="line">                <span class="keyword">return</span> Observable.empty();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 返回Error事件则回调onError()事件，并接收传过去的错误信息</span></span><br><span class="line">                <span class="comment">// return Observable.error(new Throwable("不再重新订阅事件"));</span></span><br><span class="line">                </span><br><span class="line"></span><br><span class="line">                <span class="comment">// 2. 若新的Observable返回其余事件，则重新订阅并发送原来的Observable</span></span><br><span class="line">                <span class="comment">// 仅仅是作为一个触发重新订阅被观察者的通知，发送的是什么数据并不重要，只要不是Complete()/Error()事件</span></span><br><span class="line">                <span class="comment">// return Observable.just(1);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应："</span> + e.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-c1cc930094f20122.png"><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-5e15f379883fbf0e.png"><img src="/2019/08/16/Android-RxJava：功能性操作符/944365-69b7e611a6a21499.png"><h1 id="4-实际开发需求"><a href="#4-实际开发需求" class="headerlink" title="4. 实际开发需求"></a>4. 实际开发需求</h1><ol><li>线程操作，如切换/调度/控制</li><li>轮询</li><li>发送网络请求时的差错重试机制</li></ol><h2 id="4-1-线程操作"><a href="#4-1-线程操作" class="headerlink" title="4.1 线程操作"></a>4.1 线程操作</h2><p>详细请看下一篇。</p><h2 id="4-2-轮询"><a href="#4-2-轮询" class="headerlink" title="4.2 轮询"></a>4.2 轮询</h2><p>实例讲解中会有一篇结合<code>Retrofit</code>，实现轮询。</p><h2 id="4-3-发送网络请求时的差错重试机制"><a href="#4-3-发送网络请求时的差错重试机制" class="headerlink" title="4.3 发送网络请求时的差错重试机制"></a>4.3 发送网络请求时的差错重试机制</h2><p>实例讲解中会有一篇结合<code>Retrofit</code>，实现该功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; title=&quot;1. 作用&quot;&gt;&lt;/a&gt;1. 作用&lt;/h1&gt;&lt;p&gt;辅助被观察者&lt;code&gt;Observable&lt;/code&gt;在发送事件时实现一些功能性需求，如错误处理、线程调度等。&lt;/p
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：组合/合并操作符</title>
    <link href="https://tylerLiu.top/2019/08/15/Android-RxJava%EF%BC%9A%E7%BB%84%E5%90%88-%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://tylerLiu.top/2019/08/15/Android-RxJava：组合-合并操作符/</id>
    <published>2019-08-15T07:51:51.000Z</published>
    <updated>2019-08-22T03:14:33.096Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h1><p>组合多个被观察者<code>Observable</code>，合并需要发送的事件。</p><h1 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h1><p><code>RxJava</code>中常见的组合/合并操作符：</p><ol><li>组合多个被观察者</li></ol><ul><li>按发送顺序：<code>concat()</code>、<code>concatArray()</code></li><li>按时间：<code>merge()</code>、<code>mergeArray()</code></li><li>错误处理：<code>concatDelatError()</code>、<code>mergeDelayError()</code></li></ul><ol start="2"><li>合并多个事件</li></ol><ul><li>按数量：<code>zip()</code></li><li>按时间：<code>combineLatest()</code>、<code>combineLatestError()</code></li><li>合并成一个事件发送：<code>reduce()</code>、<code>collect()</code></li></ul><ol start="3"><li>发送事件前追加发送事件：<code>startWith()</code>、<code>startWithArray()</code></li><li>统计发送事件数量：<code>count()</code></li></ol><h1 id="3-详细说明"><a href="#3-详细说明" class="headerlink" title="3. 详细说明"></a>3. 详细说明</h1><h2 id="3-1-组合多个被观察者"><a href="#3-1-组合多个被观察者" class="headerlink" title="3.1 组合多个被观察者"></a>3.1 组合多个被观察者</h2><p>该类型操作符的作用：组合多个被观察者。</p><p><strong><code>concat()/concatArray()</code></strong><br>作用：组合多个被观察者一起发送数据，合并后<strong>按发送顺序串行执行</strong>。<br>二者区别：组合被观察者的数量不同，<code>concat()</code>为≤4和，<code>concatArray()</code>为＞4个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">Observable.concat(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">        Observable.just(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>),</span><br><span class="line">        Observable.just(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">Observable.concatArray(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">        Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>),</span><br><span class="line">        Observable.just(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>),</span><br><span class="line">        Observable.just(<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>),</span><br><span class="line">        Observable.just(<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong><code>merge()/mergeArray()</code></strong><br>作用：组合多个被观察者一起发送数据，合并后<strong>按时间线并行执行</strong>。<br>二者区别：组合被观察者的数量不同，<code>merge()</code>为≤4和，<code>mergeArray()</code>为＞4个。<br>与<code>concat()</code>的区别：合并后执行的方式不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Observable.merge(</span><br><span class="line">        Observable.intervalRange(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS),</span><br><span class="line">        Observable.intervalRange(<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">).subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>concatDelayError()/megerDelayError()</code></strong><br>作用：</p><ul><li>背景：使用<code>concat()</code>和<code>meger()</code>操作符时，若其中一个b被观察者发出<code>onError()</code>事件，则会马上终止其他被观察者继续发送事件，造成冲突。</li><li>解决方案：若希望<code>onError()</code>事件推迟到其他被观察者发送事件结束之后触发，需要使用对用的<code>concatDelayError()</code>或<code>megerDelayError()</code>。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">Observable.concat(</span><br><span class="line">        Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                emitter.onNext(<span class="number">2</span>);</span><br><span class="line">                emitter.onNext(<span class="number">3</span>);</span><br><span class="line">                <span class="comment">// 发送Error事件，因为无使用concatDelayError，所以第2个Observable将不会发送事件</span></span><br><span class="line">                emitter.onError(<span class="keyword">new</span> NullPointerException());</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">Observable.concatArrayDelayError(</span><br><span class="line">        Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                emitter.onNext(<span class="number">2</span>);</span><br><span class="line">                emitter.onNext(<span class="number">3</span>);</span><br><span class="line">                <span class="comment">// 发送Error事件，因为使用了concatDelayError，所以第2个Observable将会发送事件，等发送完毕后，再发送错误事件</span></span><br><span class="line">                emitter.onError(<span class="keyword">new</span> NullPointerException());</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></li></ul><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-0c907ffaeb2fd449.png"><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-804c8472fc60eb6a.png"><h2 id="3-2-合并多个事件"><a href="#3-2-合并多个事件" class="headerlink" title="3.2 合并多个事件"></a>3.2 合并多个事件</h2><p>该类型的操作符主要是对多个被观察者中的事件进行合并处理。</p><p><strong>操作符：<code>zip()</code></strong><br>作用：合并多个被观察者<code>Observable</code>发送的事件，生成一个新的事件序列（即组合之后的事件序列），并发送。</p><p>原理：</p><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-3fa4b1fd4f561820.png"><p>特别注意：</p><ol><li>事件组合方式：严格按照原先事件序列进行对位合并</li><li>最终合并的事件数量：多个被观察者<code>Observable</code>中数量最少的数量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建1个被观察者</span></span><br><span class="line">Observable&lt;Integer&gt; observable1 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"被观察者1发送了事件1"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 为了方便展示效果，所以在发送事件后加入2s的延迟</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"被观察者1发送了事件2"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"被观察者1发送了事件3"</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 设置被观察者1在工作线程1中工作</span></span><br><span class="line">        .subscribeOn(Schedulers.io());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建第2个被观察者</span></span><br><span class="line">Observable&lt;String&gt; observable2 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;String&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"被观察者2发送了事件A"</span>);</span><br><span class="line">        emitter.onNext(<span class="string">"A"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"被观察者2发送了事件B"</span>);</span><br><span class="line">        emitter.onNext(<span class="string">"B"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"被观察者2发送了事件C"</span>);</span><br><span class="line">        emitter.onNext(<span class="string">"C"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        Log.d(TAG, <span class="string">"被观察者2发送了事件D"</span>);</span><br><span class="line">        emitter.onNext(<span class="string">"D"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 设置被观察者2在工作线程2中工作</span></span><br><span class="line">        .subscribeOn(Schedulers.newThread());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不做线程控制，两个被观察者会在同一个线程上工作，即发送事件存在先后顺序，而不是通同时发送。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用zip操作符进行事件合并</span></span><br><span class="line"><span class="comment">// 创建BiFunction对象传入的第三个参数为合并后数据的数据类型</span></span><br><span class="line">Observable.zip(observable1, observable2, <span class="keyword">new</span> BiFunction&lt;Integer, String, String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer, String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> integer + s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onSubscribe"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"最终接收到的事件 =  "</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onError"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onComplete"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-8986cf9178060877.png"><p>特别注意：</p><ol><li>尽管被观察者2的事件<code>D</code>没有合并，但是还是会继续发送；</li><li>如果在被观察者1和被观察者2的事件序列最后发送<code>onComplete()</code>事件，则被观察者2的事件<code>D</code>也不会发送。</li></ol><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-7b241e653250b906.png"><p><code>zip()</code>总结：</p><ol><li>定义：属于<code>RxJava2</code>中的组合/合并操作符</li><li>作用：</li></ol><ul><li>合并多个被观察者<code>Observable</code>发送的事件</li><li>生成一个新的事件序列，并发送</li></ul><ol start="3"><li>原理：</li></ol><ul><li>事件组合方式：严格按照原先事件序列进行对位合并</li><li>最终合并的事件数量：多个被观察者<code>Observable</code>中数量最少的数量</li></ul><ol start="4"><li>应用场景：</li></ol><ul><li>当需要展示的信息需要从多个地方获取，且要统一结合后再展示</li><li>如合并互联网请求的发送，并统一显示结果：<code>Retrofit</code>结合<code>RxJava</code></li></ul><p><strong>操作符：combineLatest()</strong><br>作用：当两个<code>Observable</code>中的任何一个发送数据之后，将先发送数据的<code>Observable</code>的最新（最后）一个数据与另一个<code>Observable</code>发送的每个数据结合，最后基于该函数的结果发送数据。</p><blockquote><p>与<code>zip()</code>的区别：<code>zip()</code>是按个数合并，一对一的合并；<code>combineLatest()</code>是按时间合并，即再同一个时间点上合并。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Observable.combineLatest(Observable.just(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>),</span><br><span class="line">        Observable.intervalRange(<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS),</span><br><span class="line">        <span class="keyword">new</span> BiFunction&lt;Long, Long, Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">apply</span><span class="params">(Long aLong1, Long aLong2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// aLong1：第1个Observable发送的最新（最后）1个数据</span></span><br><span class="line">                <span class="comment">// aLong2：第2个Observable发送的每1个数据</span></span><br><span class="line">                Log.e(TAG, <span class="string">"合并的数据是： "</span> + aLong1 + <span class="string">" "</span> + aLong2);</span><br><span class="line">                <span class="comment">// 合并的逻辑：相加</span></span><br><span class="line">                <span class="comment">// 即第一个Observable发送的最后一个数据与第二个Observable发送的每个数据相加</span></span><br><span class="line">                <span class="keyword">return</span> aLong1 + aLong2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"合并的结果是： "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>combingLatestDelayError()</code></strong><br>类似<code>concatDelayError()</code>和<code>mergeDelayError()</code>，即错误处理，这里不再多做讲解。</p><p><strong>操作符：<code>reduce()</code></strong><br>作用：将被观察者需要发送的事件聚合成一个事件发送。</p><blockquote><p>聚合的逻辑根据需求编写，但本质都是前两个数据聚合，然后与后一个数据继续进行聚合，依次类推。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        .reduce(<span class="keyword">new</span> BiFunction&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">// 在复写方法中加入聚合逻辑</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">apply</span><span class="params">(Integer integer1, Integer integer2)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"本次计算的数据是： "</span> + integer1 + <span class="string">" 乘 "</span> + integer2);</span><br><span class="line">                <span class="comment">// 本次聚合的逻辑是：全部数据相乘起来</span></span><br><span class="line">                <span class="comment">// 原理：第1次取前2个数据相乘，之后每次获取到的数据 = 返回的数据x原始下1个数据每</span></span><br><span class="line">                <span class="keyword">return</span> integer1 * integer2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"最终计算的结果是： "</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>collect()</code></strong><br>作用：将被观察者<code>Observable</code>发送的数据事件收集到一个数据结构里。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>).collect(</span><br><span class="line">        <span class="comment">// 创建数据结构（容器），用于收集被观察者发送的数据</span></span><br><span class="line">        <span class="keyword">new</span> Callable&lt;ArrayList&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ArrayList&lt;Integer&gt; <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 对发送的数据进行收集</span></span><br><span class="line">        <span class="keyword">new</span> BiConsumer&lt;ArrayList&lt;Integer&gt;, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ArrayList&lt;Integer&gt; integers, Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                integers.add(integer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;ArrayList&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(ArrayList&lt;Integer&gt; integers)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"本次发送的数据是： "</span> + integers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-ab51b84d6a373330.png"><h2 id="3-3-发送事件前追加发送事件"><a href="#3-3-发送事件前追加发送事件" class="headerlink" title="3.3 发送事件前追加发送事件"></a>3.3 发送事件前追加发送事件</h2><p><strong>操作符：<code>startWith()/startWithArray()</code></strong><br>作用：在一个被观察者发送事件之前，追加发送一些数据或者一个新的被观察者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个被观察者发送事件之前，追加发送一些数据</span></span><br><span class="line"><span class="comment">// 注：追加数据顺序为后调用先追加</span></span><br><span class="line">Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">        .startWith(<span class="number">0</span>)</span><br><span class="line">        .startWithArray(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个被观察者发送事件之前，追加发送一个被观察者并发送</span></span><br><span class="line">Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">        .startWith(Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-1fabfa60e8535de2.png"><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-23567e0cd790417c.png"><h2 id="3-4-统计发送事件数量"><a href="#3-4-统计发送事件数量" class="headerlink" title="3.4 统计发送事件数量"></a>3.4 统计发送事件数量</h2><p><strong>操作符：<code>count()</code></strong><br>作用：统计被观察者发送事件的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注：返回结果 = Long类型</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">     .count()</span><br><span class="line">     .subscribe(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">             Log.e(TAG, <span class="string">"发送的事件数量 =  "</span> + aLong);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/15/Android-RxJava：组合-合并操作符/944365-214478680237ffb8.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; title=&quot;1. 作用&quot;&gt;&lt;/a&gt;1. 作用&lt;/h1&gt;&lt;p&gt;组合多个被观察者&lt;code&gt;Observable&lt;/code&gt;，合并需要发送的事件。&lt;/p&gt;
&lt;h1 id=&quot;2-类型&quot;
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：变换操作符</title>
    <link href="https://tylerLiu.top/2019/08/15/Android-RxJava%EF%BC%9A%E5%8F%98%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://tylerLiu.top/2019/08/15/Android-RxJava：变换操作符/</id>
    <published>2019-08-15T03:06:52.000Z</published>
    <updated>2019-08-22T03:14:09.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h1><p>对事件序列中的事件/整个事件序列进行<strong>加工处理</strong>（即变换），使得其转变成不同的事件/整个事件序列。</p><p>基础原理：</p><img src="/2019/08/15/Android-RxJava：变换操作符/微信图片_20190815131846.png"><p>使用变换操作符（针对事件）：</p><img src="/2019/08/15/Android-RxJava：变换操作符/微信图片_20190815132123.png"><p>使用变换操作符（针对事件序列）：</p><img src="/2019/08/15/Android-RxJava：变换操作符/微信图片_20190815132305.png"><h1 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h1><p>常见的变换操作符：</p><ul><li><code>Map()</code></li><li><code>FlatMap()</code></li><li><code>ContactMap()</code></li><li><code>Buffer()</code></li></ul><h1 id="3-详细说明"><a href="#3-详细说明" class="headerlink" title="3. 详细说明"></a>3. 详细说明</h1><h2 id="3-1-Map"><a href="#3-1-Map" class="headerlink" title="3.1 Map()"></a>3.1 Map()</h2><p>作用：对被观察者发送的每个事件都通过<strong>指定函数</strong>处理，从而变成另一个事件。即，<strong>将被观察者发送的事件转换为任意类型的事件</strong>。</p><img src="/2019/08/15/Android-RxJava：变换操作符/944365-a9c0b5eb2cc573d6.png"><p>应用场景：数据类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 被观察者发送事件：整型</span></span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 使用Mapj变换操作符中的Function函数，对被观察者发送的事件进行统一变换，整型变成字符串类型</span></span><br><span class="line">        .map(<span class="keyword">new</span> Function&lt;Integer, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"使用Map变换操作符，将事件"</span> + integer + <span class="string">"的参数从整型"</span> + integer + <span class="string">" 变换成字符串类型"</span> + integer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 被观察者接收事件时，是接收到变换后的事件</span></span><br><span class="line">        Log.i(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="3-2-FlatMap"><a href="#3-2-FlatMap" class="headerlink" title="3.2 FlatMap()"></a>3.2 FlatMap()</h2><p>作用：将被观察者发送的事件序列进行<strong>拆分和单独转换</strong>，再合并成一个新的事件序列，最后再进行发送。</p><p>原理：</p><ol><li>为事件序列中的每个事件都创建一个<code>Observable</code>对象</li><li>将对每个原始事件转换后的新事件都放入到对应的<code>Observable</code>对象</li><li>将新建的每个<code>Observable</code>都合并到一个新建的、总的<code>Observable</code>对象</li><li>新建的、总的<code>Observable</code>对象将新合并的事件序列发送给观察者<code>Observer</code></li></ol><img src="/2019/08/15/Android-RxJava：变换操作符/944365-a6f852c071db2f15.png"><p>应用场景：无序的将被观察者发送的整个事件序列进行变换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 采用flatMap（）变换操作符</span></span><br><span class="line">        .flatMap(<span class="keyword">new</span> Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;String&gt; <span class="title">apply</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                    <span class="comment">// 通过flatMap中将被观察者生成的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件</span></span><br><span class="line">                    <span class="comment">// 最终合并，再发送给被观察者</span></span><br><span class="line">                    list.add(<span class="string">"我是事件 "</span> + integer + <span class="string">"拆分后的子事件"</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Observable.fromIterable(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：新合并的事件序列顺序是无序的，与旧序列发送事件的顺序无关。</p><h2 id="3-3-ContactMap"><a href="#3-3-ContactMap" class="headerlink" title="3.3 ContactMap()"></a>3.3 ContactMap()</h2><p>作用：与<code>FlatMap()</code>类似，区别在于：<strong>拆分及重新合并生成的事件序列的顺序就是被观察者旧序列生产的序列</strong>。</p><img src="/2019/08/15/Android-RxJava：变换操作符/944365-f4340f283e5a954d.png"><p>应用场景：有序的将被观察者发送的整个事件序列进行变换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">// 采用concatMap()变换操作符</span></span><br><span class="line">        .concatMap(<span class="keyword">new</span> Function&lt;Integer, ObservableSource&lt;String&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ObservableSource&lt;String&gt; <span class="title">apply</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    <span class="comment">// 通过concatMap中将被观察者生产的事件序列先进行拆分，再将每个事件转换为一个新的发送三个String事件</span></span><br><span class="line">                    <span class="comment">// 最终合并，再发送给被观察者</span></span><br><span class="line">                    list.add(<span class="string">"我是事件 "</span> + integer + <span class="string">"拆分后的子事件"</span> + i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> Observable.fromIterable(list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Log.d(TAG, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：新合并的事件序列顺序是有序的，即严格按照旧序列发送事件的顺序。</p><h2 id="3-4-Buffer"><a href="#3-4-Buffer" class="headerlink" title="3.4 Buffer()"></a>3.4 Buffer()</h2><p>作用：定期从被观察者<code>Observable</code>需要发送的事件中获取一定数量的事件并放到缓存区中，最终发送。</p><p>原理：</p><img src="/2019/08/15/Android-RxJava：变换操作符/944365-5278a339e4337494.png"><p>应用场景：缓存被观察者发送的事件</p><p><code>Bufer()</code>每次获取多少个事件放到缓存区中呢？下面看一个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被观察者需要发送5个数字</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment">// 设置缓存区大小和步长</span></span><br><span class="line">        <span class="comment">// 缓存区大小：每次从被观察者中获取的事件数量</span></span><br><span class="line">        <span class="comment">// 步长：每次获取新事件的数量</span></span><br><span class="line">        .buffer(<span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;List&lt;Integer&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Integer&gt; stringList)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                Log.d(TAG, <span class="string">" 缓存区里的事件数量 = "</span> + stringList.size());</span><br><span class="line">                <span class="keyword">for</span> (Integer value : stringList) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">" 事件 = "</span> + value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><img src="/2019/08/15/Android-RxJava：变换操作符/944365-f1d4e320b7c62dd9.png"><p>过程解释：</p><img src="/2019/08/15/Android-RxJava：变换操作符/944365-33a49ffd2ec60794.png"><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; title=&quot;1. 作用&quot;&gt;&lt;/a&gt;1. 作用&lt;/h1&gt;&lt;p&gt;对事件序列中的事件/整个事件序列进行&lt;strong&gt;加工处理&lt;/strong&gt;（即变换），使得其转变成不同的事件/整个事
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>香煎土豆片</title>
    <link href="https://tylerLiu.top/2019/08/13/%E9%A6%99%E7%85%8E%E5%9C%9F%E8%B1%86%E7%89%87/"/>
    <id>https://tylerLiu.top/2019/08/13/香煎土豆片/</id>
    <published>2019-08-13T03:11:28.000Z</published>
    <updated>2019-08-13T03:14:07.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h1><p>土豆一个、豆瓣酱一勺、食用盐少许、生抽一勺、白芝麻一勺、孜然粉少许、香菜一根、小葱一根、蒜3瓣</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>土豆削皮洗净，切成均匀的片，不要太薄</li><li>把切好的土豆片放在清水中泡一下，去掉一部分淀粉，热量更低，将泡好的土豆片水沥干，或者用厨房用纸擦去表面的水分</li><li>将蒜、香菜切碎</li><li>锅里放油，把土豆片两面煎黄</li><li>将煎好的土豆片盛出备用</li><li>锅里留少许油，放入辣椒酱、大蒜爆炒出香味</li><li>加入土豆片</li><li>加入生抽、加适量清水焖煮土豆片能使其嫩香、熟透，并且稀释残留淀粉</li><li>最后加入孜然粉、白芝麻，小葱、香菜翻炒均匀</li><li>喜欢吃麻辣的，多加一些辣椒和花椒，鲜香麻辣，非常下饭</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;食材&quot;&gt;&lt;a href=&quot;#食材&quot; class=&quot;headerlink&quot; title=&quot;食材&quot;&gt;&lt;/a&gt;食材&lt;/h1&gt;&lt;p&gt;土豆一个、豆瓣酱一勺、食用盐少许、生抽一勺、白芝麻一勺、孜然粉少许、香菜一根、小葱一根、蒜3瓣&lt;/p&gt;
&lt;h1 id=&quot;步骤&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="美食" scheme="https://tylerLiu.top/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
      <category term="美食" scheme="https://tylerLiu.top/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>绝味手撕鸡</title>
    <link href="https://tylerLiu.top/2019/08/13/%E7%BB%9D%E5%91%B3%E6%89%8B%E6%92%95%E9%B8%A1/"/>
    <id>https://tylerLiu.top/2019/08/13/绝味手撕鸡/</id>
    <published>2019-08-13T03:06:42.000Z</published>
    <updated>2019-08-13T03:10:10.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="食材"><a href="#食材" class="headerlink" title="食材"></a>食材</h1><p>三黄鸡、香菜、小葱、大蒜、生姜、小米椒、麻油、生抽、豉油</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>将生姜切片，小葱洗净打结放入盘底</li><li>鸡清洗干净沥干放上盘，如果能放下整只鸡就不用切块，直接将生姜片和葱结放入鸡肚子就好</li><li>锅里放水，放上蒸架后，将整盘鸡放入锅中蒸30分钟左右</li><li>在蒸制的时候开始准备调料，将小米椒切圈，香菜切碎，蒜姜切末备用</li><li>倒入生抽、豉油、糖、香油，搅拌均匀</li><li>热锅入油，将蒜姜末和辣椒放入锅中煎至飘香</li><li>将煎好的蒜姜辣椒，趁烫倒入调好的酱汁中搅拌均匀</li><li>等鸡蒸好后从锅里拿出，用凉水冲去浮末，之后用厨房纸擦干，开始手撕鸡的过程，最好是连皮带肉地撕</li><li>最后将调好的酱汁，倒入撕好的鸡肉中搅拌均匀，在现有调料的基础上，还可以倒点香醋</li></ol><img src="/2019/08/13/绝味手撕鸡/6994716-e70594833273d29d.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;食材&quot;&gt;&lt;a href=&quot;#食材&quot; class=&quot;headerlink&quot; title=&quot;食材&quot;&gt;&lt;/a&gt;食材&lt;/h1&gt;&lt;p&gt;三黄鸡、香菜、小葱、大蒜、生姜、小米椒、麻油、生抽、豉油&lt;/p&gt;
&lt;h1 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;head
      
    
    </summary>
    
      <category term="美食" scheme="https://tylerLiu.top/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
      <category term="美食" scheme="https://tylerLiu.top/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>芋头焖排骨</title>
    <link href="https://tylerLiu.top/2019/08/13/%E8%8A%8B%E5%A4%B4%E7%84%96%E6%8E%92%E9%AA%A8/"/>
    <id>https://tylerLiu.top/2019/08/13/芋头焖排骨/</id>
    <published>2019-08-13T02:58:22.000Z</published>
    <updated>2019-08-13T03:03:21.745Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/08/13/芋头焖排骨/6994716-994622acd22be768.jpg"><h1 id="1-材料"><a href="#1-材料" class="headerlink" title="1. 材料"></a>1. 材料</h1><p>排骨、芋头、葱、蒜、盐、糖、料酒、酱油、油</p><h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a>2. 步骤</h1><ol><li>排骨切块，加盐、糖、料酒、酱油，腌制1小时。</li></ol><img src="/2019/08/13/芋头焖排骨/6994716-60d5d60ffd4dad40.jpg"><ol start="2"><li>芋头切块，放入炒锅，煎至表面金黄，然后盛起备用。</li></ol><img src="/2019/08/13/芋头焖排骨/6994716-714f0a43ed0ee424.jpg"><ol start="3"><li>热锅入油，加入蒜爆炒，再加入排骨炒至上色，加入清水烧开。</li></ol><img src="/2019/08/13/芋头焖排骨/6994716-4c38d86744a52fe4.jpg"><ol start="4"><li>加入芋头、酱油和盐，焖30分钟。</li><li>大火收汁</li></ol><img src="/2019/08/13/芋头焖排骨/6994716-cb8bf8a4837c8bbe.jpg">]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/08/13/芋头焖排骨/6994716-994622acd22be768.jpg&quot;&gt;

&lt;h1 id=&quot;1-材料&quot;&gt;&lt;a href=&quot;#1-材料&quot; class=&quot;headerlink&quot; title=&quot;1. 材料&quot;&gt;&lt;/a&gt;1. 材料&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="美食" scheme="https://tylerLiu.top/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
      <category term="美食" scheme="https://tylerLiu.top/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：创建操作符</title>
    <link href="https://tylerLiu.top/2019/08/12/Android-RxJava%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://tylerLiu.top/2019/08/12/Android-RxJava：创建操作符/</id>
    <published>2019-08-12T07:40:55.000Z</published>
    <updated>2019-08-15T03:04:22.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h1><p>创建被观察者<code>Observable</code>对象，发送事件。</p><h1 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h1><p>创建操作符包括：</p><img src="/2019/08/12/Android-RxJava：创建操作符/944365-b02adb46075329b0.png"><h1 id="3-介绍及应用场景"><a href="#3-介绍及应用场景" class="headerlink" title="3. 介绍及应用场景"></a>3. 介绍及应用场景</h1><h2 id="3-1-基本创建"><a href="#3-1-基本创建" class="headerlink" title="3.1 基本创建"></a>3.1 基本创建</h2><p><strong>操作符：<code>create()</code></strong><br>场景：完整的创建被观察者对象，<code>RxJava</code>中创建被观察者对象最基本的操作符。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建被观察者Observable对象</span></span><br><span class="line">Observable&lt;Integer&gt; observable1 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// create()是RxJava最基本的创建事件序列的方法</span></span><br><span class="line">    <span class="comment">// 此处传入一个OnSubscribe对象参数</span></span><br><span class="line">    <span class="comment">// 当observable被订阅时，OnSubscribe的call()方法会自动被调用，即事件序列就会按照设定次序依次被触发</span></span><br><span class="line">    <span class="comment">// 即观察者会依次调用对应事件的复写方法从而响应事件</span></span><br><span class="line">    <span class="comment">// 从而实现被观察者调用了观察者的回调方法并由被观察者向观察者的事件传递，即观察者模式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 在复写的subscribe()中定义需要发送的事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 通过ObservableEmitter类对象产生事件并通知观察者</span></span><br><span class="line">        <span class="comment">// ObservableEmitter类介绍：</span></span><br><span class="line">        <span class="comment">// a. 定义：事件发射器</span></span><br><span class="line">        <span class="comment">// b. 作用：定义需要发送的事件，并向观察者发送事件</span></span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>采用链式调用：在<a href>补充示例地址</a>中也可以看到示例。</p><h2 id="3-2-快速创建和发送事件"><a href="#3-2-快速创建和发送事件" class="headerlink" title="3.2 快速创建和发送事件"></a>3.2 快速创建和发送事件</h2><p><strong>操作符：<code>just()</code></strong><br>场景：快速的创建被观察者对象，发送事件的特点为直接发送传入的事件，最多只能发送10个参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建时传入整型1,2,3,4</span></span><br><span class="line"><span class="comment">// 在创建后就会发送这些对象，相当于执行了onNext(1)、onNext(2)、onNext(3)、onNext(4)</span></span><br><span class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        <span class="comment">// 至此，已经创建一个完整的Observable对象</span></span><br><span class="line">        <span class="comment">// 2. 通过通过订阅（subscribe）连接观察者和被观察者</span></span><br><span class="line">        <span class="comment">// 3. 创建观察者，定义响应事件的行为</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>fromArray()</code></strong><br>场景：快速创建被观察者<code>Observable</code>对象，以数组形式发送10个以上的事件，通过数组遍历元素。特点是直接发送传入的数组数据，在数组元素遍历时，会将数组中的数据转成<code>Observable</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 设置需要传入的数组</span></span><br><span class="line">Integer[] items = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">// 2. 创建被观察者对象时传入数组</span></span><br><span class="line"><span class="comment">// 在创建后会将该数组中的元素转成Observable对象，并发送对象中的所有数据</span></span><br><span class="line">Observable.fromArray(items)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">                        Log.d(TAG, <span class="string">"数组遍历"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">                        Log.d(TAG, <span class="string">"数组中的元素 = "</span>+ integer  );</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>fromIterable()</code></strong><br>场景：快速创建被观察者<code>Observable</code>对象，并以集合的形式发送10以上事件。特点是直接发送集合<code>list</code>数据，通过集合元素遍历，会将集合中的数据转成<code>Observable</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 设置一个集合</span></span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="number">0</span>);</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 通过fromIterable()将集合中的对象/数据发送出去</span></span><br><span class="line">Observable.fromIterable(list)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + integer);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>其他方法：以下方法一般用于测试：</p><ul><li><code>empty()</code>：该方法创建的被观察者对象发送事件的特点：仅发送<code>Complete</code>事件，即观察者接收后直接调用<code>onComplete()</code>。</li><li><code>error()</code>：特点是仅发送<code>Error</code>事件，直接通知异常，可以自定义异常，即观察者接收后直接调用<code>onError()</code>。</li><li><code>never()</code>：特点是不发送任何事件，即观察者接收后什么都不调用。</li></ul><h2 id="3-3-延迟创建"><a href="#3-3-延迟创建" class="headerlink" title="3.3 延迟创建"></a>3.3 延迟创建</h2><p><strong>操作符：<code>defer()</code></strong><br>场景：定时操作，在经过x秒后，自动执行y操作；周期性操作，每隔x秒后，自动执行y操作。</p><p>直到有观察者<code>Observer</code>订阅时，才动态创建被观察者对象<code>Observable</code>，并发送事件。</p><ol><li>通过<code>Osbervable</code>工厂方法创建被观察者对象<code>Observable</code></li><li>每次订阅后，都会得到一个刚创建的最新的<code>Observable</code>对象，这可以确保<code>Observable</code>对象里的数据是最新的。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次对i赋值</span></span><br><span class="line">Integer i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dodefer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过defer()定义被观察者对象</span></span><br><span class="line">    <span class="comment">// 注：此时被观察者还未被创建</span></span><br><span class="line">    Observable&lt;Integer&gt; observable = Observable.defer(<span class="keyword">new</span> Callable&lt;ObservableSource&lt;? extends Integer&gt;&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> ObservableSource&lt;? extends Integer&gt; call() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二次对i赋值</span></span><br><span class="line">    i = <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观察者开始订阅</span></span><br><span class="line">    <span class="comment">// 此时，才会调用defer()创建被观察者对象</span></span><br><span class="line">    observable.subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"接收到的整数是"</span> + integer);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为在订阅时<code>Observable</code>才创建，所以<code>i</code>只会取第二次的赋值。</p><p><strong>操作符：<code>timer()</code></strong><br>场景：延迟指定时间，发送一个0，一般用于检测。快速创建一个<code>Observable</code>，特点是延迟指定时间后，发送一个数值0（<code>Long</code>类型），其本质就是延迟指定时间后，调用一次<code>onNext(0)</code>。</p><p>延迟指定事件，发送一个0，一般用于检测。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延迟2秒后，发送一个long类型数值</span></span><br><span class="line">Observable.timer(<span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + aLong);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>interval()</code></strong><br>场景：快速创建一个被观察者对象<code>Observable</code>，发送事件的特点：每隔指定时间就发送事件。发送事件的序列为，从0开始，无限递增1的整数序列。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数说明：</span></span><br><span class="line"><span class="comment">// 参数1：第1次延迟时间</span></span><br><span class="line"><span class="comment">// 参数2：间隔时间数字</span></span><br><span class="line"><span class="comment">// 参数3：时间单位</span></span><br><span class="line">Observable.interval(<span class="number">3</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 该例子发送的事件序列特点：延迟3s后发送事件，每隔1秒产生1个数字（从0开始递增1，无限个）</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 默认最先调用复写的 onSubscribe（）</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + aLong);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>注：<code>interval</code>默认在computation调度器上执行，也可以自定义指定线程调度器（第三个参数）：<code>interval(long, TimeUnit, Scheduler)</code>。</p><p><strong>操作符：<code>intervalRange()</code></strong><br>场景：快速创建一个被观察者对象<code>Observable</code>，发送事件的特点：每隔指定时间就发送事件，可指定发送的数据的数量。发送的事件序列为从0开始，无限递增1的整数序列，作用类似<code>interval()</code>，不同的是<code>intervalRange()</code>可以指定发送数据的数量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数说明：</span></span><br><span class="line"><span class="comment">// 参数1:事件序列起始点</span></span><br><span class="line"><span class="comment">// 参数2:事件数量</span></span><br><span class="line"><span class="comment">// 参数3:第1次事件延迟发送时间</span></span><br><span class="line"><span class="comment">// 参数4:间隔时间数字</span></span><br><span class="line"><span class="comment">// 参数5:时间单位</span></span><br><span class="line">Observable.intervalRange(<span class="number">3</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">        <span class="comment">// 该例子发送的事件序列特点：</span></span><br><span class="line">        <span class="comment">// 1. 从3开始，一共发送10个事件；</span></span><br><span class="line">        <span class="comment">// 2. 第1次延迟2s发送，之后每隔2秒产生1个数字（从0开始递增1，无限个）</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 默认最先调用复写的 onSubscribe（）</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>range()</code></strong><br>场景：快速创建一个被观察者对象<code>Observable</code>，发送事件的特点：连续发送一个事件序列，可指定范围。发送的事件序列为从0开始、无限递增1的的整数序列，作用类似于<code>intervalRange()</code>，区别在于，无延迟发送事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数说明：</span></span><br><span class="line"><span class="comment">// 参数1：事件序列起始点</span></span><br><span class="line"><span class="comment">// 参数2：事件数量</span></span><br><span class="line"><span class="comment">// 注：若设置为负数，则会抛出异常</span></span><br><span class="line">Observable.range(<span class="number">3</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="comment">// 该例子发送的事件序列特点：从3开始发送，每次发送事件递增1，一共发送10个事件</span></span><br><span class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 默认最先调用复写的 onSubscribe（）</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer value)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"接收到了事件"</span> + value);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><strong>操作符：<code>rangeLong()</code></strong><br>场景：作用类似于<code>range()</code>，区别在于该方法支持数据类型<code>Long</code>。使用与<code>range()</code>类似。</p><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Rx" target="_blank" rel="noopener">Allen_Demo_Rx</a></p><img src="/2019/08/12/Android-RxJava：创建操作符/944365-101f852f6f0cd618.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-作用&quot;&gt;&lt;a href=&quot;#1-作用&quot; class=&quot;headerlink&quot; title=&quot;1. 作用&quot;&gt;&lt;/a&gt;1. 作用&lt;/h1&gt;&lt;p&gt;创建被观察者&lt;code&gt;Observable&lt;/code&gt;对象，发送事件。&lt;/p&gt;
&lt;h1 id=&quot;2-类型&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android RxJava：入门</title>
    <link href="https://tylerLiu.top/2019/08/12/Android-RxJava%EF%BC%9A%E5%85%A5%E9%97%A8/"/>
    <id>https://tylerLiu.top/2019/08/12/Android-RxJava：入门/</id>
    <published>2019-08-12T01:43:32.000Z</published>
    <updated>2019-08-12T07:38:50.264Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>RxJava</code>是<strong>基于事件流的链式调用、逻辑简单且使用简单</strong>。</p><p>GitHub链接：</p><ul><li><a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noopener">RxJava</a></li><li><a href="https://github.com/ReactiveX/RxAndroid" target="_blank" rel="noopener">RxAndroid</a></li></ul><ol><li>基于RxJava 2.0</li><li>在xJava 1.0上增加了一些新特性，基本原理和使用基本相同</li><li>后面还会介绍原理、操作符、应用场景、背压等</li></ol><img src="/2019/08/12/Android-RxJava：入门/944365-ecd603e8f8a76fa9.png"><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><p>在GitHub上的介绍：</p><blockquote><p>RxJava – Reactive Extensions for the JVM – a library for composing asynchronous and event-based programs using observable sequences for the Java VM.<br>一个在Java JVM上使用可观测的序列来组成异步的、基于事件的程度的库。</p></blockquote><p>总结：<code>RxJava</code>是<strong>基于事件流、实现异步操作</strong>的库</p><h1 id="2-作用"><a href="#2-作用" class="headerlink" title="2. 作用"></a>2. 作用</h1><p>实现异步操作，类似Andorid中的<code>AsyncTask</code>、<code>Handler</code>的作用。</p><h1 id="3-特点"><a href="#3-特点" class="headerlink" title="3. 特点"></a>3. 特点</h1><p>由于<code>RxJava</code>的使用方式是<strong>基于事件流的链式调用</strong>，所以<code>RxJava</code>：</p><ul><li>逻辑简洁</li><li>实现优雅</li><li>使用简单</li></ul><h1 id="4-原理"><a href="#4-原理" class="headerlink" title="4. 原理"></a>4. 原理</h1><p>顾客到饭店点菜吃饭：</p><img src="/2019/08/12/Android-RxJava：入门/944365-4b85ca4862cd598b.png"><img src="/2019/08/12/Android-RxJava：入门/944365-07f12da4616b2b68.png"><p><code>RxJava</code>原理基于<strong>一种扩展的观察者模式</strong>，其中包含四个角色：</p><table><thead><tr><th align="center">角色</th><th align="center">作用</th><th align="center">类比</th></tr></thead><tbody><tr><td align="center">被观察者<code>Observable</code></td><td align="center">产生事件</td><td align="center">顾客</td></tr><tr><td align="center">观察者<code>Observer</code></td><td align="center">接收事件并给出响应动作</td><td align="center">厨房</td></tr><tr><td align="center">订阅<code>Subscribe</code></td><td align="center">连接被观察者和观察者</td><td align="center">服务员</td></tr><tr><td align="center">事件<code>Event</code></td><td align="center">被观察者和观察者沟通的载体</td><td align="center">菜式</td></tr></tbody></table><img src="/2019/08/12/Android-RxJava：入门/944365-5b6e7c8a3bb55f39.png"><img src="/2019/08/12/Android-RxJava：入门/944365-fc3b7eb5a0ad28d0.png"><p>总结：被观察者<code>Observable</code>通过订阅<code>Subscribe</code><strong>按顺序发送事件<code>Event</code></strong>给观察者<code>Observer</code>，观察者<code>Observer</code><strong>按顺序接收事件</strong>并作出对应的响应。</p><img src="/2019/08/12/Android-RxJava：入门/944365-98ec92df0a4d7e0b.png"><h1 id="5-基本使用"><a href="#5-基本使用" class="headerlink" title="5. 基本使用"></a>5. 基本使用</h1><p>使用方式有两种：</p><ol><li>分步骤实现：该方法主要是为了深入说明<code>RxJava</code>的原理和使用，用于演示</li><li>基于事件流的链式调用，用于实际开发</li></ol><h2 id="5-1-分步骤实现"><a href="#5-1-分步骤实现" class="headerlink" title="5.1 分步骤实现"></a>5.1 分步骤实现</h2><h3 id="5-1-1-使用步骤"><a href="#5-1-1-使用步骤" class="headerlink" title="5.1.1 使用步骤"></a>5.1.1 使用步骤</h3><ol><li>创建被观察者<code>Observable</code>并生产事件，对应顾客进入饭店-坐下-点菜</li><li>创建观察者<code>Observer</code>并定义响应事件的行为，即厨房确定对应菜式</li><li>通过订阅<code>Subscribe</code>连接观察者和被观察者，即顾客找到服务员-服务员下单到厨房-厨房烹制</li></ol><h3 id="5-1-2-步骤详解"><a href="#5-1-2-步骤详解" class="headerlink" title="5.1.2 步骤详解"></a>5.1.2 步骤详解</h3><h4 id="步骤1：创建被观察者Observable并生产事件"><a href="#步骤1：创建被观察者Observable并生产事件" class="headerlink" title="步骤1：创建被观察者Observable并生产事件"></a>步骤1：创建被观察者Observable并生产事件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxJavaActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_rx_java);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 创建被观察者Observable对象</span></span><br><span class="line">        Observable&lt;Integer&gt; observable1 = Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">// create()是RxJava最基本的创建事件序列的方法</span></span><br><span class="line">            <span class="comment">// 此处传入一个OnSubscribe对象参数</span></span><br><span class="line">            <span class="comment">// 当observable被订阅时，OnSubscribe的call()方法会自动被调用，即事件序列就会按照设定次序依次被触发</span></span><br><span class="line">            <span class="comment">// 即观察者会依次调用对应事件的复写方法从而响应事件</span></span><br><span class="line">            <span class="comment">// 从而实现被观察者调用了观察者的回调方法并由被观察者向观察者的事件传递，即观察者模式</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 在复写的subscribe()中定义需要发送的事件</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                <span class="comment">// 通过ObservableEmitter类对象产生事件并通知观察者</span></span><br><span class="line">                <span class="comment">// ObservableEmitter类介绍：</span></span><br><span class="line">                <span class="comment">// a. 定义：事件发射器</span></span><br><span class="line">                <span class="comment">// b. 作用：定义需要发送的事件，并向观察者发送事件</span></span><br><span class="line">                emitter.onNext(<span class="number">1</span>);</span><br><span class="line">                emitter.onNext(<span class="number">2</span>);</span><br><span class="line">                emitter.onNext(<span class="number">3</span>);</span><br><span class="line">                emitter.onComplete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 扩展：RxJava提供了其他方法用于创建被观察者Observable</span></span><br><span class="line">        <span class="comment">// 方法1：just()：直接将传入的参数依次发送出来</span></span><br><span class="line">        Observable observable2 = Observable.just(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line">        <span class="comment">// 将会依次调用：</span></span><br><span class="line">        <span class="comment">// onNext("A");</span></span><br><span class="line">        <span class="comment">// onNext("B");</span></span><br><span class="line">        <span class="comment">// onNext("C");</span></span><br><span class="line">        <span class="comment">// onCompleted();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法2：from(T []) / from(Iterable&lt;? extends T&gt;)：将传入的数组 / Iterable拆分成具体对象后，依次发送出来</span></span><br><span class="line">        String[] words = &#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;;</span><br><span class="line">        Observable observable3 = Observable.fromArray(words);</span><br><span class="line">        <span class="comment">// 将会依次调用：</span></span><br><span class="line">        <span class="comment">// onNext("A");</span></span><br><span class="line">        <span class="comment">// onNext("B");</span></span><br><span class="line">        <span class="comment">// onNext("C");</span></span><br><span class="line">        <span class="comment">// onCompleted();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="步骤2：创建观察者Observer并定义响应事件的行为"><a href="#步骤2：创建观察者Observer并定义响应事件的行为" class="headerlink" title="步骤2：创建观察者Observer并定义响应事件的行为"></a>步骤2：创建观察者Observer并定义响应事件的行为</h4><p>发生的事件类型包括：<code>Next</code>事件、<code>Complete</code>事件、<code>Error</code>事件。</p><ul><li><code>Next</code>：<code>onNext()</code>，普通事件，用于向观察者发送需要响应事件的信号，被观察者可发送无限个<code>Next</code>事件，观察者可以接收无限个<code>Next</code>事件。</li><li><code>Complete</code>：<code>onCompleted()</code>，事件队列完结事件，<code>RxJava</code>把所有事件当做队列处理，标志被观察者不再发送普通事件<code>Next</code>。当被观察者发送一个<code>Complete</code>事件后，被观察者在<code>Complete</code>事件后的事件将会继续发送，但观察者收到<code>Complete</code>之后将不会再接收任何事件；被观察者可以不发送<code>Complete</code>事件。</li><li><code>Error</code>：<code>onError()</code>，事件队列异常事件，标志事件处理过程中出现异常，此时队列自动终止，不允许事件发出。当被观察者发送一个<code>Error</code>事件后，被观察者在<code>Error</code>事件后的事件将会继续发送，但观察者收到<code>Error</code>事件后将不再继续接收任何事件；被观察者可以不发送<code>Error</code>事件。</li><li>在一个正确运行的事件序列中，<code>onCompleted()</code>和<code>onError()</code>互斥，二者只能有一个。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1：采用Observer接口</span></span><br><span class="line"><span class="comment">// 1. 创建观察者Observer对象</span></span><br><span class="line">Observer&lt;Integer&gt; observer1 = <span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 2. 创建对象时通过对应复写对应事件方法 从而 响应对应事件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 观察者接收事件前，默认最先调用复写onSubscribe()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当被观察者生产Next事件，观察者接收到时，会调用该复写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Next事件作出响应"</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当被观察者生产Error事件，观察者接收到时，会调用该复写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当被观察者生产Complete事件，观察者接收到时，会调用该复写方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式2：采用Subscriber抽象类，没有找到，可能已经删除</span></span><br><span class="line"><span class="comment">// Subscriber类是RxJava内置的一个实现了Observer的抽象类，对Observer接口进行了扩展</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建观察者Observer对象</span></span><br><span class="line">Subscriber&lt;Integer&gt; observer2 = <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 2. 创建对象时通过对应复写对应事件方法，从而响应对应事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Next事件作出响应"</span> + integer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>两种方式的对比：<br>相同点：</p><ul><li>使用方式完全一致，实际上，在<code>RxJava</code>的<code>subscribe()</code>中，<code>Observer</code>会先转换成<code>Subscriber</code>后再使用。</li></ul><p>不同点：<code>Subscriber</code>抽象类对<code>Observer</code>接口进行了扩展，新增了两个方法，</p><ul><li><code>onStart()</code>：在还未响应事件前调用，用于做一些初始化操作</li><li><code>unsubscribe()</code>：取消订阅、该方法被调用后，观察者将不再接收和响应事件。调用前，先使用<code>isUnsubscribed()</code>判断状态，确定被观察者<code>Observable</code>是否还持有观察者<code>Subscriber</code>的引用，如果引用不能及时释放，会造成内存泄露。</li></ul><h4 id="步骤3：通过订阅Subscribe连接观察者和被观察者"><a href="#步骤3：通过订阅Subscribe连接观察者和被观察者" class="headerlink" title="步骤3：通过订阅Subscribe连接观察者和被观察者"></a>步骤3：通过订阅Subscribe连接观察者和被观察者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">observable.subscribe(observer);</span><br></pre></td></tr></table></figure><h2 id="5-2-基于事件流的链式调用"><a href="#5-2-基于事件流的链式调用" class="headerlink" title="5.2 基于事件流的链式调用"></a>5.2 基于事件流的链式调用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RxJava的链式操作</span></span><br><span class="line">Observable.create(<span class="keyword">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 1. 创建被观察者，生产事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        emitter.onNext(<span class="number">1</span>);</span><br><span class="line">        emitter.onNext(<span class="number">2</span>);</span><br><span class="line">        emitter.onNext(<span class="number">3</span>);</span><br><span class="line">        emitter.onComplete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">// 2. 通过订阅subscribe连接观察者和被观察者</span></span><br><span class="line">    <span class="comment">// 3. 创建观察者，定义响应事件的行为</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Next事件"</span> + integer + <span class="string">"作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>整体方法调用顺序：<code>观察者.onSubscribe()</code> -&gt; <code>被观察者.subscribe()</code> -&gt; <code>观察者.onNext()</code> -&gt; <code>观察者.onComplete()</code>。</p><p><code>RxJava 2.X</code>提供了多个函数式接口，用于实现观察者模式：</p><img src="/2019/08/12/Android-RxJava：入门/944365-abda1c2bef8681f3.png"><p>以<code>Customer</code>为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"hello"</span>).subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</span><br><span class="line">        <span class="comment">// 每次接收到Observable的事件都会调用Consumer.accept（）</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            Log.d(TAG, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="6-额外说明"><a href="#6-额外说明" class="headerlink" title="6. 额外说明"></a>6. 额外说明</h1><p>使用<code>Disposable.dispose()</code>切断观察者和被观察者之间的连接，即观察者无法继续接收被观察者的事件，但被观察者可以继续发送事件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Observer&lt;Integer&gt; observer = <span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">        <span class="comment">// 定义Disposable</span></span><br><span class="line">        <span class="keyword">private</span> Disposable mDisposable;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Disposable d)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"开始采用subscribe连接"</span>);</span><br><span class="line">            <span class="comment">// 对disposable赋值</span></span><br><span class="line">            mDisposable = d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"对Next事件"</span> + integer + <span class="string">"作出响应"</span>);</span><br><span class="line">            <span class="keyword">if</span> (integer == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 设置在接收到第二个事件后切换观察者和被观察者的连接</span></span><br><span class="line">                mDisposable.dispose();</span><br><span class="line">                Log.d(TAG, <span class="string">"已经切断了连接："</span> + mDisposable.isDisposed());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"对Error事件作出响应"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Log.d(TAG, <span class="string">"对Complete事件作出响应"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;RxJava&lt;/code&gt;是&lt;strong&gt;基于事件流的链式调用、逻辑简单且使用简单&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;GitH
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="RxJava" scheme="https://tylerLiu.top/categories/Android/RxJava/"/>
    
    
      <category term="RxJava" scheme="https://tylerLiu.top/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack：WorkManager</title>
    <link href="https://tylerLiu.top/2019/08/09/Android-Jetpack-WorkManager/"/>
    <id>https://tylerLiu.top/2019/08/09/Android-Jetpack-WorkManager/</id>
    <published>2019-08-09T00:45:17.000Z</published>
    <updated>2019-08-22T03:14:00.492Z</updated>
    
    <content type="html"><![CDATA[<p>这里的数据不是从网络请求获取的，而是从assets目录下的json读取出来的，通常，从文件读取数据不会放在主线程中执行，这里使用了<code>WorkManager</code>，使能够在后台线程进行数据初始化。</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>官方文档：<a href="https://developer.android.google.cn/topic/libraries/architecture/workmanager" target="_blank" rel="noopener">WorkManger</a><br>WorkManger介绍视频：<a href="https://www.bilibili.com/video/av56276889/" target="_blank" rel="noopener">中文官方介绍视频</a></p><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>官方介绍：</p><blockquote><p>The WorkManager API makes it easy to schedule deferrable, asynchronous tasks that are expected to run even if the app exits or device restarts.<br>直译：WorkManager API使调度可延迟的异步任务变得很容易，即使应用程序退出或设备重启，这些任务也会运行。</p></blockquote><h2 id="1-2-选择WorkManager的理由"><a href="#1-2-选择WorkManager的理由" class="headerlink" title="1.2 选择WorkManager的理由"></a>1.2 选择WorkManager的理由</h2><p>Android中处理后台任务的选择很多，如<code>Service</code>、<code>DownloadManager</code>、<code>AlarmManager</code>、<code>JobScheduler</code>等， 为什么还要有<code>WorkManager</code>？</p><ol><li>兼容性更强，可以兼容到API 14</li><li>可以指定约束条件，比如可以选择必须在有网络的条件下执行</li><li>可以定时执行，也可以单次执行</li><li>监听和管理任务状态</li><li>多个任务可以使用任务链</li><li>保证任务执行，如当前执行条件不满足或者APP进程被杀死，它会等到下次条件满足或者APP进行打开后执行</li><li>支持省电模式</li></ol><h2 id="1-3-多线程任务如何选择？"><a href="#1-3-多线程任务如何选择？" class="headerlink" title="1.3 多线程任务如何选择？"></a>1.3 多线程任务如何选择？</h2><p>后台任务会消耗设备的系统资源，若处理不当，可能会造成设备电量的消耗，给用户带来不好的体验。所以，选择正确的后台处理方式很重要，下面是官方给出的选择方式：</p><img src="/2019/08/09/Android-Jetpack-WorkManager/9271486-08aecd36506de3e3.webp"><p>关于后台的的知识，需要补充阅读：<a href="https://juejin.im/post/5b04d064f265da0b80711759#heading-3" target="_blank" rel="noopener">[译]从Service到WorkManager</a>。</p><h1 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2. Demo"></a>2. Demo</h1><p>实现：选取一张图片，做模糊处理，然后显示在头像上。</p><h2 id="2-1-添加依赖"><a href="#2-1-添加依赖" class="headerlink" title="2.1 添加依赖"></a>2.1 添加依赖</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">"androidx.work:work-runtime-ktx:2.2.0-rc01"</span></span><br></pre></td></tr></table></figure><h2 id="2-2-自定义Worker"><a href="#2-2-自定义Worker" class="headerlink" title="2.2 自定义Worker"></a>2.2 自定义Worker</h2><p>自定义<code>worker</code>之前，先看看<code>WorkerManager</code>中几个重要的类：</p><ul><li><code>Worker</code>：需要继承<code>Worker</code>，并复写<code>doWork()</code>方法，在里面写入需要在后台执行的代码</li><li><code>WorkRequest</code>：指后台工作的请求，可以在后台工作的请求中添加约束条件</li><li><code>WorkManager</code>：真正让<code>Worker</code>在后台执行的类</li></ul><p><code>WorkerManager</code>的执行流程：</p><img src="/2019/08/09/Android-Jetpack-WorkManager/9271486-89d8c86a5d8a4395.webp"><ol><li><code>WorkRequest</code>生成以后，<code>Internal TaskExecutor</code>将它存入<code>WorkManager</code>的数据库中，这也是为什么即使在程序退出之后，<code>WorkManager</code>也能保证后台任务在下次启动后条件满足的情况下执行。</li><li>当约束条件满足的情况下，<code>Internal TaskExecutor</code>告诉<code>WorkFactory</code>生成<code>Worker</code>。</li><li>后台执行<code>Worker</code>任务。</li></ol><p>下面自定义一个<code>Worker</code>，目标是生成一张模糊图片，包含：清除之前的缓存路径，、图片模糊处理和图片的生成。将这三个步骤分成三个后台任务，三个后台任务分别涉及到无变量的情况、往外传参数和读取参数三种情况。</p><h3 id="2-2-1-清除缓存路径：无变量情况（通常情况）"><a href="#2-2-1-清除缓存路径：无变量情况（通常情况）" class="headerlink" title="2.2.1 清除缓存路径：无变量情况（通常情况）"></a>2.2.1 清除缓存路径：无变量情况（通常情况）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清理临时文件的Worker</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/9</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CleanUpWorker</span></span>(context: Context, params: WorkerParameters) : Worker(context, params) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        <span class="keyword">this</span>::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        <span class="comment">// Makes a notification when the work starts and slows down the work so that</span></span><br><span class="line">        <span class="comment">// it's easier to see each WorkRequest start, even on emulated devices</span></span><br><span class="line">        makeStatusNotification(<span class="string">"Cleaning up old temporary files"</span>, applicationContext)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sleep()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 删除逻辑</span></span><br><span class="line">            <span class="keyword">val</span> outputDir = File(applicationContext.filesDir, BaseConstant.OUTPUT_PATH)</span><br><span class="line">            <span class="keyword">if</span> (outputDir.exists()) &#123;</span><br><span class="line">                <span class="keyword">val</span> entries = outputDir.listFiles()</span><br><span class="line">                <span class="keyword">if</span> (entries != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (entry <span class="keyword">in</span> entries) &#123;</span><br><span class="line">                        <span class="keyword">val</span> name = entry.name</span><br><span class="line">                        <span class="keyword">if</span> (name.isNotEmpty() &amp;&amp; name.endsWith(<span class="string">".png"</span>)) &#123;</span><br><span class="line">                            <span class="keyword">val</span> deleted = entry.delete()</span><br><span class="line">                            Log.i(TAG, String.format(<span class="string">"Deleted %s - %s"</span>, name, deleted))</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            Result.success()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (exception: Exception) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Error cleaning up"</span>, exception)</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            Result.failure()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-图片模糊处理：往外传参数（输出参数）"><a href="#2-2-2-图片模糊处理：往外传参数（输出参数）" class="headerlink" title="2.2.2 图片模糊处理：往外传参数（输出参数）"></a>2.2.2 图片模糊处理：往外传参数（输出参数）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模糊处理的worker</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlurWorker</span></span>(context: Context, params: WorkerParameters) : Worker(context, params) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> TAG: String = <span class="keyword">this</span>::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        <span class="keyword">val</span> context = applicationContext</span><br><span class="line">        <span class="keyword">val</span> resultUri = inputData.getString(BaseConstant.KEY_IMAGE_URI)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通知开始处理图片</span></span><br><span class="line">        makeStatusNotification(<span class="string">"Blurring image"</span>, context)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 图片处理逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (TextUtils.isEmpty(resultUri)) &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"Invalid input uri"</span>)</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"Invalid input uri"</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> resolver = context.contentResolver</span><br><span class="line">            <span class="keyword">val</span> picture = BitmapFactory.decodeStream(resolver.openInputStream(Uri.parse(resultUri)))</span><br><span class="line">            <span class="comment">// 创建Bitmap文件</span></span><br><span class="line">            <span class="keyword">val</span> output = blurBitmap(picture, context)</span><br><span class="line">            <span class="comment">// 存入路径</span></span><br><span class="line">            <span class="keyword">val</span> outputUri = writeBitmapToFile(context, output)</span><br><span class="line">            <span class="comment">// 输出路径</span></span><br><span class="line">            <span class="keyword">val</span> outputData = workDataOf(BaseConstant.KEY_IMAGE_URI to outputUri.toString())</span><br><span class="line">            makeStatusNotification(<span class="string">"Output is <span class="variable">$outputUri</span>"</span>, context)</span><br><span class="line">            Result.success(outputData)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (throwable: Throwable) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Error applying blur"</span>, throwable)</span><br><span class="line">            Result.failure()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-图片生成：读取参数"><a href="#2-2-3-图片生成：读取参数" class="headerlink" title="2.2.3 图片生成：读取参数"></a>2.2.3 图片生成：读取参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储照片的worker</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveImageToFileWorker</span></span>(context: Context, parameters: WorkerParameters) : Worker(context, parameters) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        SaveImageToFileWorker::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> title = <span class="string">"Blurred Image"</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> dateFormatter = SimpleDateFormat(<span class="string">"yyyy.MM.dd 'at' HH:mm:ss z"</span>, Locale.getDefault())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result &#123;</span><br><span class="line">        <span class="comment">// Makes a notification when the work starts and slows down the work so that</span></span><br><span class="line">        <span class="comment">// it's easier to see each WorkRequest start, even on emulated devices</span></span><br><span class="line">        makeStatusNotification(<span class="string">"Saving image"</span>, applicationContext)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sleep()</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> resolver = applicationContext.contentResolver</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取从外部传入的参数</span></span><br><span class="line">            <span class="keyword">val</span> resourceUri = inputData.getString(BaseConstant.KEY_IMAGE_URI)</span><br><span class="line">            <span class="keyword">val</span> bitmap = BitmapFactory.decodeStream(resolver.openInputStream(Uri.parse(resourceUri)))</span><br><span class="line">            <span class="keyword">val</span> imageUrl = MediaStore.Images.Media.insertImage(resolver, bitmap, title, dateFormatter.format(Date()))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!imageUrl.isNullOrEmpty()) &#123;</span><br><span class="line">                <span class="keyword">val</span> output = workDataOf(BaseConstant.KEY_IMAGE_URI to imageUrl)</span><br><span class="line">                Result.success()</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Log.e(TAG, <span class="string">"Writing to MediaStore failed"</span>)</span><br><span class="line">                Result.failure()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (exception: Exception) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Unable to save image to Gallery"</span>, exception)</span><br><span class="line">            Result.failure()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-创建WorkManager"><a href="#2-3-创建WorkManager" class="headerlink" title="2.3 创建WorkManager"></a>2.3 创建WorkManager</h2><p>在model中单例获取：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userRepository: UserRepository) : ViewModel() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> workManager = WorkManager.getInstance()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-构建WorkRequest"><a href="#2-4-构建WorkRequest" class="headerlink" title="2.4 构建WorkRequest"></a>2.4 构建WorkRequest</h2><p><code>WorkRequest</code>可以分为两类：</p><ul><li><code>PeriodicWorkRequest</code>：Periodic，周期；多次、定时执行任务请求，不支持任务链</li><li><code>OneTimeWorkRequest</code>：只执行一次的任务请求，支持任务链</li></ul><ol><li><p>执行一个任务<br>以<code>OneTimeWorkRequest</code>为例，如果只有一个任务请求：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> request = OneTimeWorkRequest.from(CleanUpWorker::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">workManager.enqueue(request)</span><br></pre></td></tr></table></figure></li><li><p>执行多个任务<br>例子中有三个<code>Worker</code>，并且里面有先后执行的顺序，所以可以使用任务链：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多任务按顺序执行</span></span><br><span class="line">workManager.beginWith(</span><br><span class="line">    mutableListOf(</span><br><span class="line">        OneTimeWorkRequest.from(CleanUpWorker::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">    ))</span><br><span class="line">    .then(OneTimeWorkRequestBuilder&lt;BlurWorker&gt;().setInputData(createInputDataForUri()).build())</span><br><span class="line">    .then(OneTimeWorkRequestBuilder&lt;SaveImageToFileWorker&gt;().build())</span><br><span class="line">    .enqueue()</span><br></pre></td></tr></table></figure></li></ol><p>假设多次点击图片更换头像，提交多次请求，由于网络原因（Demo中没有网络请求部分），最后返回的很可能不是最后一次请求的图片，这显然是有问题的，<code>WorkManager</code>可能满足这样的需求，保证任务的唯一性：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多任务按顺序执行</span></span><br><span class="line">workManager.beginUniqueWork(</span><br><span class="line">    IMAGE_MANIPULATION_WORK_NAME, <span class="comment">// 任务名称</span></span><br><span class="line">    ExistingWorkPolicy.REPLACE, <span class="comment">// 任务相同的执行策略 分为REPLACE，KEEP，APPEND</span></span><br><span class="line">    mutableListOf(</span><br><span class="line">        OneTimeWorkRequest.from(CleanUpWorker::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>) </span></span><br><span class="line">    ))</span><br><span class="line">    .then(OneTimeWorkRequestBuilder&lt;BlurWorker&gt;().setInputData(createInputDataForUri()).build())</span><br><span class="line">    .then(OneTimeWorkRequestBuilder&lt;SaveImageToFileWorker&gt;().build())</span><br><span class="line">    .enqueue()</span><br></pre></td></tr></table></figure><p><strong>无顺序多任务</strong></p><p>如果并行执行没有顺序的多个任务，无论是<code>beginUniqueWork</code>还是<code>beginWith</code>方法都可以接收一个<code>List&lt;OneTimeWorkRequest&gt;</code>。</p><ol start="3"><li>使用约束<br>假设需要将生成的图片上传到服务器，并且需要将图片同时保存到本地，这是就需要设备联网并且由足够的存储空间，这时，就可以给<code>WorkRequest</code>指明约束条件：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建约束条件</span></span><br><span class="line"><span class="keyword">val</span> constraints = Constraints.Builder()</span><br><span class="line">    .setRequiresBatteryNotLow(<span class="literal">true</span>)<span class="comment">// 非电池低电量</span></span><br><span class="line">    .setRequiredNetworkType(NetworkType.CONNECTED)<span class="comment">// 网络连接的情况</span></span><br><span class="line">    .setRequiresStorageNotLow(<span class="literal">true</span>)<span class="comment">// 存储空间充足</span></span><br><span class="line">    .build()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储照片</span></span><br><span class="line"><span class="keyword">val</span> save = OneTimeWorkRequestBuilder&lt;SaveImageToFileWorker&gt;()</span><br><span class="line">    .setConstraints(constraints)</span><br><span class="line">    .addTag(BaseConstant.TAG_OUTPUT)</span><br><span class="line">    .build()</span><br><span class="line">continuation = continuation.then(save)</span><br></pre></td></tr></table></figure></li></ol><p>可以指明的约束条件有：电池电量、充电、网络、存储和延迟等。</p><p>下面是Demo中的具体使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MeModel</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userRepository: UserRepository) : ViewModel() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> imageUri: Uri? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> outPutUri: Uri? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">var</span> outPutWorkInfo: LiveData&lt;List&lt;WorkInfo&gt;&gt;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> workManager = WorkManager.getInstance()</span><br><span class="line">    <span class="keyword">val</span> use = userRepository.findUserById(AppPrefsUtils.getLong(BaseConstant.SP_USER_ID))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        outPutWorkInfo = workManager.getWorkInfosByTagLiveData(BaseConstant.TAG_OUTPUT)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">applyBlur</span><span class="params">(blurLevel: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> continuation = workManager.beginUniqueWork(</span><br><span class="line">            BaseConstant.IMAGE_MANIPULATION_WORK_NAME,</span><br><span class="line">            ExistingWorkPolicy.REPLACE,</span><br><span class="line">            OneTimeWorkRequest.from(CleanUpWorker::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span> until blurLevel) &#123;</span><br><span class="line">            <span class="keyword">val</span> builder = OneTimeWorkRequestBuilder&lt;BlurWorker&gt;()</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                builder.setInputData(createInputDataForUri())</span><br><span class="line">            &#125;</span><br><span class="line">            continuation = continuation.then(builder.build())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建约束条件</span></span><br><span class="line">        <span class="keyword">val</span> constraints = Constraints.Builder()</span><br><span class="line">            .setRequiresBatteryNotLow(<span class="literal">true</span>)<span class="comment">// 非电池低电量</span></span><br><span class="line">            .setRequiredNetworkType(NetworkType.CONNECTED)<span class="comment">// 网络连接的情况</span></span><br><span class="line">            .setRequiresStorageNotLow(<span class="literal">true</span>)<span class="comment">// 存储空间充足</span></span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 存储照片</span></span><br><span class="line">        <span class="keyword">val</span> save = OneTimeWorkRequestBuilder&lt;SaveImageToFileWorker&gt;()</span><br><span class="line">            .setConstraints(constraints)</span><br><span class="line">            .addTag(BaseConstant.TAG_OUTPUT)</span><br><span class="line">            .build()</span><br><span class="line">        continuation = continuation.then(save)</span><br><span class="line"></span><br><span class="line">        continuation.enqueue()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">createInputDataForUri</span><span class="params">()</span></span>: Data &#123;</span><br><span class="line">        <span class="keyword">val</span> builder = Data.Builder()</span><br><span class="line">        imageUri?.let &#123;</span><br><span class="line">            builder.putString(BaseConstant.KEY_IMAGE_URI, imageUri.toString())</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.build()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">uriOrNull</span><span class="params">(uriString: <span class="type">String</span>?)</span></span>: Uri? &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">if</span> (!uriString.isNullOrEmpty()) &#123;</span><br><span class="line">            Uri.parse(uriString)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">setImageUri</span><span class="params">(uri: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        imageUri = uriOrNull(uri)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">setOutputUri</span><span class="params">(uri: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        outPutUri = uriOrNull(uri)</span><br><span class="line">        <span class="keyword">val</span> value = use.value</span><br><span class="line">        value?.headImage = uri!!</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            viewModelScope.launch &#123;</span><br><span class="line">                userRepository.updateUser(value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">cancelWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">        workManager.cancelUniqueWork(BaseConstant.IMAGE_MANIPULATION_WORK_NAME)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-取消任务"><a href="#2-5-取消任务" class="headerlink" title="2.5 取消任务"></a>2.5 取消任务</h2><p>如果要取消任务<code>workManager.cancelAllWork()</code>，如果要取消上面执行的唯一任务，需要上面唯一的任务名：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">cancelWork</span><span class="params">()</span></span> &#123;</span><br><span class="line">    workManager.cancelUniqueWork(BaseConstant.IMAGE_MANIPULATION_WORK_NAME)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-观察任务状态"><a href="#2-6-观察任务状态" class="headerlink" title="2.6 观察任务状态"></a>2.6 观察任务状态</h2><p>任务状态的变化过程：</p><img src="/2019/08/09/Android-Jetpack-WorkManager/9271486-76a29dfd83e152e0.webp"><p>其中，<code>SUCCESS</code>、<code>FAILED</code>、<code>CALCELLED</code>都属于任务已经完成。观察任务状态需要使用到<code>LiveData</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class MeModel(private val userRepository: UserRepository) : ViewModel() &#123;</span><br><span class="line">    private var imageUri: Uri? = null</span><br><span class="line">    private var outPutUri: Uri? = null</span><br><span class="line">    var outPutWorkInfo: LiveData&lt;List&lt;WorkInfo&gt;&gt;</span><br><span class="line">    private val workManager = WorkManager.getInstance()</span><br><span class="line">    val use = userRepository.findUserById(AppPrefsUtils.getLong(BaseConstant.SP_USER_ID))</span><br><span class="line"></span><br><span class="line">    init &#123;</span><br><span class="line">        outPutWorkInfo = workManager.getWorkInfosByTagLiveData(BaseConstant.TAG_OUTPUT)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当图片处理时，程序弹出加载框，图片处理完成，程序会将图片路径保存到<code>User</code>里的<code>headImage</code>并存储到数据库中，任务状态观测参见<code>MeFragment</code>中的<code>onSubscribeUi()</code>中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 我的界面</span><br><span class="line"> *</span><br><span class="line"> * @author Liuyang</span><br><span class="line"> * @date 2019/8/11</span><br><span class="line"> */</span><br><span class="line">class MeFragment : Fragment() &#123;</span><br><span class="line">    private val TAG by lazy &#123; MeFragment::class.java.simpleName &#125;</span><br><span class="line"></span><br><span class="line">    // Model懒加载</span><br><span class="line">    private val meModel: MeModel by viewModels &#123;</span><br><span class="line">        CustomViewModelProvider.providerMeModel(requireContext())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 选择图片的标识</span><br><span class="line">    private val REQUEST_CODE_IMAGE = 100</span><br><span class="line"></span><br><span class="line">    // 加载框</span><br><span class="line">    private val sweetAlertDialog: SweetAlertDialog by lazy &#123;</span><br><span class="line">        SweetAlertDialog(requireContext(), SweetAlertDialog.PROGRESS_TYPE)</span><br><span class="line">            .setTitleText(&quot;头像&quot;)</span><br><span class="line">            .setContentText(&quot;更新中......&quot;)</span><br><span class="line">//            .setCancelButton(&quot;取消&quot;) &#123;</span><br><span class="line">//                meModel.cancelWork()</span><br><span class="line">//                sweetAlertDialog.dismiss()</span><br><span class="line">//            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? &#123;</span><br><span class="line">        val binding: FragmentMeBinding = FragmentMeBinding.inflate(inflater, container, false)</span><br><span class="line">        initListener(binding)</span><br><span class="line">        onSubscribeUi(binding)</span><br><span class="line">        return binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化监听器</span><br><span class="line">     */</span><br><span class="line">    private fun initListener(binding: FragmentMeBinding) &#123;</span><br><span class="line">        binding.ivHead.setOnClickListener &#123;</span><br><span class="line">            // 选择处理的图片</span><br><span class="line">            val chooseIntent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)</span><br><span class="line">            startActivityForResult(chooseIntent, REQUEST_CODE_IMAGE)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * binding绑定</span><br><span class="line">     */</span><br><span class="line">    private fun onSubscribeUi(binding: FragmentMeBinding) &#123;</span><br><span class="line">        meModel.use.observe(this, Observer &#123;</span><br><span class="line">            binding.user = it</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        // 任务状态的监测</span><br><span class="line">        meModel.outPutWorkInfo.observe(this, Observer &#123;</span><br><span class="line">            if (it.isNullOrEmpty())</span><br><span class="line">                return@Observer</span><br><span class="line"></span><br><span class="line">            val state = it[0]</span><br><span class="line">            if (state.state.isFinished) &#123;</span><br><span class="line">                // 更新头像</span><br><span class="line">                val outputImageUri = state.outputData.getString(BaseConstant.KEY_IMAGE_URI)</span><br><span class="line">                if (!outputImageUri.isNullOrEmpty()) &#123;</span><br><span class="line">                    meModel.setOutputUri(outputImageUri)</span><br><span class="line">                &#125;</span><br><span class="line">                sweetAlertDialog.dismiss()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 图片选择完成的回调</span><br><span class="line">     */</span><br><span class="line">    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) &#123;</span><br><span class="line">        if (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">            when (requestCode) &#123;</span><br><span class="line">                REQUEST_CODE_IMAGE -&gt; data?.let &#123;</span><br><span class="line">                    handleImageRequestResult(data)</span><br><span class="line">                &#125;</span><br><span class="line">                else -&gt; Log.d(TAG, &quot;Unknown request code.&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            Log.e(TAG, String.format(&quot;Unexpected Result code %s&quot;, resultCode))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 图片处理</span><br><span class="line">     */</span><br><span class="line">    private fun handleImageRequestResult(data: Intent) &#123;</span><br><span class="line">        val imageUri: Uri? = data.clipData?.let &#123;</span><br><span class="line">            it.getItemAt(0).uri</span><br><span class="line">        &#125; ?: data.data</span><br><span class="line"></span><br><span class="line">        if (imageUri == null) &#123;</span><br><span class="line">            Log.e(TAG, &quot;Invalid input image Uri.&quot;)</span><br><span class="line">            return</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sweetAlertDialog.dismiss()</span><br><span class="line"></span><br><span class="line">        // 图片模糊处理</span><br><span class="line">        meModel.setImageUri(imageUri.toString())</span><br><span class="line">        meModel.applyBlur(3)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h1><p><strong>选择适合的Worker</strong></p><p>谷歌提供了四种<code>Worker</code>：</p><ul><li>自动运行在后台线程的<code>Worker</code></li><li>结合协程的<code>CoroutineWorker</code></li><li>结合RxJava的<code>RxWorker</code></li><li>以上三个类的基类<code>ListenableWorker</code></li></ul><p>这里以<code>CoroutineWorker</code>为例，简单介绍，使用<code>ShoeWorker</code>从文中读取鞋子的数据并完成数据库的插入工作：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeWorker</span></span>(context: Context, workerParameters: WorkerParameters) : CoroutineWorker(context, workerParameters) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        ShoeWorker::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定Dispatchers</span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> coroutineContext: CoroutineDispatcher</span><br><span class="line">        <span class="keyword">get</span>() = Dispatchers.IO</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">doWork</span><span class="params">()</span></span>: Result = coroutineScope &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            applicationContext.assets.<span class="keyword">open</span>(<span class="string">"shoes.json"</span>).use &#123;</span><br><span class="line">                JsonReader(it.reader()).use &#123;</span><br><span class="line">                    <span class="keyword">val</span> shoeType = <span class="keyword">object</span> : TypeToken&lt;List&lt;Shoe&gt;&gt;() &#123;&#125;.type</span><br><span class="line">                    <span class="keyword">val</span> shoeList: List&lt;Shoe&gt; = Gson().fromJson(it, shoeType)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">val</span> shoeDao = RepositoryProvider.providerShoeRepository(applicationContext)</span><br><span class="line">                    shoeDao.insertShoes(shoeList)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (shoe <span class="keyword">in</span> shoeList) &#123;</span><br><span class="line">                            shoe.id += shoeList.size</span><br><span class="line">                        &#125;</span><br><span class="line">                        shoeDao.insertShoes(shoeList)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    Result.success()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">"Error seeding database"</span>, e)</span><br><span class="line">            Result.failure()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>延伸：<br><a href="https://juejin.im/post/5b37620be51d4558b4668210" target="_blank" rel="noopener">Android Jetpack - 使用 WorkManager 管理后台任务</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里的数据不是从网络请求获取的，而是从assets目录下的json读取出来的，通常，从文件读取数据不会放在主线程中执行，这里使用了&lt;code&gt;WorkManager&lt;/code&gt;，使能够在后台线程进行数据初始化。&lt;/p&gt;
&lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://tylerLiu.top/categories/Android/Jetpack/"/>
    
    
      <category term="Jetpack" scheme="https://tylerLiu.top/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>你的儿女</title>
    <link href="https://tylerLiu.top/2019/08/08/%E4%BD%A0%E7%9A%84%E5%84%BF%E5%A5%B3/"/>
    <id>https://tylerLiu.top/2019/08/08/你的儿女/</id>
    <published>2019-08-08T06:22:49.000Z</published>
    <updated>2019-08-08T06:27:27.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你的儿女"><a href="#你的儿女" class="headerlink" title="你的儿女"></a>你的儿女</h1><pre><code>———— 纪伯伦（Khalil Gibran）</code></pre><p>Your children are not your children.<br>你的子女，其实不是你的子女。</p><p>They are the sons and daughters of Life’s longing for itself.<br>他们是生命对于自身渴望而诞生的孩子。</p><p>They come through you but not from you,<br>他们借助你来到这个世界，却非因你而来，</p><p>And though they are with you, yet they belong not to you.<br>他们陪伴你，却并不属于你。</p><p>You may give them your love but not your thoughts,<br>你可以给予他们你的爱，却不是你的想法，</p><p>For they have their own thoughts.<br>因为他们有自己的思想。</p><p>You may house their bodies but not their souls,<br>你可以庇护的是他们的身体，却不是他们的灵魂，</p><p>For their souls dwell in the house of tomorrow, which you cannot visit, not even in your dreams.<br>因为他们的灵魂属于明天，属于你在梦境中也无法达到的明天。</p><p>You may strive to be like them, but seek not to make them like you,<br>你可以拼尽全力，变得像他们一样，却不要让他们变得和你一样，</p><p>For life goes not backward nor tarries with yesterday.<br>因为生命不会后退，也不在过去停留。</p><p>You are the bows from which your children as living arrows are sent forth.<br>你是弓，儿女是从你那里射出的箭。</p><p>The archer sees the mark upon the path of the infinite,<br>弓箭手遥望未来之路上的箭靶，</p><p>and He bends you with His might that His arrows may go swift and far.<br>用尽力气将你拉开，使箭射得又快又远。</p><p>Let your bending in the archer’s hand be for gladness,<br>怀着快乐的心情，在弓箭手的手中弯曲吧，</p><p>For even as he loves the arrow that flies, so He loves also the bow that is stable.<br>因为他爱一路飞翔的箭，也爱无比稳定的弓。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你的儿女&quot;&gt;&lt;a href=&quot;#你的儿女&quot; class=&quot;headerlink&quot; title=&quot;你的儿女&quot;&gt;&lt;/a&gt;你的儿女&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;———— 纪伯伦（Khalil Gibran）&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your children a
      
    
    </summary>
    
      <category term="美文" scheme="https://tylerLiu.top/categories/%E7%BE%8E%E6%96%87/"/>
    
    
      <category term="美文" scheme="https://tylerLiu.top/tags/%E7%BE%8E%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack：Paging</title>
    <link href="https://tylerLiu.top/2019/08/05/Android-Jetpack-Paging/"/>
    <id>https://tylerLiu.top/2019/08/05/Android-Jetpack-Paging/</id>
    <published>2019-08-05T08:43:24.000Z</published>
    <updated>2019-08-22T03:13:38.094Z</updated>
    
    <content type="html"><![CDATA[<p>在遇到<code>RecyclerView</code>加载大量数据的情况，如果是在数据库请求，需要消耗数据库资源并且需要花费较多的时间，同意，如果是发送网络请求，则需要消耗宽带和更多的时间，无论哪种情形，对于用户的体验都是糟糕的。这时，可以采用分段加载来缩短时间，给带来良好的体验，目前，对于加载大量数据的处理方式有两种：</p><ol><li>借助刷新控件来实现用户手动请求数据</li><li>数据达到边界自动请求加载</li></ol><p>谷歌的Android Jetpack也实现了自己的分页库——<code>Paging</code>。</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>官方文档：<a href="https://developer.android.google.cn/topic/libraries/architecture/paging/" target="_blank" rel="noopener">Paging</a><br>官方Demo：<a href="https://github.com/googlesamples/android-architecture-components/tree/master/PagingWithNetworkSample" target="_blank" rel="noopener">网络方式</a>，<a href="https://github.com/googlesamples/android-architecture-components/tree/master/PagingSample" target="_blank" rel="noopener">数据库方式</a></p><p>官方介绍：</p><blockquote><p>The Paging Library helps you load and display small chunks of data at a time. Loading partial data on demand reduces usage of network bandwidth and system resources.<br>直译：分页库帮助您每次加载和显示小块数据。按需加载部分数据会减少网络带宽和系统资源的使用。</p></blockquote><p><code>Paging</code>架构：</p><img src="/2019/08/05/Android-Jetpack-Paging/9271486-9e49790f92f2ff1f.png"><ul><li><code>PagedList</code>：一个可以以分页形式异步加载数据的容器，可以跟<code>RecyclerView</code>结合</li><li><code>DataSource</code>或<code>DataSource.Factory</code>：数据源，<code>DataSource</code>将数据转变成<code>PagedList</code>，<code>DataSource.Factory</code>则用来创建<code>DataSource</code></li><li><code>LivePagedListBuilder</code>：用来生成<code>LiveData&lt;PagedList&gt;</code>，需要<code>DataSource.Factory</code>参数</li><li><code>BoundaryCallback</code>：数据达到边界的回调</li><li><code>PagedListAdapter</code>：一种<code>RecyclerView</code>适配器</li></ul><p>优点：</p><ol><li><code>RxJava</code>以及Android Jetpack的支持，如<code>LiveData</code>、<code>Room</code>等</li><li>自定义分页策略</li><li>异步处理数据</li><li>结合<code>RecyclerView</code>等</li></ol><h1 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2. Demo"></a>2. Demo</h1><h2 id="2-1-添加依赖："><a href="#2-1-添加依赖：" class="headerlink" title="2.1 添加依赖："></a>2.1 添加依赖：</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// paging</span></span><br><span class="line">    implementation <span class="string">"androidx.paging:paging-runtime:2.1.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-创建数据源"><a href="#2-2-创建数据源" class="headerlink" title="2.2 创建数据源"></a>2.2 创建数据源</h2><ol><li>非<code>Room</code>数据库<br>如果没有使用<code>Room</code>数据库，就需要自定义实现<code>DataSource</code>，通常实现<code>DataSource</code>有三种方式，分别继承三种抽象类，它们分别是：</li></ol><table><thead><tr><th align="left">名称</th><th align="left">使用场景</th></tr></thead><tbody><tr><td align="left"><code>PageKeyedDataSource&lt;Key, Value&gt;</code></td><td align="left">分页请求数据的场景</td></tr><tr><td align="left"><code>ItemKeyedDataSource&lt;Key, Value&gt;</code></td><td align="left">以表的某个列为Key，加载其后的N个数据</td></tr><tr><td align="left"><code>PositionalDataSource&lt;T&gt;</code></td><td align="left">当数据源总数特定，根据指定位置请求数据的场景</td></tr></tbody></table><p>这里以<code>PageKeyedDataSource&lt;Key, Value&gt;</code>为例，虽然这里的数据库使用的是<code>Room</code>，但查询数据以返回<code>List</code>代表着通常数据库的使用方式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.repository</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeRepository</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> shoeDao: ShoeDao) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getPageShoes</span><span class="params">(startIndex: <span class="type">Long</span>, endIndex: <span class="type">Long</span>)</span></span>: List&lt;Shoe&gt; = shoeDao.findShoesByIndexRange(startIndex, endIndex)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.datasource</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log</span><br><span class="line"><span class="keyword">import</span> androidx.paging.PageKeyedDataSource</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.common.BaseConstant</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.Shoe</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.repository.ShoeRepository</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义PageKeyedDataSource</span></span><br><span class="line"><span class="comment"> * 演示Paging库的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPageDataSource</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> shoeRepository: ShoeRepository) : PageKeyedDataSource&lt;<span class="built_in">Int</span>, Shoe&gt;() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> TAG: String <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        <span class="keyword">this</span>::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>.<span class="title">simpleName</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第一次加载时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadInitial</span><span class="params">(params: <span class="type">LoadInitialParams</span>&lt;<span class="type">Int</span>&gt;, callback: <span class="type">LoadInitialCallback</span>&lt;<span class="type">Int</span>, Shoe&gt;)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> startIndex = <span class="number">0L</span></span><br><span class="line">        <span class="keyword">val</span> endIndex: <span class="built_in">Long</span> = <span class="number">0L</span> + params.requestedLoadSize</span><br><span class="line">        <span class="keyword">val</span> shoe = shoeRepository.getPageShoes(startIndex, endIndex)</span><br><span class="line"></span><br><span class="line">        callback.onResult(shoe, <span class="literal">null</span>, <span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次分页加载时调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadAfter</span><span class="params">(params: <span class="type">LoadParams</span>&lt;<span class="type">Int</span>&gt;, callback: <span class="type">LoadCallback</span>&lt;<span class="type">Int</span>, Shoe&gt;)</span></span> &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"startPage:<span class="subst">$&#123;params.key&#125;</span>, size:<span class="subst">$&#123;params.requestedLoadSize&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> startPage = params.key</span><br><span class="line">        <span class="keyword">val</span> startIndex = ((startPage - <span class="number">1</span>) * BaseConstant.SINGLE_PAGE_SIZE).toLong() + <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> endIndex = startIndex + params.requestedLoadSize - <span class="number">1</span></span><br><span class="line">        <span class="keyword">val</span> shoes = shoeRepository.getPageShoes(startIndex, endIndex)</span><br><span class="line"></span><br><span class="line">        callback.onResult(shoes, params.key + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">loadBefore</span><span class="params">(params: <span class="type">LoadParams</span>&lt;<span class="type">Int</span>&gt;, callback: <span class="type">LoadCallback</span>&lt;<span class="type">Int</span>, Shoe&gt;)</span></span> &#123;</span><br><span class="line">        Log.e(TAG, <span class="string">"endPage:<span class="subst">$&#123;params.key&#125;</span>, size:<span class="subst">$&#123;params.requestedLoadSize&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> endPage = params.key</span><br><span class="line">        <span class="keyword">val</span> endIndex = ((endPage - <span class="number">1</span>) * BaseConstant.SINGLE_PAGE_SIZE).toLong() + <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> startIndex = endIndex - params.requestedLoadSize</span><br><span class="line">        startIndex = <span class="keyword">if</span> (startIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="number">0L</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            startIndex</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> shoe = shoeRepository.getPageShoes(startIndex, endIndex)</span><br><span class="line"></span><br><span class="line">        callback.onResult(shoe, params.key + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>DataSource</code>创建好了，再创建一个<code>DataSource.Factory</code>，返回对应的<code>DataSource</code>实例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.datasource</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.paging.DataSource</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.Shoe</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.repository.ShoeRepository</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建CustomPageDataSource的工厂类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomPageDataSourceFactory</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> shoeRepository: ShoeRepository) : DataSource.Factory&lt;<span class="built_in">Int</span>, Shoe&gt;() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">create</span><span class="params">()</span></span>: DataSource&lt;<span class="built_in">Int</span>, Shoe&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> CustomPageDataSource(shoeRepository)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Room</code>数据库<br>如果使用<code>Room</code>与<code>Paging</code>结合使用，可以直接在<code>Room</code>的<code>Dao</code>层使用：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShoeDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllShoesLD</span><span class="params">()</span></span>: DataSource.Factory&lt;<span class="built_in">Int</span>, Shoe&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>使用起来简单很多。</p><h2 id="2-3-构建LiveData-lt-PagedList-gt"><a href="#2-3-构建LiveData-lt-PagedList-gt" class="headerlink" title="2.3 构建LiveData &lt;PagedList&gt;"></a>2.3 构建LiveData &lt;PagedList&gt;</h2><p>要想获得<code>LiveData&lt;PagedList&gt;</code>，需要先创建<code>LivePagedListBuilder</code>，<code>LivePagedListbuilder</code>有设分页数量和配置参数两种构造方法，设置分页数量比较简单，直接查看API即可，下面看看配置参数使用：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeModel</span> <span class="keyword">constructor</span></span>(repository: ShoeRepository) : ViewModel() &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鞋子集合的观察类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> shoes: LiveData&lt;PagedList&lt;Shoe&gt;&gt; = LivePagedListBuilder&lt;<span class="built_in">Int</span>, Shoe&gt;(</span><br><span class="line">        CustomPageDataSourceFactory(repository),</span><br><span class="line">        PagedList.Config.Builder()</span><br><span class="line">            .setPageSize(<span class="number">10</span>)</span><br><span class="line">            .setEnablePlaceholders(<span class="literal">false</span>)</span><br><span class="line">            .setInitialLoadSizeHint(<span class="number">10</span>)</span><br><span class="line">            .build()</span><br><span class="line">    ).build()</span><br></pre></td></tr></table></figure><h2 id="2-4-创建PagedListAdapter"><a href="#2-4-创建PagedListAdapter" class="headerlink" title="2.4 创建PagedListAdapter"></a>2.4 创建PagedListAdapter</h2><p><code>PagedListAdapter</code>是一个特殊的<code>RecyclerView</code>的<code>RecyclerAdapter</code>，使用方法类似，这里使用Data Binding：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.ui.adapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> androidx.paging.PagedListAdapter</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.common.BaseConstant</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.databinding.ItemShoeBinding</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.Shoe</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.ui.activity.DetailActivity</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鞋子的适配器，配合Data Binding使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeAdapter</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> context: Context) :</span><br><span class="line">    PagedListAdapter&lt;Shoe, ShoeAdapter.ViewHolder&gt;(ShoeDiffCallback()) &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class="line">        <span class="keyword">return</span> ViewHolder(ItemShoeBinding.inflate(LayoutInflater.from(parent.context), parent, <span class="literal">false</span>))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> shoe = getItem(position)</span><br><span class="line">        holder.apply &#123;</span><br><span class="line">            bind(onCreateListener(shoe!!.id), shoe)</span><br><span class="line">            itemView.tag = shoe</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Holder的点击事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateListener</span><span class="params">(id: <span class="type">Long</span>)</span></span>: View.OnClickListener &#123;</span><br><span class="line">        <span class="keyword">return</span> View.OnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> intent = Intent(context, DetailActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            intent.putExtra(BaseConstant.DETAIL_SHOE_ID, id)</span><br><span class="line">            context.startActivity(intent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> binding: ItemShoeBinding) : RecyclerView.ViewHolder(binding.root) &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(listener: <span class="type">View</span>.<span class="type">OnClickListener</span>, item: <span class="type">Shoe</span>)</span></span> &#123;</span><br><span class="line">            binding.apply &#123;</span><br><span class="line">                <span class="keyword">this</span>.listener = listener</span><br><span class="line">                <span class="keyword">this</span>.shoe = item</span><br><span class="line">                executePendingBindings()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.ui.adapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.DiffUtil</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.Shoe</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeDiffCallback</span> : <span class="type">DiffUtil.ItemCallback</span>&lt;<span class="type">Shoe</span>&gt;</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">areItemsTheSame</span><span class="params">(oldItem: <span class="type">Shoe</span>, newItem: <span class="type">Shoe</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> oldItem.id == newItem.id</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">areContentsTheSame</span><span class="params">(oldItem: <span class="type">Shoe</span>, newItem: <span class="type">Shoe</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> oldItem == newItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-监听数据"><a href="#2-5-监听数据" class="headerlink" title="2.5 监听数据"></a>2.5 监听数据</h2><p>同样使用Data Binding，<code>ShoeFragment</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.ui.fragment.main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.viewModels</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.Observer</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProviders</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.databinding.FragmentShoeBinding</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.ui.adapter.ShoeAdapter</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.CustomViewModelProvider</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.ShoeModel</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鞋子的Fragment</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="comment">// by viewModels 需要依赖 "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel: ShoeModel <span class="keyword">by</span> viewModels &#123;</span><br><span class="line">        CustomViewModelProvider.providerShoeModel(requireContext())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">val</span> binding: FragmentShoeBinding = FragmentShoeBinding.inflate(inflater, container, <span class="literal">false</span>)</span><br><span class="line">        context ?: <span class="keyword">return</span> binding.root</span><br><span class="line">        <span class="comment">// 适配器</span></span><br><span class="line">        <span class="keyword">val</span> adapter = ShoeAdapter(context!!)</span><br><span class="line">        binding.recycler.adapter = adapter</span><br><span class="line">        onSubscribeUi(adapter)</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鞋子数据更新的通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSubscribeUi</span><span class="params">(adapter: <span class="type">ShoeAdapter</span>)</span></span> &#123;</span><br><span class="line">        viewModel.shoes.observe(viewLifecycleOwner, Observer &#123;</span><br><span class="line">            <span class="keyword">if</span> (it != <span class="literal">null</span>) &#123;</span><br><span class="line">                adapter.submitList(it)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在遇到&lt;code&gt;RecyclerView&lt;/code&gt;加载大量数据的情况，如果是在数据库请求，需要消耗数据库资源并且需要花费较多的时间，同意，如果是发送网络请求，则需要消耗宽带和更多的时间，无论哪种情形，对于用户的体验都是糟糕的。这时，可以采用分段加载来缩短时间，给带来良
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://tylerLiu.top/categories/Android/Jetpack/"/>
    
    
      <category term="Jetpack" scheme="https://tylerLiu.top/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack：Room</title>
    <link href="https://tylerLiu.top/2019/08/05/Android-Jetpack-Room/"/>
    <id>https://tylerLiu.top/2019/08/05/Android-Jetpack-Room/</id>
    <published>2019-08-05T03:27:04.000Z</published>
    <updated>2019-08-22T03:13:47.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>官方网址：<a href="https://developer.android.google.cn/topic/libraries/architecture/room" target="_blank" rel="noopener">Room</a></p><p>官方介绍：</p><blockquote><p>The Room persistence library provides an abstraction layer over SQLite to allow for more robust database access while harnessing the full power of SQLite.</p></blockquote><p>简单来说，Room是一个基于SQLite的强大数据库框架。</p><p>优点：</p><ol><li>使用编译时注解，能够对<code>@Query</code>和<code>@Entity</code>里面的SQL语句进行验证</li><li>与SQL语句的使用更加贴近，能够降低学习成本</li><li>对RxJava2支持，对<code>LiveData</code>支持</li><li><code>@Embedded</code>能减少表的创建</li></ol><h1 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2. Demo"></a>2. Demo</h1><p>目标结构：</p><img src="/2019/08/05/Android-Jetpack-Room/1564982411.jpg"><p>三张表：用户表、鞋表和收藏记录表，用户表和鞋表存在多对多的关系。</p><h2 id="2-1-步骤1：添加依赖"><a href="#2-1-步骤1：添加依赖" class="headerlink" title="2.1 步骤1：添加依赖"></a>2.1 步骤1：添加依赖</h2><p>在model的<code>build.gradel</code>添加：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'kotlin-kapt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// room</span></span><br><span class="line">    implementation <span class="string">"androidx.room:room-runtime:2.2.0-alpha01"</span></span><br><span class="line">    implementation <span class="string">"androidx.room:room-ktx:2.2.0-alpha01"</span></span><br><span class="line">    kapt <span class="string">"androidx.room:room-compiler:2.2.0-alpha01"</span></span><br><span class="line">    androidTestImplementation <span class="string">"androidx.room:room-testing:2.2.0-alpha01"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-步骤2：创建表（实体）"><a href="#2-2-步骤2：创建表（实体）" class="headerlink" title="2.2 步骤2：创建表（实体）"></a>2.2 步骤2：创建表（实体）</h2><p>用户表：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.location.Address</span><br><span class="line"><span class="keyword">import</span> androidx.room.*</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity(tableName = <span class="meta-string">"user"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(</span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"user_account"</span>)</span> <span class="keyword">val</span> account: String,<span class="comment">// 账号</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"user_pwd"</span>)</span> <span class="keyword">val</span> pwd: String,<span class="comment">// 摩玛</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"user_name"</span>)</span> <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="meta">@Embedded</span> <span class="keyword">val</span> address: Address,<span class="comment">// 地址</span></span><br><span class="line">    <span class="meta">@Ignore</span> <span class="keyword">val</span> state: <span class="built_in">Int</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@PrimaryKey(autoGenerate = true)</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收藏记录表：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.room.ColumnInfo</span><br><span class="line"><span class="keyword">import</span> androidx.room.Entity</span><br><span class="line"><span class="keyword">import</span> androidx.room.ForeignKey</span><br><span class="line"><span class="keyword">import</span> androidx.room.PrimaryKey</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 喜欢的鞋 表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity(</span></span><br><span class="line"><span class="meta">    tableName = <span class="meta-string">"fav_shoe"</span>,</span></span><br><span class="line"><span class="meta">    foreignKeys = [ForeignKey(entity = Shoe::class, parentColumns = [<span class="meta-string">"id"</span>], childColumns = [<span class="meta-string">"shoe_id"</span>])</span>,</span><br><span class="line">        ForeignKey(entity = User::<span class="class"><span class="keyword">class</span>, <span class="type">parentColumns = ["id"]</span>, <span class="type">childColumns = ["user_id"])]</span></span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">FavouriteShoe</span></span>(</span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"shoe_id"</span>)</span> <span class="keyword">val</span> shoeId: <span class="built_in">Long</span>,<span class="comment">// 外键 鞋子的id</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"user_id"</span>)</span> <span class="keyword">val</span> userId: <span class="built_in">Long</span>,<span class="comment">// 外键 用户的id</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"fav_date"</span>)</span> <span class="keyword">val</span> date: Date<span class="comment">// 创建日期</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@PrimaryKey(autoGenerate = true)</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于其中注解的解释：</p><ul><li><code>@Entity</code>：声明这是一个表（实体），主要参数：<code>tableName</code>表名、<code>foreignKeys</code>外键、<code>indices</code>索引</li><li><code>ColumnInfo</code>：主要用来修改在数据库中的字段名</li><li><code>PrimaryKey</code>：声明该字段为主键，可以声明是否自动创建</li><li><code>Ignore</code>：声明某个字段只是临时用，不存储在数据库中</li><li><code>Embedded</code>：用于嵌套，里面的字段同样会存储在数据库中</li></ul><p>最后一个，在<code>User</code>表中有一个变量<code>address</code>，它是一个<code>Address</code>类：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span></span>(</span><br><span class="line">    <span class="keyword">val</span> street: String, <span class="keyword">val</span> state: String, <span class="keyword">val</span> city: String, <span class="keyword">val</span> postCode: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>通常，如果想这些字段存储在数据库中，有两种方法：</p><ol><li>重新创建一个表，进行一对一的关联，但是多创建一个表显得麻烦</li><li>在用户表中增加字段，但是这样映射出来的对象显得 不面向对象</li></ol><p><code>@Embedded</code>就是为了解决上面你的第2个问题，即不多创建一个表，又能将数据库中映射的对象看上去面向对象。</p><p><code>Shoe</code>表：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.<span class="keyword">data</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.room.ColumnInfo</span><br><span class="line"><span class="keyword">import</span> androidx.room.Entity</span><br><span class="line"><span class="keyword">import</span> androidx.room.PrimaryKey</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鞋子表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Entity(tableName = <span class="meta-string">"shoe"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Shoe</span></span>(</span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"shoe_name"</span>)</span> <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"shoe_description"</span>)</span> <span class="keyword">val</span> description: String,</span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"shoe_price"</span>)</span> <span class="keyword">val</span> price: <span class="built_in">Float</span>,</span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"shoe_brand"</span>)</span> <span class="keyword">val</span> brand: String,</span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"shoe_imgUrl"</span>)</span> <span class="keyword">val</span> imgUrl: String</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@PrimaryKey(autoGenerate = true)</span></span><br><span class="line">    <span class="meta">@ColumnInfo(name = <span class="meta-string">"id"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span> = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-步骤3：创建Dao"><a href="#2-3-步骤3：创建Dao" class="headerlink" title="2.3 步骤3：创建Dao"></a>2.3 步骤3：创建Dao</h2><p>数据处理的方法，就是数据的增删改查。在抽象类或接口加一个<code>@Dao</code>注解即可。</p><h3 id="2-3-1-增"><a href="#2-3-1-增" class="headerlink" title="2.3.1 增"></a>2.3.1 增</h3><p><code>@Insert</code>注解，声明当前的方法为新增的方法，并且可以设置当<strong>新增冲突</strong>的时候处理的方法。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鞋子表的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShoeDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择所有的鞋</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllShoes</span><span class="params">()</span></span>: LiveData&lt;List&lt;Shoe&gt;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id查找鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe WHERE id = :id"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findShoeById</span><span class="params">(id: <span class="type">Long</span>)</span></span>: LiveData&lt;Shoe&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过品牌找鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe WHERE shoe_brand = :brand"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findShoeByBrand</span><span class="params">(brand: <span class="type">String</span>)</span></span>: LiveData&lt;List&lt;Shoe&gt;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入一种鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insertShoe</span><span class="params">(shoe: <span class="type">Shoe</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入多种鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insertShoe</span><span class="params">(shoes: <span class="type">List</span>&lt;<span class="type">Shoe</span>&gt;)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-2-删"><a href="#2-3-2-删" class="headerlink" title="2.3.2 删"></a>2.3.2 删</h3><p><code>@Delete</code>注解，声明当前的方法是一个删除方法。</p><h3 id="2-3-3-改"><a href="#2-3-3-改" class="headerlink" title="2.3.3 改"></a>2.3.3 改</h3><p><code>@Update</code>注解，声明当前方法是一个更新方法</p><h3 id="2-3-4-查"><a href="#2-3-4-查" class="headerlink" title="2.3.4 查"></a>2.3.4 查</h3><p><code>@Query</code>注解，不仅可以声明这是一个查询语句，也能用来删除和修改，不能用来新增。</p><ol><li>简单查询<br>除了简单查询，还能配合<code>LiveData</code>和<code>RxJava</code>。这里使用的是<code>implementation &#39;io.reactivex.rxjava2:rxjava:2.2.3&#39;</code><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.dao</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.LiveData</span><br><span class="line"><span class="keyword">import</span> androidx.room.Dao</span><br><span class="line"><span class="keyword">import</span> androidx.room.Insert</span><br><span class="line"><span class="keyword">import</span> androidx.room.OnConflictStrategy</span><br><span class="line"><span class="keyword">import</span> androidx.room.Query</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.Shoe</span><br><span class="line"><span class="keyword">import</span> io.reactivex.Flowable</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鞋子表的方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Dao</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShoeDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id查找鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe WHERE id = :id"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findShoeById</span><span class="params">(id: <span class="type">Long</span>)</span></span>: Shoe?</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过品牌找鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe WHERE shoe_brand = :brand"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findShoeByBrand</span><span class="params">(brand: <span class="type">String</span>)</span></span>: List&lt;Shoe&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询 排序 同名鞋名查询鞋</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe WHERE shoe_name LIKE :name ORDER BY shoe_brand ASC"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findShoesByName</span><span class="params">(name: <span class="type">String</span>)</span></span>: List&lt;Shoe&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配合LiveData，返回所有鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllShoesLD</span><span class="params">()</span></span>: LiveData&lt;List&lt;Shoe&gt;&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配合LiveData，通过id查找鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe WHERE id = :id"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findShoeByIdLD</span><span class="params">(id: <span class="type">Long</span>)</span></span>: LiveData&lt;Shoe&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配合RxJava，通过id查询单款鞋子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Query(<span class="meta-string">"SELECT * FROM shoe WHERE id=:id"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findShoeByIdRx</span><span class="params">(id: <span class="type">Long</span>)</span></span>: Flowable&lt;Shoe&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>查询多个的时候，可以返回<code>List</code>和数组，还可以配合<code>LiveData</code>和<code>RxJava</code>。</p><ol start="2"><li>复合查询<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据收藏结合，查询用户喜欢的鞋的集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Query(</span></span><br><span class="line"><span class="meta">    <span class="meta-string">"SELECT shoe.id,shoe.shoe_name,shoe.shoe_description,shoe.shoe_price,shoe.shoe_brand,shoe.shoe_imgUrl "</span> +</span></span><br><span class="line"><span class="meta">            <span class="meta-string">"FROM shoe "</span> +</span></span><br><span class="line"><span class="meta">            <span class="meta-string">"INNER JOIN fav_shoe ON fav_shoe.shoe_id = shoe.id "</span> +</span></span><br><span class="line"><span class="meta">            <span class="meta-string">"WHERE fav_shoe.user_id = :userId"</span></span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findShoesByUserId</span><span class="params">(userId: <span class="type">Long</span>)</span></span>: LiveData&lt;List&lt;Shoe&gt;&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-4-步骤4：创建数据库"><a href="#2-4-步骤4：创建数据库" class="headerlink" title="2.4 步骤4：创建数据库"></a>2.4 步骤4：创建数据库</h2><p>创建一个数据库对象非常消耗资源，使用单例模式可以避免更多的资源消耗。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> androidx.room.Database</span><br><span class="line"><span class="keyword">import</span> androidx.room.Room</span><br><span class="line"><span class="keyword">import</span> androidx.room.RoomDatabase</span><br><span class="line"><span class="keyword">import</span> androidx.sqlite.db.SupportSQLiteDatabase</span><br><span class="line"><span class="keyword">import</span> androidx.work.OneTimeWorkRequestBuilder</span><br><span class="line"><span class="keyword">import</span> androidx.work.WorkManager</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.dao.FavouriteShoeDao</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.dao.ShoeDao</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.dao.UserDao</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.Shoe</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.User</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.utils.ShoeWorker</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库文件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Database(entities = [User::class, Shoe::class], version = 1, exportSchema = false)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDataBase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">userDao</span><span class="params">()</span></span>: UserDao</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">shoeDao</span><span class="params">()</span></span>: ShoeDao</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">favouriteShoeDao</span><span class="params">()</span></span>: FavouriteShoeDao</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@Volatile</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> instance: AppDataBase? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getInstance</span><span class="params">(context: <span class="type">Context</span>)</span></span>: AppDataBase &#123;</span><br><span class="line">            <span class="keyword">return</span> instance ?: synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">                instance ?: buildDataBase(context)</span><br><span class="line">                    .also &#123;</span><br><span class="line">                        instance = it</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">buildDataBase</span><span class="params">(context: <span class="type">Context</span>)</span></span>: AppDataBase &#123;</span><br><span class="line">            <span class="keyword">return</span> Room.databaseBuilder(context, AppDataBase::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">"jetpack_db")</span></span></span><br><span class="line">                .addCallback(<span class="keyword">object</span> : RoomDatabase.Callback() &#123;</span><br><span class="line">                    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(db: <span class="type">SupportSQLiteDatabase</span>)</span></span> &#123;</span><br><span class="line">                        <span class="keyword">super</span>.onCreate(db)</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 读取鞋的集合</span></span><br><span class="line">                        <span class="keyword">val</span> request = OneTimeWorkRequestBuilder&lt;ShoeWorker&gt;().build()</span><br><span class="line">                        WorkManager.getInstance(context).enqueue(request)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                )</span><br><span class="line">                .build()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Database</code>注解声明当前是一个数据库文件，注解中<code>entities</code>变量声明数据库中的表（实体），以及版本等变量。同时，获取的<code>Dao</code>也必须在数据库类中。完成之后，make project一下工程，系统后自动创建<code>AppDataBase</code>和<code>xxxDao</code>的实现类。</p><h2 id="2-5-步骤5：简单封装"><a href="#2-5-步骤5：简单封装" class="headerlink" title="2.5 步骤5：简单封装"></a>2.5 步骤5：简单封装</h2><p>在不使用<code>LiveData</code>和<code>RxJava</code>前提下，<code>Room</code>的操作不能放在主线程中。这里看看<code>UserRepository</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.db.repository</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.dao.UserDao</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.User</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.Dispatchers.IO</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.withContext</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserRepository</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userDao: UserDao) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *用户登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">(account: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span> = userDao.login(account, pwd)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户注册</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">suspend</span> <span class="function"><span class="keyword">fun</span> <span class="title">register</span><span class="params">(email: <span class="type">String</span>, account: <span class="type">String</span>, pwd: <span class="type">String</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> withContext(IO) &#123;</span><br><span class="line">            userDao.insertUser(User(account, pwd, email))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllUsers</span><span class="params">()</span></span> = userDao.getAllUsers()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过id获取用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findUserById</span><span class="params">(id: <span class="type">Long</span>)</span></span> = userDao.findUserById(id)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@Volatile</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> instance: UserRepository? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getInstance</span><span class="params">(userDao: <span class="type">UserDao</span>)</span></span>: UserRepository =</span><br><span class="line">            instance ?: synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">                instance</span><br><span class="line">                    ?: UserRepository(userDao).also &#123;</span><br><span class="line">                        instance = it</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>register()</code>是一个普通方法，所以需要在子线程中使用，这里通过协程实现。<code>login()</code>是配合<code>LiveData</code>使用的， 不需要额外创建子线程，但是其核心数据库操作还在子线程中实现的。</p><p>这时，就可以操作本地数据库了。</p><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h1><h2 id="3-1-类型转换器"><a href="#3-1-类型转换器" class="headerlink" title="3.1 类型转换器"></a>3.1 类型转换器</h2><p>SQLite支持的类型有：NULL、INTEGER、REAL、TEXT和BLOB，对于<code>Data</code>类，SQLite还可以将其转化为TEXT、REAL或者INTEGER，如果是<code>Calendar</code>类呢？<code>Room</code>提供了这一解决方法，使用<code>@TypeConverter</code>注解，谷歌官方示例：<a href="https://github.com/googlesamples/android-sunflower" target="_blank" rel="noopener">android-sunflower</a>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Converters</span> </span>&#123;</span><br><span class="line">    <span class="meta">@TypeConverter</span> <span class="function"><span class="keyword">fun</span> <span class="title">calendarToDatestamp</span><span class="params">(calendar: <span class="type">Calendar</span>)</span></span>: <span class="built_in">Long</span> = calendar.timeInMillis</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TypeConverter</span> <span class="function"><span class="keyword">fun</span> <span class="title">datestampToCalendar</span><span class="params">(value: <span class="type">Long</span>)</span></span>: Calendar =</span><br><span class="line">            Calendar.getInstance().apply &#123; timeInMillis = value &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在数据库声明的时候，加上<code>@TypeConverter(COnverter::class)</code>即可：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Database(...)</span></span><br><span class="line"><span class="meta">@TypeConverters(Converters::class)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AppDatabase</span> : <span class="type">RoomDatabase</span></span>() &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-数据库迁移：这个还需要查找资料"><a href="#3-2-数据库迁移：这个还需要查找资料" class="headerlink" title="3.2 数据库迁移：这个还需要查找资料"></a>3.2 数据库迁移：这个还需要查找资料</h2><p><a href="https://www.jianshu.com/p/3e358eb9ac43" target="_blank" rel="noopener">Android Room 框架学习</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;p&gt;官方网址：&lt;a href=&quot;https://developer.android.google.cn/topic/libr
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://tylerLiu.top/categories/Android/Jetpack/"/>
    
    
      <category term="Jetpack" scheme="https://tylerLiu.top/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack：ViewModel&amp;LiveData</title>
    <link href="https://tylerLiu.top/2019/08/02/Android-Jetpack-ViewModel-LiveData/"/>
    <id>https://tylerLiu.top/2019/08/02/Android-Jetpack-ViewModel-LiveData/</id>
    <published>2019-08-02T05:40:06.000Z</published>
    <updated>2019-08-22T03:13:54.375Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://tylerliu.top/2019/07/31/Android-Jetpack-DataBinding/">Android-Jetpack-DataBinding</a>中，讨论了MVVM模式和Data Binding组件，这里继续学习跟MVVM有关的Android Jetpack组件——<code>ViewModel</code>和<code>LiveData</code>。</p><h1 id="1-LiveData"><a href="#1-LiveData" class="headerlink" title="1. LiveData"></a>1. LiveData</h1><p>官方文档：<a href="https://developer.android.google.cn/topic/libraries/architecture/livedata" target="_blank" rel="noopener">LiveData</a></p><p>先来看看<code>LiveData</code>和<code>ViewMOdel</code>的作用：</p><img src="/2019/08/02/Android-Jetpack-ViewModel-LiveData/9271486-93980cb4a2458d6d.webp"><p>从上图可以看出，<code>LiveData</code>和<code>ViewModel</code>在整个MVVM中担任数据驱动的职责，这也是MVVM中ViewMoel层的作用。</p><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p>官网介绍：</p><blockquote><p>LiveData is an observable data holder class. Unlike a regular observable, LiveData is lifecycle-aware, meaning it respects the lifecycle of other app components, such as activities, fragments, or services. This awareness ensures LiveData only updates app component observers that are in an active lifecycle state.<br>直译：LiveData是一个可观察的数据持有者类。与常规的可观察对象不同，LiveData是生命周期感知的，这意味着它尊重其他应用程序组件的生命周期，比如活动、片段或服务。这种意识确保LiveData只更新处于活动生命周期状态的应用程序组件观察者。</p></blockquote><p>可以看出<code>LiveData</code>作用和<code>RxJava</code>类似，是观察数据的类，相比<code>RxJava</code>，<code>LiveData</code>能在Activity、Fragment和Service中正确处理声明周期。<br><code>LiveData</code>的优点：</p><ul><li>数据变更时更新UI</li><li>没有内存泄露</li><li>不会因为停止Activity崩溃</li><li>无需手动处理生命周期</li><li>共享资源</li></ul><h2 id="1-2-使用方式"><a href="#1-2-使用方式" class="headerlink" title="1.2 使用方式"></a>1.2 使用方式</h2><p>常用的API：</p><ul><li><code>observe(@NotNull LifeCycleOwner owner, @NotNull Observe&lt;? super T&gt; observer)</code>：最常用的方法，需要提供<code>Observer</code>数据变更后的处理。<code>LifeCycleOwner</code>是能够正确处理生命周期的关键</li><li><code>setValue(T value)</code>：设置数据</li><li><code>getValue():T</code>：获取数据</li><li><code>postValue(T value)</code>：在主线程更新数据</li></ul><h2 id="1-3-使用场景"><a href="#1-3-使用场景" class="headerlink" title="1.3 使用场景"></a>1.3 使用场景</h2><p>配合Android Jetpack的其他组件使用，如<code>ViewModel</code>和<code>Room</code>。</p><h1 id="2-ViewModel"><a href="#2-ViewModel" class="headerlink" title="2. ViewModel"></a>2. ViewModel</h1><p>官方文档：<a href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel" target="_blank" rel="noopener"><code>ViewModel</code></a></p><p>MVVM中ViewModel层是用来逻辑处理的，Android Jetpack中的<code>ViewModel</code>是否一样呢？</p><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>官网介绍：</p><blockquote><p>The ViewModel class is designed to store and manage UI-related data in a lifecycle conscious way. The ViewModel class allows data to survive configuration changes such as screen rotations.</p></blockquote><p><code>ViewModel</code>同样具有生命周期，用来处理跟UI相关的数据，并且，当设备的一些<strong>配置信息改变</strong>（如屏幕旋转）时，它的数据不会消失。<br>通常，如果不做特殊处理，当屏幕旋转时，数据会消失，<code>ViewModel</code>管理数据为什么不会消失？因为<code>ViewModel</code>的生命周期：</p><img src="/2019/08/02/Android-Jetpack-ViewModel-LiveData/20190802160842.png"><p><code>ViewModel</code>的另一个特点就是实现<code>Actiivty</code>和<code>Framgent</code>之间的数据共享。</p><h2 id="2-2-使用方法"><a href="#2-2-使用方法" class="headerlink" title="2.2 使用方法"></a>2.2 使用方法</h2><p>继承<code>ViewMoel</code>即可。</p><h2 id="2-3-Demo"><a href="#2-3-Demo" class="headerlink" title="2.3 Demo"></a>2.3 Demo</h2><h3 id="2-3-1-步骤1：添加依赖"><a href="#2-3-1-步骤1：添加依赖" class="headerlink" title="2.3.1 步骤1：添加依赖"></a>2.3.1 步骤1：添加依赖</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// liveData</span></span><br><span class="line">implementation <span class="string">"androidx.lifecycle:lifecycle-livedata-ktx:2.2.0-alpha02"</span></span><br><span class="line"><span class="comment">// viewModel</span></span><br><span class="line">implementation <span class="string">"androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha02"</span></span><br><span class="line">implementation <span class="string">"androidx.lifecycle:lifecycle-extensions:2.2.0-alpha02"</span></span><br></pre></td></tr></table></figure><h3 id="2-3-2-步骤2：创建Model"><a href="#2-3-2-步骤2：创建Model" class="headerlink" title="2.3.2 步骤2：创建Model"></a>2.3.2 步骤2：创建Model</h3><p>继承<code>ViewModel</code>，分别创建品牌名的观察对象<code>brand:MutableliveData&lt;String&gt;</code>和对鞋子集合的观察对象<code>shose:LiveData&lt;List&lt;Shoe&gt;&gt;</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.viewmodel</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.*</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.<span class="keyword">data</span>.Shoe</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.repository.ShoeRepository</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeModel</span> <span class="keyword">constructor</span></span>(repository: ShoeRepository) : ViewModel() &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> ALL = <span class="string">"所有"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌的观察对象，默认观察所有的品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> brand = MutableLiveData&lt;String&gt;().apply &#123;</span><br><span class="line">        value = ALL</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鞋子集合的观察类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> shoes: LiveData&lt;List&lt;Shoe&gt;&gt; = brand.switchMap &#123;</span><br><span class="line">        <span class="comment">// Room数据库查询，只要知道返回的是LiveData&lt;List&lt;Shoe&gt;&gt;即可</span></span><br><span class="line">        <span class="keyword">if</span> (it == ALL) &#123;</span><br><span class="line">            repository.getAllShoes()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            repository.getShoeByBrand(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-3-步骤3：获取ViewModel"><a href="#2-3-3-步骤3：获取ViewModel" class="headerlink" title="2.3.3 步骤3：获取ViewModel"></a>2.3.3 步骤3：获取ViewModel</h3><ol><li>无构造参数获取：构造函数没有参数的情况下，获取<code>ShoeModel</code>很简单，<code>ViewModelProvider.of(this).get(ShoeModel::class.java)</code>就能返回需要的<code>ShoeModel</code>。</li><li>有构造参数获取：上面的<code>ShoeModel</code>需要传入一个参数<code>ShoeRepository</code>，这时，就需要自定义实现<code>Factory</code>：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.viewmodel.factory</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProvider</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.repository.ShoeRepository</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.ShoeModel</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeModelFactory</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> repository: ShoeRepository</span><br><span class="line">) : ViewModelProvider.NewInstanceFactory() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T : ViewModel?&gt;</span> <span class="title">create</span><span class="params">(modelClass: <span class="type">Class</span>&lt;<span class="type">T</span>&gt;)</span></span>: T &#123;</span><br><span class="line">        <span class="keyword">return</span> ShoeModel(repository) <span class="keyword">as</span> T</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>为了方便使用，这里写了一个统一的工具类<code>CustomViewModelProvider</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.viewmodel</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.NavController</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.RepositoryProvider</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.repository.ShoeRepository</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.db.repository.UserRepository</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.factory.LoginModelFactory</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.factory.RegisterModelFactory</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.factory.ShoeModelFactory</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ViewModel提供者</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> CustomViewModelProvider &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">providerShoeModel</span><span class="params">(context: <span class="type">Context</span>)</span></span>: ShoeModelFactory &#123;</span><br><span class="line">        <span class="keyword">val</span> repository: ShoeRepository = RepositoryProvider.providerShoeRepository(context)</span><br><span class="line">        <span class="keyword">return</span> ShoeModelFactory(repository)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后就能在<code>ShoeFragemnt</code>中获取<code>ShoeModel</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// by viewModels 需要依赖 "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> viewModel: ShoeModel <span class="keyword">by</span> viewModels &#123;</span><br><span class="line">    CustomViewModelProvider.providerShoeModel(requireContext())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-4-步骤4：使用ViewModel"><a href="#2-3-4-步骤4：使用ViewModel" class="headerlink" title="2.3.4 步骤4：使用ViewModel"></a>2.3.4 步骤4：使用ViewModel</h3><p><code>ViewModel</code>的使用需要结合具体的业务，这里的<code>ShoeModel</code>在<code>ShoeFragment</code>中的使用如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.ui.fragment.main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.viewModels</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.Observer</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModelProviders</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.databinding.FragmentShoeBinding</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.ui.adapter.ShoeAdapter</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.CustomViewModelProvider</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.viewmodel.ShoeModel</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 鞋子的Fragment</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="comment">// by viewModels 需要依赖 "androidx.navigation:navigation-ui-ktx:$rootProject.navigationVersion"</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> viewModel: ShoeModel <span class="keyword">by</span> viewModels &#123;</span><br><span class="line">        CustomViewModelProvider.providerShoeModel(requireContext())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">val</span> binding: FragmentShoeBinding = FragmentShoeBinding.inflate(inflater, container, <span class="literal">false</span>)</span><br><span class="line">        context ?: <span class="keyword">return</span> binding.root</span><br><span class="line"></span><br><span class="line">        ViewModelProviders.of(<span class="keyword">this</span>).<span class="keyword">get</span>(ShoeModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 适配器</span></span><br><span class="line">        <span class="keyword">val</span> adapter = ShoeAdapter()</span><br><span class="line">        binding.recycler.adapter = adapter</span><br><span class="line">        onSubscribeUi(adapter)</span><br><span class="line">        <span class="keyword">return</span> binding.root</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鞋子数据更新的通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">onSubscribeUi</span><span class="params">(adapter: <span class="type">ShoeAdapter</span>)</span></span> &#123;</span><br><span class="line">        viewModel.shoes.observe(viewLifecycleOwner, Observer &#123;</span><br><span class="line">            <span class="keyword">if</span> (it != <span class="literal">null</span>) &#123;</span><br><span class="line">                adapter.submitList(it)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>onSubscribeUi()</code>中，使用<code>ShoeModel</code>的<code>LiveData</code>进行观察通知，当鞋子集合更新数据时，就会更新到当前的适配器中。</p><p>布局文件<code>framgent_shoe.xml</code>很简单，虽然使用了Data Binding，但是没有变量，只有一个<code>RecyclerView</code>。</p><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Jetpack" target="_blank" rel="noopener">Allen_Demo_Jetpack</a></p><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h1><h2 id="3-1-LiveData数据变换"><a href="#3-1-LiveData数据变换" class="headerlink" title="3.1 LiveData数据变换"></a>3.1 LiveData数据变换</h2><p><code>LiveData</code>中数据变换方法有<code>map()</code>和<code>switchMap()</code>，<code>switchMap()</code>在上面已经看到了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地数据仓库</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeRepository</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> shoeDao: ShoeDao) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getAllShoes</span><span class="params">()</span></span> = shoeDao.getAllShoes()</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过品牌查询鞋子，返回LiveData&lt;List&lt;Shoe&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getShoeByBrand</span><span class="params">(brand: <span class="type">String</span>)</span></span> = shoeDao.findShoeByBrand(brand)</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入鞋子的集合，返回LiveData&lt;List&lt;Shoe&gt;&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">insertShoes</span><span class="params">(shoes: <span class="type">List</span>&lt;<span class="type">Shoe</span>&gt;)</span></span> = shoeDao.insertShoe(shoes)</span><br><span class="line"></span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShoeModel</span> <span class="keyword">constructor</span></span>(repository: ShoeRepository) : ViewModel() &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">val</span> ALL = <span class="string">"所有"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌的观察对象，默认观察所有的品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> brand = MutableLiveData&lt;String&gt;().apply &#123;</span><br><span class="line">        value = ALL</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鞋子集合的观察类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> shoes: LiveData&lt;List&lt;Shoe&gt;&gt; = brand.switchMap &#123;</span><br><span class="line">        <span class="comment">// Room数据库查询，只要知道返回的是LiveData&lt;List&lt;Shoe&gt;&gt;即可</span></span><br><span class="line">        <span class="keyword">if</span> (it == ALL) &#123;</span><br><span class="line">            repository.getAllShoes()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            repository.getShoeByBrand(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map()</code>的使用借用官方的例子：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> userLiveData: LiveData&lt;User&gt; = UserLiveData()</span><br><span class="line"><span class="keyword">val</span> userName: LiveData&lt;String&gt; = Transformations.map(userLiveData) &#123;</span><br><span class="line">    user -&gt; <span class="string">"<span class="subst">$&#123;user.name&#125;</span> <span class="subst">$&#123;user.lastName&#125;</span>"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>map()</code>也可以实现将A变成B，二者有什么区别呢？</p><ul><li><code>map()</code>中只有一个<code>LiveData&lt;A&gt;</code>，它在<code>LiveData&lt;A&gt;</code>发送数据的时候将A变成B</li><li><code>switchMap()</code>中同时存在<code>LiveData&lt;A&gt;</code>和<code>LiveData&lt;B&gt;</code>，<code>LiveData&lt;A&gt;</code>更新之后，通知<code>LiveData&lt;B&gt;</code>更新。</li></ul><h2 id="3-2-LiveData如何共享数据"><a href="#3-2-LiveData如何共享数据" class="headerlink" title="3.2 LiveData如何共享数据"></a>3.2 LiveData如何共享数据</h2><p>如果有这样的需求：注册页需要记录信息，注册完成跳转到登录页，并将账号和密码显示在登录页。这时，可以定义一个类然后继承<code>LiveData</code>，并使用单例模式即可：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.common.livedata</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  登录信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInfo</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> account: String, <span class="keyword">val</span> pwd: String, <span class="keyword">val</span> email: String)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.common.livedata</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.<span class="keyword">annotation</span>.MainThread</span><br><span class="line"><span class="keyword">import</span> androidx.lifecycle.LiveData</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义单例LiveData</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/8/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginLiveData</span> : <span class="type">LiveData</span>&lt;<span class="type">LoginInfo</span>&gt;</span>() &#123;</span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> sInstance: LoginLiveData</span><br><span class="line"></span><br><span class="line">        <span class="meta">@MainThread</span></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">get</span><span class="params">()</span></span>: LoginLiveData &#123;</span><br><span class="line">            sInstance = <span class="keyword">if</span> (::sInstance.isInitialized) sInstance <span class="keyword">else</span> LoginLiveData()</span><br><span class="line">            <span class="keyword">return</span> sInstance</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-使用ViewModel在同一个Activity中的Fragment之间共享数据"><a href="#3-3-使用ViewModel在同一个Activity中的Fragment之间共享数据" class="headerlink" title="3.3 使用ViewModel在同一个Activity中的Fragment之间共享数据"></a>3.3 使用ViewModel在同一个Activity中的Fragment之间共享数据</h2><p>要想利用<code>ViewModel</code>实现Fragment之间数据共享，前提是<code>Fragment</code>中的<code>FragmentActivity</code>要相同，这里看看官方示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SharedViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="keyword">val</span> selected = MutableLiveData&lt;Item&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">select</span><span class="params">(item: <span class="type">Item</span>)</span></span> &#123;</span><br><span class="line">        selected.value = item</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MasterFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> itemSelector: Selector</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> model: SharedViewModel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        model = activity?.run &#123;</span><br><span class="line">            ViewModelProviders.of(<span class="keyword">this</span>).<span class="keyword">get</span>(SharedViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        &#125; ?: <span class="keyword">throw</span> Exception(<span class="string">"Invalid Activity"</span>)</span><br><span class="line">        itemSelector.setOnClickListener &#123; item -&gt;</span><br><span class="line">            <span class="comment">// Update the UI</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> model: SharedViewModel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        model = activity?.run &#123;</span><br><span class="line">            ViewModelProviders.of(<span class="keyword">this</span>).<span class="keyword">get</span>(SharedViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">        &#125; ?: <span class="keyword">throw</span> Exception(<span class="string">"Invalid Activity"</span>)</span><br><span class="line">        model.selected.observe(<span class="keyword">this</span>, Observer&lt;Item&gt; &#123; item -&gt;</span><br><span class="line">            <span class="comment">// Update the UI</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://tylerliu.top/2019/07/31/Android-Jetpack-DataBinding/&quot;&gt;Android-Jetpack-DataBinding&lt;/a&gt;中，讨论了MVVM模式和Data Binding组件，这里继续学习跟
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://tylerLiu.top/categories/Android/Jetpack/"/>
    
    
      <category term="Jetpack" scheme="https://tylerLiu.top/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack：DataBinding</title>
    <link href="https://tylerLiu.top/2019/07/31/Android-Jetpack-DataBinding/"/>
    <id>https://tylerLiu.top/2019/07/31/Android-Jetpack-DataBinding/</id>
    <published>2019-07-31T08:34:26.000Z</published>
    <updated>2019-08-22T03:13:22.417Z</updated>
    
    <content type="html"><![CDATA[<p>Android Jetpack一系类的内容，适合使用MVVM，这里先看看MVVM。</p><h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><h2 id="1-1-MVVM介绍"><a href="#1-1-MVVM介绍" class="headerlink" title="1.1 MVVM介绍"></a>1.1 MVVM介绍</h2><p>MVVM，全称Model-View-ViewModel，和MVC和MVP一样，是逻辑分层解耦的模式。</p><h3 id="1-1-1-结构图"><a href="#1-1-1-结构图" class="headerlink" title="1.1.1 结构图"></a>1.1.1 结构图</h3><img src="/2019/07/31/Android-Jetpack-DataBinding/9271486-daf7f3dda87c84ab.webp"><p>MVVM三要素：</p><ul><li>View层：xml、Activity、Framgent、Adapter和View等</li><li>Model层：数据源（包括本地数据和网络数据等）</li><li>ViewModel层：View层处理数据以及逻辑处理</li></ul><h2 id="1-2-Data-Binding介绍"><a href="#1-2-Data-Binding介绍" class="headerlink" title="1.2 Data Binding介绍"></a>1.2 Data Binding介绍</h2><p>MVVM是一种架构模式，Data Binding是一种实现数据和UI绑定的框架，是构建MVVM模式的一个工具。</p><ul><li>官方文档：<a href="https://developer.android.google.cn/topic/libraries/data-binding/" target="_blank" rel="noopener">Data Binding</a></li><li>官方Demo地址：<a href="https://github.com/googlecodelabs/android-databinding" target="_blank" rel="noopener">android-databinding</a></li></ul><h1 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2. Demo"></a>2. Demo</h1><p>这里会在前一篇<a href="https://tylerliu.top/2019/07/29/Android-Jetpack-Navigation/">Android-Jetpack-Navigation</a>的基础上进行扩展，如果要查看之前的可以使用git进行版本回退，本文会在注册和登录模块上进行修改。</p><h2 id="2-1-步骤1：在module的build-gradle中添加如下："><a href="#2-1-步骤1：在module的build-gradle中添加如下：" class="headerlink" title="2.1 步骤1：在module的build.gradle中添加如下："></a>2.1 步骤1：在module的build.gradle中添加如下：</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ......</span><br><span class="line">    </span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-步骤2：构建LoginModel"><a href="#2-2-步骤2：构建LoginModel" class="headerlink" title="2.2 步骤2：构建LoginModel"></a>2.2 步骤2：构建LoginModel</h2><p>创建登录的<code>LoginModel</code>，主要负责登录逻辑的处理以及两个输入框内容改变时数据的更新：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.viewmodel</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context</span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.text.Editable</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.BindingAdapter</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.ObservableField</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.MainActivity</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.common.Constant</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.common.listener.SimpleWatcher</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginModel</span> <span class="keyword">constructor</span></span>(name: String, pwd: String, context: Context) &#123;</span><br><span class="line">    <span class="keyword">val</span> n = ObservableField&lt;String&gt;(name)</span><br><span class="line">    <span class="keyword">val</span> p = ObservableField&lt;String&gt;(pwd)</span><br><span class="line">    <span class="keyword">val</span> context: Context = context</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名改变时的回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onNameChanged</span><span class="params">(s: <span class="type">CharSequence</span>)</span></span> &#123;</span><br><span class="line">        n.<span class="keyword">set</span>(s.toString())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码改变时的回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">onPwdChanged</span><span class="params">(s: <span class="type">CharSequence</span>, start: <span class="type">Int</span>, before: <span class="type">Int</span>, count: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        p.<span class="keyword">set</span>(s.toString())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录的逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">login</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n.<span class="keyword">get</span>().equals(Constant.USERNAME) &amp;&amp; p.<span class="keyword">get</span>().equals(Constant.PASSWORD)) &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"账号密码正确"</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">            <span class="keyword">val</span> intent = Intent(context, MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            context.startActivity(intent)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> nameWatcher = <span class="keyword">object</span> : SimpleWatcher() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterTextChanged</span><span class="params">(s: <span class="type">Editable</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.afterTextChanged(s)</span><br><span class="line"></span><br><span class="line">            n.<span class="keyword">set</span>(s.toString())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> pwdWatcher = <span class="keyword">object</span> : SimpleWatcher() &#123;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterTextChanged</span><span class="params">(s: <span class="type">Editable</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.afterTextChanged(s)</span><br><span class="line"></span><br><span class="line">            p.<span class="keyword">set</span>(s.toString())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindingAdapter(<span class="meta-string">"addTextChangedListener"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">addTextChangedListener</span><span class="params">(editText: <span class="type">EditText</span>, simpleWatcher: <span class="type">SimpleWatcher</span>)</span></span> &#123;</span><br><span class="line">        editText.addTextChangedListener(simpleWatcher)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ObservableField</code>是一个可观察的域，通过泛型来使用，可以使用的方法有三个：</p><ul><li><code>ObservableField(T value)</code>：构造函数，设置可观察的域</li><li><code>T get()</code>：获取可观察的域的内容，可以使用UI控件监测它的值</li><li><code>set(T value)</code>：设置可观察的域，设置成功后，会通知UI控件进行更新</li></ul><p>再来看看<code>LoginModel</code>，里面包含了用来观察<code>name</code>和<code>pws</code>的两个成员变量<code>n</code>和<code>p</code>，以及一个登录的逻辑处理方法。</p><h2 id="2-3-步骤3：创建布局文件"><a href="#2-3-步骤3：创建布局文件" class="headerlink" title="2.3 步骤3：创建布局文件"></a>2.3 步骤3：创建布局文件</h2><p>使用Data Binding之后的布局文件和之前的会有很大不同，里面包含了一些新的标签：</p><ul><li><code>layout</code>：布局根节点，只能包裹一个<code>View</code>标签，且不能包裹<code>merge</code>标签。</li><li><code>data</code>：Data Binding的数据，只能存放一个data标签。</li><li><code>variable</code>：在<code>data</code>标签中使用，数据的变量标签。<code>type</code>属性指明变量的类。<code>name</code>属性指明变量的名字，方便布局中使用。</li><li><code>import</code>：在<code>data</code>标签中使用，需要使用静态方法和静态常量，如果需要使用<code>view.visible</code>属性的时候，需要导入<code>&lt;import type=&quot;android.view.View&quot;/&gt;</code>。<code>type</code>属性指明类的路径，如果两个<code>import</code>标签带入的类名相同，可以使用<code>alias</code>属性声明别名，使用时直接用别名即可。</li></ul><p>来看看<code>LoginFragment</code>的布局文件<code>fragment_login.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ViewModel，通过mBinding.vm=mViewMode注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"com.ly.allendemojetpack.viewmodel.LoginModel"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"activity"</span> <span class="attr">type</span>=<span class="string">"androidx.fragment.app.FragmentActivity"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/txt_cancel"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"@&#123;()-&gt; activity.onBackPressed()&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">......</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/txt_title"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">......</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/et_account"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@&#123;model.n.get()&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onTextChanged</span>=<span class="string">"@&#123;(text, start, before, count)-&gt;model.onNameChanged(text)&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">......</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/et_pwd"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@&#123;model.p.get()&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onTextChanged</span>=<span class="string">"@&#123;model::onPwdChanged&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">......</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/btn_login"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:onClick</span>=<span class="string">"@&#123;()-&gt; model.login()&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:enabled</span>=<span class="string">"@&#123;(model.p.get().isEmpty()||model.n.get().isEmpty()) ? false : true&#125;"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">......</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>variable</code>有了两个：</p><ul><li><code>model</code>：类型为<code>com.ly.allendemojetpack.viewmodel.LoginModel</code>，绑定用户名。</li><li><code>activity</code>：类型为<code>androidx.fragment.app.FragmentActivity</code>，主要用来处理返回按钮事件。</li></ul><p>知识点讲解：</p><ol><li>属性的引用<br>如果想使用<code>ViewModel</code>中成员变量，直接使用<code>model.p</code>即可。</li><li>事件绑定<br>事件绑定包括方法引用和监听绑定：</li></ol><ul><li>方法引用：参数类型和返回类型要一致，参考<code>et_pwd</code>的<code>android:onTextChanged</code>引用</li><li>监听绑定：要求没有方法引用高，可以使用自定义函数，参考<code>et_account</code>的<code>android:onTextChanged</code>引用。</li></ul><ol start="3"><li>表达式<br><code>btn_login</code>按钮在账号或密码为空的时候，是灰色的：</li></ol><img src="/2019/07/31/Android-Jetpack-DataBinding/11843186-4e333c0f092fcdc2.png"><p>这是因为在代码中设置了<code>android:enabled=&quot;@{(model.p.get().isEmpty()||model.n.get().isEmpty()) ? false : true}&quot;</code>，意思是用户名或密码为空时，设置<code>android:enable</code>属性设置为<code>flase</code>，这是一个三元表达式，除了上面的<code>||</code>和三元表达式，Data Binding还支持：</p><ul><li>运算符 + - / * %</li><li>字符串连接 +</li><li>逻辑与或 &amp;&amp; ||</li><li>二进制 &amp; | ^</li><li>一元 + - ! ~</li><li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li><li>比较 == &gt; &lt; &gt;= &lt;= (Note that &lt; needs to be escaped as &lt;)</li><li>instanceof</li><li>Grouping ()</li><li>Literals - character, String, numeric, null</li><li>Cast</li><li>方法调用</li><li>域访问</li><li>数组访问</li><li>三元操作符</li></ul><p>除了上述，Data Binding还新增了空合并操作符<code>??</code>，例如<code>androud:text=&quot;@{user.displayName ?? user.lastName}&quot;</code>等价于<code>android:text=&quot;@{user.displayName != null ? user.displayName : user.lastName}&quot;</code></p><h2 id="2-4-生成绑定类"><a href="#2-4-生成绑定类" class="headerlink" title="2.4 生成绑定类"></a>2.4 生成绑定类</h2><p>创建完布局文件之后，点击Make Project按钮，系统会自动生成绑定类：</p><img src="/2019/07/31/Android-Jetpack-DataBinding/11843186-74caa4177dd6e3f7.png"><p>下面只需要在<code>LoginFragment</code>中完成绑定操作即可，既可以使用生成的<code>FragmentLoginBinding</code>，也可以使用自带的<code>BindingUtil</code>。</p><ol><li>使用<code>BindingUtil</code><br><code>BindingUtil</code>常用的API：</li></ol><ul><li><code>setContentView()</code>：进行Activity下面的绑定</li><li><code>inflate</code>：进行Fragment下面的绑定</li><li><code>bind</code>：进行View的绑定</li></ul><p><code>LoginFragemnt</code>绑定代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">    <span class="keyword">val</span> binding: FragmentLoginBinding = DataBindingUtil.inflate(</span><br><span class="line">        inflater, R.layout.fragment_login, container, <span class="literal">false</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    loginModel = LoginModel(<span class="string">""</span>, <span class="string">""</span>, context!!)</span><br><span class="line">    binding.model = loginModel</span><br><span class="line">    binding.activity = activity</span><br><span class="line">    <span class="keyword">return</span> binding.root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用生产的<code>FragmentLoginBinding</code><br>使用方法与<code>DataBindingUtil</code>类似：<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">    <span class="keyword">val</span> binding = FragmentLoginBinding.inflate(inflater, container, <span class="literal">false</span>)</span><br><span class="line">    loginModel = LoginModel(<span class="string">""</span>, <span class="string">""</span>, context!!)</span><br><span class="line">    binding.model = loginModel</span><br><span class="line">    binding.activity = activity</span><br><span class="line">    <span class="keyword">return</span> binding.root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-Data-Binding的一些其他功能"><a href="#3-Data-Binding的一些其他功能" class="headerlink" title="3. Data Binding的一些其他功能"></a>3. Data Binding的一些其他功能</h1><h2 id="3-1-布局中属性的设置"><a href="#3-1-布局中属性的设置" class="headerlink" title="3.1 布局中属性的设置"></a>3.1 布局中属性的设置</h2><h3 id="3-1-1-有属性有setter"><a href="#3-1-1-有属性有setter" class="headerlink" title="3.1.1 有属性有setter"></a>3.1.1 有属性有setter</h3><p>如果一个XXXView类中有成员变量<code>borderColor</code>，并且XXXView类中有<code>setBorderColor(int color)</code>方法，那么在布局文件中，可以借助Data Binding直接使用<code>app:borderColor</code>属性。</p><h3 id="3-1-2-没有setter，但有相关方法"><a href="#3-1-2-没有setter，但有相关方法" class="headerlink" title="3.1.2 没有setter，但有相关方法"></a>3.1.2 没有setter，但有相关方法</h3><p>以XXXView为例，内有有成员变量<code>borderColor</code>，这次设置<code>borderColor</code>的方法是<code>setBorder()</code>（或者其他，总之不是标准的set方法，<code>setBorderColor()</code>），还使用<code>app:borderColor</code>肯定不行的。这时，可以通过<code>BindingMethods</code>注解实现<code>app:borderColor</code>的使用，如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingMethods(value = [</span></span><br><span class="line"><span class="meta">    BindingMethod(</span></span><br><span class="line"><span class="meta">        type = 包名.XXXView::class, </span></span><br><span class="line"><span class="meta">        attribute = <span class="meta-string">"app:borderColor"</span>, </span></span><br><span class="line"><span class="meta">        method = <span class="meta-string">"setBColor"</span>)</span>])</span><br></pre></td></tr></table></figure><h3 id="3-1-3-自定义属性"><a href="#3-1-3-自定义属性" class="headerlink" title="3.1.3 自定义属性"></a>3.1.3 自定义属性</h3><p>现在不仅没有<code>setter</code>方法，甚至成员变量都没有。例如现在要给<code>EditText</code>添加文本监听器，这样，现在<code>LoginModel</code>中自定义个监听器，并使用<code>@BindingAdapter</code>注解：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> nameWatcher = <span class="keyword">object</span> : SimpleWatcher() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterTextChanged</span><span class="params">(s: <span class="type">Editable</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.afterTextChanged(s)</span><br><span class="line"></span><br><span class="line">        n.<span class="keyword">set</span>(s.toString())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">"addTextChangedListener"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">addTextChangedListener</span><span class="params">(editText: <span class="type">EditText</span>, simpleWatcher: <span class="type">SimpleWatcher</span>)</span></span> &#123;</span><br><span class="line">    editText.addTextChangedListener(simpleWatcher)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以在布局文件中使用<code>app:addTextChangedListener</code>属性了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/et_account"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@&#123;model.n.get()&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:addTextChangedListener</span>=<span class="string">"@&#123;model.nameWatcher&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>效果和之前的一样。</p><h2 id="3-2-数据双向绑定"><a href="#3-2-数据双向绑定" class="headerlink" title="3.2 数据双向绑定"></a>3.2 数据双向绑定</h2><p>数据双向绑定可以分为两种情况：数据刷新视图和视图刷新数据。</p><h3 id="3-2-1-数据刷新视图"><a href="#3-2-1-数据刷新视图" class="headerlink" title="3.2.1 数据刷新视图"></a>3.2.1 数据刷新视图</h3><p>需要数据变化时视图也跟着变化。有了两种实现方式：</p><ul><li>自定义继承<code>BaseObservable</code></li><li>使用<code>ObservableField</code></li></ul><ol><li>继承<code>BaseObservable</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.databinding.BaseObservable;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.Bindable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObservableUser</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注解才会自动在build目录BR类中生成entry, 要求方法名必须以get开头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="comment">// 手动刷新</span></span><br><span class="line">        notifyPropertyChanged(BR.firstName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        notifyPropertyChanged(BR.lastName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><code>BaseObservable</code>和<code>Observable</code>的区别：</p><ul><li><code>BaseObservable</code>是实现了<code>Observable</code>的类，帮助实现监听器的线程安全问题；</li><li><code>BaseObservable</code>使用了<code>addPropertyChangeRegistry()</code>来执行<code>OnPropertyChangedCallback()</code>；</li><li>不建议直接实现<code>Observable</code>。</li></ul><ol start="2"><li>使用<code>ObservableField</code><br>Data Binding默认实现了一系列<code>Observable</code>接口的字段：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">BaseObservable,</span><br><span class="line">ObservableBoolean,</span><br><span class="line">ObservableByte,</span><br><span class="line">ObservableChar,</span><br><span class="line">ObservableDouble,</span><br><span class="line">ObservableField&lt;T&gt;,</span><br><span class="line">ObservableFloat,</span><br><span class="line">ObservableInt,</span><br><span class="line">ObservableLong,</span><br><span class="line">ObservableParcelable&lt;T extends Parcelable&gt;,</span><br><span class="line">ObservableShort,</span><br><span class="line">ViewDataBinding</span><br></pre></td></tr></table></figure></li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlainUser</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于集合类型，可以使用<code>ObservableArryMap</code>、<code>ObservableArryList</code>、<code>ObservableMap</code>等集合类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayMap&lt;String, Object&gt; user = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</span><br><span class="line">user.put(<span class="string">"firstName"</span>, <span class="string">"Google"</span>);</span><br><span class="line">user.put(<span class="string">"lastName"</span>, <span class="string">"Inc."</span>);</span><br><span class="line">user.put(<span class="string">"age"</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.databinding.ObservableMap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"ObservableMap&lt;String, Object&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">'@&#123;user["lastName"]&#125;'</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:text</span>=<span class="string">'@&#123;String.valueOf(1 + (Integer)user["age"])&#125;'</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>还支持<code>ObservableParcelable&lt;Object&gt;</code>序列化数据类型；</li><li><code>ObservableField</code>同样可以使用<code>addPropertyChangedCallback</code>监听属性变化。</li></ul><h3 id="3-2-2-视图刷新数据"><a href="#3-2-2-视图刷新数据" class="headerlink" title="3.2.2 视图刷新数据"></a>3.2.2 视图刷新数据</h3><p>通过使用表达式<code>@=</code>就可以在视图刷新时自动刷新数据，但是要求数据实现以下 两种方式修改才会触发刷新：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:inputType</span>=<span class="string">"textNoSuggestions"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@=&#123;model.name&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>这种双向绑定会存在一个死循环的问题，即数据变化（回调监听器）触发了视图变化，视图变化又会触发数据变化（再次回调监听），一直循环，设置相同的数据也会视为数据变化。</p><p>所以需要判断当前变化的数据是否等于旧数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.BindingAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomBindingAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BindingAdapter</span>(<span class="string">"android:text"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, CharSequence text)</span> </span>&#123;</span><br><span class="line">        CharSequence oldText = view.getText();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!haveContentChanged(text, oldText)) &#123;</span><br><span class="line">            <span class="comment">// 数据没有变化时，不进行视图刷新</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        view.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 本方法使用的是官方源码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">haveContentChanged</span><span class="params">(CharSequence str1, CharSequence str2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((str1 == <span class="keyword">null</span>) != (str2 == <span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> length = str1.length();</span><br><span class="line">        <span class="keyword">if</span> (length != str2.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1.charAt(i) != str2.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这种判断是无效的，因为<code>String</code>参数传递属于引用类型变量，不是常量，需要使用<code>equals()</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本段截取官方源码，是错误的</span></span><br><span class="line"><span class="keyword">if</span> (text == oldText || (text == <span class="keyword">null</span> &amp;&amp; oldText.length() == <span class="number">0</span>)) &#123;</span><br><span class="line">  <span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正确写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (text == <span class="keyword">null</span> || text.equals(oldText) || oldText.length() == <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到本例，比如上面的<code>EditText</code>在实现双向绑定后，既不需要添加<code>SimpleWatcher</code>，也不需要用方法调用，实现代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/et_account"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@=&#123;model.n.get()&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">......</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure><p>仅仅将<code>@{model.n.get()}</code>换为<code>@={model.n.get()}</code>,需要注意，属性必须是可观察的，即使用上面提到的<code>ObservableField</code>，也可以自定义实现<code>BaseObservable</code>接口。</p><h1 id="4-注解"><a href="#4-注解" class="headerlink" title="4. 注解"></a>4. 注解</h1><h2 id="4-1-Bindable"><a href="#4-1-Bindable" class="headerlink" title="4.1 @Bindable"></a>4.1 @Bindable</h2><p>用于数据更新自动刷新视图。</p><h2 id="4-2-BindingAdapter"><a href="#4-2-BindingAdapter" class="headerlink" title="4.2 BindingAdapter"></a>4.2 BindingAdapter</h2><p>创建一个XML属性和函数，然后在属性中进行设置数据操作会进入该函数。图片加载框架可以使用此方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(value = &#123; <span class="string">"imageUrl"</span>, <span class="string">"error"</span> &#125;, requireAll = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</span><br><span class="line">    Glide.with(view.getContext()).load(url).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>方法必须是<code>public static</code>；</li><li>第一个参数必须是控件或其父类</li><li>方法名随意</li><li>最后一个<code>boolean</code>类型是可选参数，可以要求是否所有参数都要填写，默认为<code>true</code></li><li>如果<code>requireAll</code>为<code>false</code>，没有填的属性将默认为<code>null</code>，所以需要做非空判断</li></ol><p>使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:error</span>=<span class="string">"@&#123;@drawable/error&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allen:imageUrl</span>=<span class="string">"@&#123;imageUrl&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:onClickListener</span>=<span class="string">"@&#123;activity.avatarClickListener&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>命名空间可以是随意的，但如果在<code>BindingAdapter</code>的数组内定义了命名空间，就必须遵守。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里省略了一个注解参数.   </span></span><br><span class="line"><span class="meta">@BindingAdapter</span>(&#123; <span class="string">"android:imageUrl"</span>, <span class="string">"error"</span> &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(url == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  Glide.with(view.getContext()).load(url).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果数据初始化在异步，会回调方法，但数据为<code>null</code>（成员默认值），所以要先进行非空判断。</p><p>Kotlin有两种实现方式：</p><ol><li><p>单例 + <code>@JvmStatic</code>注解</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> ProgressAdapter &#123;</span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="meta">@BindingAdapter(<span class="meta-string">"android:bindName"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setBindName</span><span class="params">(view: <span class="type">View</span>, name:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>顶级函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">"android:bindName"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">setBindName</span><span class="params">(view: <span class="type">View</span>, name:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于顶级函数太多影响代码补全建议使用顶级扩展函数, 之后也可以在代码中方便使用</span></span><br><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">"android:bindName"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> View.<span class="title">setBindName</span><span class="params">( name:<span class="type">String</span>)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-3-BindingMethods"><a href="#4-3-BindingMethods" class="headerlink" title="4.3 @BindingMethods"></a>4.3 @BindingMethods</h2><p>如果想创建一个XML属性并且和View中函数关联（即自动使用属性值作为参数调用该函数），就可以使用<code>@BindingMethods</code>注解这个类（也可以是一个接口）。</p><p>该注解属于一个容器，内部参数是一个<code>@BindingMethods</code>数组，只能用于修饰类或接口。</p><p>官方Demo：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingMethods</span>(&#123;</span><br><span class="line">    <span class="meta">@BindingMethod</span>(type = android.widget.ProgressBar.class, attribute = <span class="string">"android:indeterminateTint"</span>, method = <span class="string">"setIndeterminateTintList"</span>),</span><br><span class="line">    <span class="meta">@BindingMethod</span>(type = android.widget.ProgressBar.class, attribute = <span class="string">"android:progressTint"</span>, method = <span class="string">"setProgressTintList"</span>),</span><br><span class="line">    <span class="meta">@BindingMethod</span>(type = android.widget.ProgressBar.class, attribute = <span class="string">"android:secondaryProgressTint"</span>, method = <span class="string">"setSecondaryProgressTintList"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProgressBarBindingAdapter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@BindingMethods</code>注解参数（必选）：</p><ul><li><code>type</code>：字节码，即控件类型</li><li><code>attribute</code>：XML属性</li><li><code>method</code>：函数名，即控件中的函数名称</li></ul><p>注意：</p><ul><li>如果属性名和<code>@BindingAdapter</code>定义的XML属性相同，会冲突报错</li><li>如果控件类中已经存在一个和定义的属性相关联的函数（例如<code>setName</code>函数和<code>android:name</code>属性就相关联），则会优先执行该函数。</li></ul><h2 id="4-4-BindingConversion"><a href="#4-4-BindingConversion" class="headerlink" title="4.4 @BindingConversion"></a>4.4 @BindingConversion</h2><p>属性值自动进行类型转换。</p><ol><li>只能修饰<code>public static</code>方法</li><li>任意位置任意方法名都不受限制</li><li>Data Binding自动匹配被该注解修饰的方法和参数类型</li><li>返回值类型必须和属性<code>setter</code>方法匹配，且参数只有一个</li><li>要求属性值必须是<code>@{}</code>Data Binding表达式</li></ol><p>官方示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Converters</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BindingConversion</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@BindingConversion</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorStateList <span class="title">convertColorToColorStateList</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ColorStateList.valueOf(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingConversion</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">int2string</span><span class="params">(integer:<span class="type">Int</span>)</span></span>:String&#123;</span><br><span class="line">    Log.d(<span class="string">"日志"</span>, <span class="string">"(CusView.kt:92) int2string ___ integer = [<span class="variable">$integer</span>]"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> integer.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"m"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"com.example.architecture.Model"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">com.example.architecture.CusView</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:bindName</span>=<span class="string">"@=&#123;m.age&#125;"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这段代码会报错，因为涉及双向数据绑定，<code>@BindingConversion</code>只会在数据设置视图时生效，但是如果是视图设置数据则会走其他函数（如<code>get()</code>），如果该函数返回的类型和Model中的类型不匹配会报异常，除非将函数改为类型匹配，或者去掉<code>=</code>，不使用双向数据绑定。</p><p><code>android:text</code>不能使用int转为String，因为它本身能正常接收int（作为<code>resouceId</code>），会报：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.content.res.Resources$NotFoundException: String resource ID #0xa</span><br></pre></td></tr></table></figure><h2 id="4-5-InverseMethod"><a href="#4-5-InverseMethod" class="headerlink" title="4.5 @InverseMethod"></a>4.5 @InverseMethod</h2><p>Android Studio 3.0提供了<strong>inverse系列</strong>新的注解，都是针对数据双向绑定的。</p><p>在数据和视图的数据不统一时可以使用该注解<code>@InverseMethod</code>解决数据转换问题。</p><p>例如，数据模型存储的是用户id，但视图不显示id，而是显示用户名（数据和视图类型不一样），就需要进行二者的转换。</p><p>需要两个函数：设置数据到视图的函数<code>set()</code>和设置视图变更到数据的函数<code>get()</code></p><ul><li><code>set()</code>和<code>get()</code>都至少有一个参数</li><li>自身参数必须和另一个函数的返回值对应</li></ul><p>简单示例：在用户id和用户名称之间转换，存储的是id，但显示的是用户名。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.DataBindingOther</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.databinding.InverseMethod</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">"设计师"</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@InverseMethod(<span class="meta-string">"ui2data"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">data2ui</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"设计师1"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">ui2data</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"设计师2"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span> <span class="attr">name</span>=<span class="string">"model"</span> <span class="attr">type</span>=<span class="string">"com.ly.allendemojetpack.DataBindingOther.Model"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.ly.allendemojetpack.DataBindingOther.CusView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"@&#123;model.data2ui(model.name)&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-6-InverseBindingAdapter"><a href="#4-6-InverseBindingAdapter" class="headerlink" title="4.6 @InverseBindingAdapter"></a>4.6 @InverseBindingAdapter</h2><p>参数：</p><ul><li><code>String attribute</code>：属性值，必填</li><li><code>String event</code>：默认值，非必填，属性值 + <code>AttrChanged</code>后缀</li></ul><p>和<code>@BindingAdapter</code>配合，实现双向绑定。</p><p>完全的双向绑定需要三个函数：</p><ol><li><code>set()</code>：数据到视图</li><li><code>get()</code>：视图到数据</li><li><code>notify()</code>：通知Data Binding视图已经刷新，可以更新数据（Model）了</li></ol><p><code>set()</code>函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">"android:bindName"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">setBindName</span><span class="params">(name:<span class="type">String</span>?)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name.isNullOrEmpty() &amp;&amp; name != text) &#123;</span><br><span class="line">        text = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>get()</code>函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InverseBindingAdapter(attribute = <span class="meta-string">"android:bindName"</span>, event = <span class="meta-string">"cus_event"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">getBindName</span><span class="params">()</span></span>:String&#123;</span><br><span class="line"><span class="comment">// 这里你可以对视图上的数据进行处理最终设置给Model层</span></span><br><span class="line">    <span class="keyword">return</span> text.toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>不允许有更多参数</li><li>返回值类型必须是绑定的数据类型</li></ul><p><code>notify()</code>视图变化后要通知Data Binding开始设置Model层，也要用到<code>@BindingAdapter</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">"cus_event"</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">notifyBindName</span><span class="params">( inverseBindingListener: <span class="type">InverseBindingListener</span>)</span></span>&#123;</span><br><span class="line">  <span class="comment">// 这个函数是监听TextWatch官方源码</span></span><br><span class="line">   doAfterTextChanged &#123;</span><br><span class="line">       inverseBindingListener.onChange() </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>InverseBindingListener</code>是一个接口，里面只有一个函数，它是<code>notify()</code>函数必要的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InverseBindingListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Notifies the data binding system that the attribute value has changed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7-InverseBindingMethods"><a href="#4-7-InverseBindingMethods" class="headerlink" title="4.7 @InverseBindingMethods"></a>4.7 @InverseBindingMethods</h2><p>和<code>@BindingMethods</code>类似，但是<code>@InverseBindingMethods</code>是视图变更数据（<code>get()</code>函数）,而<code>@BindingMethods</code>是数据到视图（<code>set()</code>函数）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.ANNOTATION_TYPE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InverseBindingMethod &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件的类字节码</span></span><br><span class="line"><span class="comment">     * The View type that is associated with the attribute.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Class <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义的属性</span></span><br><span class="line"><span class="comment">     * The attribute that supports two-way binding.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">attribute</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * notify函数的名称，即用于通知数据更新的函数</span></span><br><span class="line"><span class="comment">     * The event used to notify the data binding system that the attribute value has changed.</span></span><br><span class="line"><span class="comment">     * Defaults to attribute() + "AttrChanged"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">event</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控件自身的函数名称，如果省略，即自动生成为&#123;attribute&#125;AttrChanged</span></span><br><span class="line"><span class="comment">     * The getter method to retrieve the attribute value from the View. The default is</span></span><br><span class="line"><span class="comment">     * the bean method name based on the attribute name.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">method</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果说<code>@BindingMethods</code>是关联<code>setter</code>方法和自定义属性，那么<code>@InverseBindingMethods</code>就是关联<code>getter</code>方法和自定义属性。<br><code>setter</code>是更新视图时使用的，<code>getter</code>是更新数据时使用的。<br>比<code>@BindingMethods</code>只是多了一个用于通知数据更新的<code>notify()</code>。<br>示例：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@InverseBindingMethods(</span></span><br><span class="line"><span class="meta">    InverseBindingMethod(</span></span><br><span class="line"><span class="meta">        type = CusView::class,</span></span><br><span class="line"><span class="meta">        attribute = <span class="meta-string">"android:bindName"</span>,</span></span><br><span class="line"><span class="meta">        method = <span class="meta-string">"getName"</span>, event = <span class="meta-string">"cus_event"</span></span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">object</span> Adapter &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看生成类中用于视图更新数据的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> android.databinding.InverseBindingListener ivandroidTextAttr = <span class="keyword">new</span> android.databinding.InverseBindingListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inverse of data.name</span></span><br><span class="line">        <span class="comment">// is data.setName((java.lang.String) callbackArg_0)</span></span><br><span class="line">        java.lang.String callbackArg_0 = com.liangjingkanji.databinding.MyInverseBindingAdapter.getTextString(iv);  <span class="comment">// 拿到变化的属性</span></span><br><span class="line">        <span class="comment">// localize variables for thread safety</span></span><br><span class="line">        <span class="comment">// data != null</span></span><br><span class="line">        <span class="keyword">boolean</span> dataJavaLangObjectNull = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// data.name</span></span><br><span class="line">        java.lang.String dataName = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// data</span></span><br><span class="line">        com.liangjingkanji.databinding.Bean data = mData; <span class="comment">// 拿到数据</span></span><br><span class="line">        dataJavaLangObjectNull = (data) != (<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (dataJavaLangObjectNull) &#123;</span><br><span class="line">            data.setName(((java.lang.String) (callbackArg_0))); <span class="comment">// 存储到数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果没有重写Inverse的数据变更方法，将无法让视图通知数据更新。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法会在绑定布局的时候回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeBindings</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> dirtyFlags = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            dirtyFlags = mDirtyFlags;</span><br><span class="line">            mDirtyFlags = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        java.lang.String dataName = <span class="keyword">null</span>;</span><br><span class="line">        com.liangjingkanji.databinding.Bean data = mData;</span><br><span class="line">        <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0x1aL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// read data.name</span></span><br><span class="line">                    dataName = data.getName();</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// batch finished</span></span><br><span class="line">        <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0x1aL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// api target 1</span></span><br><span class="line">            com.liangjingkanji.databinding.MyInverseBindingAdapter.setText(<span class="keyword">this</span>.iv, dataName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0x10L</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// api target 1</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">// 重点是这段代码, 将上面创建的监听器传入setTextWatcher方法</span></span><br><span class="line">            com.liangjingkanji.databinding.MyInverseBindingAdapter.setTextWatcher(<span class="keyword">this</span>.iv, (com.liangjingkanji.databinding.MyInverseBindingAdapter.BeforeTextChanged)<span class="keyword">null</span>, (com.liangjingkanji.databinding.MyInverseBindingAdapter.OnTextChanged)<span class="keyword">null</span>, (com.liangjingkanji.databinding.MyInverseBindingAdapter.AfterTextChanged)<span class="keyword">null</span>, ivandroidTextAttr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-8-总结"><a href="#4-8-总结" class="headerlink" title="4.8 总结"></a>4.8 总结</h2><p><code>@BindingBuildInfo</code>和<code>Untaggable</code>两个注解是Data Binding自动生成Java类时使用的。</p><ul><li><code>@Bindable</code>：设置数据刷新视图，自动生成BR的id</li><li><code>@BindingAdapter</code>：设置自定义属性，可以覆盖系统原有属性</li><li><code>@BindingMethod/BindingMethods</code>：关联自定义属性到控件原有的<code>setter</code>方法</li><li><code>@BindingConversion</code>：如果属性不能匹配类型，参数将自动根据类型参数匹配该注解修饰的方法来转换。</li><li><code>@InverseMethod</code>：负责实现视图和数据之间的转换</li><li><code>@InverseBindingAdapter</code>：视图通知数据刷新</li><li><code>@InverseBindingMethod/InverseBindingMethods</code>：视图通知数据刷新（如果存在已有<code>getter()</code>方法可用的情况下）</li><li>BindingMethods系统优先级高于BindingAdapter系列</li><li>所有注解的功能都是基于XML属性值为Data Binding表达式才生效（即<code>@{}</code>）</li></ul><h1 id="5-表达式"><a href="#5-表达式" class="headerlink" title="5. 表达式"></a>5. 表达式</h1><p>前面也列举了，这里着重讲几个。</p><h2 id="5-1-避免空指针"><a href="#5-1-避免空指针" class="headerlink" title="5.1 避免空指针"></a>5.1 避免空指针</h2><p><code>variable</code>的值即使设置<code>null</code>，或者没有设置，也不会报空指针异常。因为谷歌已经用Data Binding的<code>@BindingAdapter</code>注解重写了很多属性，并且在里面进行了判空处理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag"><span class="attr">name</span>=<span class="string">"userName"</span></span></span><br><span class="line"><span class="tag"><span class="attr">type</span>=<span class="string">"String"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">.....</span><br><span class="line"></span><br><span class="line">android:text="@&#123;userName&#125;"</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataBinding.setUserName(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>不会报空指针，并且还支持特有的非空多元表达式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.displayName ?? user.lastName&#125;"</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.displayName !=null user.displayName :: user.lastName&#125;"</span><br></pre></td></tr></table></figure><p>但是要注意数组越界。</p><h2 id="5-2-集合"><a href="#5-2-集合" class="headerlink" title="5.2 集合"></a>5.2 集合</h2><p>集合不属于<code>java.lang.*</code>下的，需要导入全路径</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"java.util.List&amp;lt;String&amp;gt;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"map"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"java.util.Map&lt;String, String&gt;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>上面的写法是错误的：Error:与元素类型 “variable” 相关联的 “type” 属性值不能包含 ‘&lt;’ 字符。<br>因为<code>&lt;</code>符号需要转义。</p><p>常用的转义符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    空格   &amp;nbsp    或 &amp;#160；</span><br><span class="line">&lt;小于号&amp;lt;     或 &amp;#60;</span><br><span class="line">&gt;大于号&amp;gt;     或 &amp;#62;</span><br><span class="line">&amp;与号 &amp;amp;    或 &amp;#38;</span><br><span class="line">&quot;引号 &amp;quot;   或 &amp;#34;</span><br><span class="line">‘撇号 &amp;apos;   或 &amp;#39;</span><br><span class="line">×乘号 &amp;times;  或 &amp;#215;</span><br><span class="line">÷除号 &amp;divide; 或 &amp;#247;</span><br></pre></td></tr></table></figure><p>正确写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"list"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"java.util.List&amp;lt;String&amp;gt;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">"map"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">"java.util.Map&amp;lt;String, String&amp;gt;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>集合数组都可以用<code>[]</code>来得到元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;map["firstName"]&#125;"</span><br></pre></td></tr></table></figure><h2 id="5-3-字符串"><a href="#5-3-字符串" class="headerlink" title="5.3 字符串"></a>5.3 字符串</h2><p>如果要在<code>@{}</code>中使用字符串，有三种方式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 方式1：</span><br><span class="line">android:text="@&#123;"XXX"&#125;"</span><br><span class="line"></span><br><span class="line">// 方式2：</span><br><span class="line">android:text="@&#123;'XXX'&#125;"</span><br><span class="line"></span><br><span class="line">// 方式3：</span><br><span class="line">android:text="@&#123;@string/name&#125;"</span><br></pre></td></tr></table></figure><p>同样也支持<code>@color</code>和<code>@drawable</code>。</p><h2 id="5-4-格式化字符串"><a href="#5-4-格式化字符串" class="headerlink" title="5.4 格式化字符串"></a>5.4 格式化字符串</h2><p>首先在stirngs文件中定义<code>&lt;string&gt;</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_format"</span>&gt;</span>名字：%s 性别：%s<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就可以使用Data Binding表达式了：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;@string/string_format('XXX', '男')&#125;"</span><br></pre></td></tr></table></figure><p>输出内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">名字：XXX 性别：男</span><br></pre></td></tr></table></figure><h2 id="5-5-默认值"><a href="#5-5-默认值" class="headerlink" title="5.5 默认值"></a>5.5 默认值</h2><p>如果<code>variable</code>还没有赋值，就会先使用默认值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;user.integral, default=`30`&#125;"</span><br></pre></td></tr></table></figure><h2 id="5-6-上下文"><a href="#5-6-上下文" class="headerlink" title="5.6 上下文"></a>5.6 上下文</h2><p>Data Binding提供了一个名为<code>context</code>的<code>variable</code>，可以直接使用。等价于<code>View</code>的<code>getContext()</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:color="@&#123;context.getApplication().toString()&#125;"</span><br></pre></td></tr></table></figure><h2 id="5-7-引用其他控件"><a href="#5-7-引用其他控件" class="headerlink" title="5.7 引用其他控件"></a>5.7 引用其他控件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/datingName"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/iv_dating"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"活动"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginLeft</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_toRightOf</span>=<span class="string">"@id/iv_order"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@&#123;datingName.text&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>引用包含<code>_</code>的控件id，可以直接忽略该符号，如<code>tv_name</code>直接写<code>tvName</code>。</p></blockquote><h2 id="5-8-使用Class"><a href="#5-8-使用Class" class="headerlink" title="5.8  使用Class"></a>5.8  使用Class</h2><p>如果想使用Class作为参数，那么该Class不能直接通过静态导入来使用，需要作为字段常量来使用。</p><h1 id="6-Data-Binding组件"><a href="#6-Data-Binding组件" class="headerlink" title="6. Data Binding组件"></a>6. Data Binding组件</h1><h2 id="6-1-ViewDataBinding"><a href="#6-1-ViewDataBinding" class="headerlink" title="6.1 ViewDataBinding"></a>6.1 ViewDataBinding</h2><p>自动生成的Data Binding类都继承自该类，里面的主要方法有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加绑定监听器, 可以在Variable被设置的时候回调</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addOnRebindCallback</span><span class="params">(OnRebindCallback listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 删除绑定监听器</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeOnRebindCallback</span><span class="params">(OnRebindCallback listener)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 返回被绑定的视图对象</span></span></span><br><span class="line"><span class="function">View <span class="title">getRoot</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 使所有的表达式无效并且立刻重新设置表达式. 会重新触发OnRebindCallback回调(可以看做重置)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">invalidateAll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 可以根据字段id来设置变量</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">setVariable</span><span class="params">(<span class="keyword">int</span> variableId, Object value)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 解绑布局, ui不会根据数据来变化, 但是监听器还是会触发的</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unbind</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 当ui需要根据当前数据变化时就会返回true(数据变化后有一瞬间)</span></span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasPendingBindings</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 强制ui立刻刷新数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">executePendingBindings</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>当改变数据以后（在设置了<code>Observable</code>观察者的情况下）会马上刷新UI，但是会在下一帧才会刷新UI，存在一定的延迟。在这段时间内，<code>hasPendingBindings()</code>会返回<code>true</code>。 如果想要同步刷新UI，可以调用<code>executePendingBindings()</code>。<br><strong><code>OnRebindCallback()</code>：</strong>该监听器可以监听布局绑定的生命周期。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OnRebindCallback</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ViewDataBinding</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定前</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binding</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果返回true，就会绑定布局，；返回fasle，则取消绑定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreBind</span><span class="params">(T binding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果取消绑定则回调该方法，取决于onPreBind()的返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binding</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCanceled</span><span class="params">(T binding)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定完成</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binding</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBound</span><span class="params">(T binding)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Data Binding也有一个数据变更监听器，可以监听<code>variable</code>的设置事件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mDataBinding.addOnPropertyChangedCallback(<span class="keyword">new</span> Observable.OnPropertyChangedCallback() &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 会在DataBinding设置数据的时候回调</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> sender DataBinding生成的类</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> propertyId Variable的id</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPropertyChanged</span><span class="params">(Observable sender, <span class="keyword">int</span> propertyId)</span> </span>&#123;</span><br><span class="line">        ActivityMainBinding databinding = (ActivityMainBinding) sender;</span><br><span class="line">        <span class="keyword">switch</span> (propertyId) &#123;</span><br><span class="line">          <span class="keyword">case</span> BR.data:</span><br><span class="line">            Log.d(<span class="string">"日志"</span>, <span class="string">"(MainActivity.java:54) ___ Result = "</span> + databinding.getData().getName());</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          <span class="keyword">case</span> BR.dataSecond:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="6-2-DataBindingUtil"><a href="#6-2-DataBindingUtil" class="headerlink" title="6.2 DataBindingUtil"></a>6.2 DataBindingUtil</h2><p>Data Binding不仅可以绑定Activity，还可以绑定视图内容（<code>View</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 视图</span></span><br><span class="line"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bind</span><span class="params">(View root)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; T <span class="title">bind</span><span class="params">(View root, DataBindingComponent bindingComponent)</span></span></span><br><span class="line"><span class="function">  </span></span><br><span class="line"><span class="function"><span class="comment">// 布局</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; T <span class="title">inflate</span><span class="params">(LayoutInflater inflater, <span class="keyword">int</span> layoutId, ViewGroup parent, <span class="keyword">boolean</span> attachToParent, DataBindingComponent bindingComponent)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 组件</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; T <span class="title">inflate</span><span class="params">(LayoutInflater inflater, <span class="keyword">int</span> layoutId, ViewGroup parent, <span class="keyword">boolean</span> attachToParent)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// activity</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; T <span class="title">setContentView</span><span class="params">(Activity activity, <span class="keyword">int</span> layoutId)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; T <span class="title">setContentView</span><span class="params">(Activity activity, <span class="keyword">int</span> layoutId, DataBindingComponent bindingComponent)</span></span></span><br></pre></td></tr></table></figure><p>还有两个不常用的方法，用于检索糊涂是否被绑定，如果没有绑定，返回<code>null</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">getBinding</span><span class="params">(View view)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 和getBinding不同的是如果视图没有绑定会去检查父容器是否被绑定</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; T <span class="title">findBinding</span><span class="params">(View view)</span></span></span><br></pre></td></tr></table></figure><p>其他方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据传的BR的id来返回字符串类型. 可能用于日志输出</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">convertBrIdToString</span><span class="params">(<span class="keyword">int</span> id)</span></span></span><br></pre></td></tr></table></figure><h2 id="6-3-DataBindingComponent"><a href="#6-3-DataBindingComponent" class="headerlink" title="6.3 DataBindingComponent"></a>6.3 DataBindingComponent</h2><p>每个Data Binding都可以拥有一个组件或者说设置一个默认的全局组件。<br>创建<code>DataBindingComponent</code>的步骤：</p><ol><li>创建一个类，类中写入<code>@BindingAdapter</code>注解（需设置静态），这时Android Studio会扫描自动生成对应的<code>DataBindingComponent</code>接口；</li><li>创建一个类实现<code>DataBindingComponent</code>，这时会提示有方法需要覆写，如果省略第一步，则不会有。</li></ol><p>第一步：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.databindingother</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.BindingAdapter</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.InverseBindingAdapter</span><br><span class="line"><span class="keyword">import</span> androidx.databinding.InverseBindingListener</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PinkComponent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BindingAdapter(<span class="meta-string">"android:bindName"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> TextView.<span class="title">setBindName</span><span class="params">(name: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.isNotEmpty() &amp;&amp; name != text) &#123;</span><br><span class="line">            text = <span class="string">"数据体"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindingAdapter(<span class="meta-string">"android:bindNameAttrChanged"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> TextView.<span class="title">notifyBindName</span><span class="params">(inverseBindingListener: <span class="type">InverseBindingListener</span>)</span></span> &#123;</span><br><span class="line">        doAfterTextChanged &#123;</span><br><span class="line">            inverseBindingListener.onChange()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InverseBindingAdapter(attribute = <span class="meta-string">"android:bindName"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> TextView.<span class="title">getBindName</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> text.toString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.databindingother</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CusComponent</span> : <span class="type">androidx.databinding.DataBindingComponent &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getPinkComponent</span><span class="params">()</span></span>: PinkComponent &#123;</span><br><span class="line">        <span class="comment">// 此处不能返回null</span></span><br><span class="line">        <span class="keyword">return</span> PinkComponent()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置默认组件都是由<code>DataBindingUtil</code>设置，但是方法有所不同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span><span class="title">setDefaultComponent</span><span class="params">(DataBindingComponent bindingComponent)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> DataBindingComponent<span class="title">getDefaultComponent</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>以上这种设置必须在绑定视图之前设置，并且默认全局的，只需要设置一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(Activity activity, <span class="keyword">int</span> layoutId, DataBindingComponent bindingComponent)</span></span></span><br></pre></td></tr></table></figure><p>如果没有执行<code>setDefaultComponent()</code>，则选择通过函数单独传入，则每次都要传入，否则报错。或者可以将<code>@BindingAdapter</code>注解的方法变为<code>static</code>修饰。<code>DataBindingComponent</code>只能使用<code>@BindingAdapter</code>注解。</p><h1 id="7-注意"><a href="#7-注意" class="headerlink" title="7. 注意"></a>7. 注意</h1><ol><li>可以使用<code>include</code>，但是不能作为<code>root</code>布局，<code>merge</code>不能使用；</li><li>如果没有自动生成<code>DataBinding</code>类，可以先写一个<code>variable</code>（或者make module一下）；</li><li>即使没有绑定数据（可能会等到网络请求成功之后再去绑定数据），但是只要视图创建完成，就会自动绑定数据，这是数据是一个空对象。空对象的字段也有默认值（<code>String</code>的默认值是<code>null</code>，<code>TextView</code>就会显示<code>null</code>）；并且，如果用了三元表达式，空对象的三元表达式都为<code>fasle</code>，所以建议不考虑空对象的情况；</li><li>如果给一个要求值是<code>bolean</code>类型的值自定义属性（<code>@BindingAdapter</code>）赋值一个函数，空指针的情况会返回<code>false</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Android Jetpack一系类的内容，适合使用MVVM，这里先看看MVVM。&lt;/p&gt;
&lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-MV
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://tylerLiu.top/categories/Android/Jetpack/"/>
    
    
      <category term="Jetpack" scheme="https://tylerLiu.top/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Android Jetpack：Navigation</title>
    <link href="https://tylerLiu.top/2019/07/29/Android-Jetpack-Navigation/"/>
    <id>https://tylerLiu.top/2019/07/29/Android-Jetpack-Navigation/</id>
    <published>2019-07-29T08:10:39.000Z</published>
    <updated>2019-08-22T03:13:27.082Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Android Jetpack是谷歌在2018年的I/O大会上发布的，<a href="https://developer.android.google.cn/jetpack" target="_blank" rel="noopener">官网</a>,主要包含一下模块，系列文章主要介绍架构部分的内容：</p><img src="/2019/07/29/Android-Jetpack-Navigation/11843186-36d663863dacbbd5.png"><p>这里先学习<code>Navigation</code>。</p><p>官方Demo：<a href="https://github.com/googlesamples/android-architecture-components" target="_blank" rel="noopener">android-architecture-components</a>。</p><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p><code>Navigation</code>是一个可简化Android导航和库的插件。更确切来说，<code>Navigation</code>是用来管理<code>Fragment</code>切换的，并且可以通过可视化的方式，看见App的交互流程。</p><h2 id="1-2-优点"><a href="#1-2-优点" class="headerlink" title="1.2 优点"></a>1.2 优点</h2><ul><li>处理<code>Fragment</code>的切换</li><li>默认情况下正确处理<code>Fragment</code>的前进和后退</li><li>为过渡和动画提供标准化的资源</li><li>实现和处理深层连接</li><li>可以绑定<code>Toolbar</code>、<code>BottomNavigationView</code>和<code>ActionBar</code>等</li><li><code>SafeArgs</code>（Gradle插件）数据传递时提供类型安全性</li><li><code>ViewModel</code>的支持</li></ul><h1 id="2-具体学习"><a href="#2-具体学习" class="headerlink" title="2. 具体学习"></a>2. 具体学习</h1><p><code>Navigation</code>三个关键组成部分：</p><ul><li>Navigation Graph：导航图，一个XML资源，包含集中在一个位置的所有和导航相关的信息。包括应用程序中所有单独的内容区域（也成目的地），以及用户可以通过应用程序访问的可能路径。</li><li><code>NavHost</code>：一个存储前面目的地的容器，<code>Navigation</code>组件包含了一个默认的实现了<a href="https://developer.android.google.cn/reference/androidx/navigation/fragment/NavHostFragment.html" target="_blank" rel="noopener"><code>NavHostFragment</code></a>的<code>NavHost</code>，用来显示<code>Fragment</code>的目的地。</li><li><code>NavController</code>：导航控制者，在<code>NavHost</code>中，管理应用程序导航的对象。当用户在app中进行切换页面等操作时，<code>NavController</code>在<code>NavHost</code>中协调目标内容的切换。</li></ul><h2 id="2-1-步骤1：添加依赖"><a href="#2-1-步骤1：添加依赖" class="headerlink" title="2.1 步骤1：添加依赖"></a>2.1 步骤1：添加依赖</h2><p>在module的<code>build.gradle</code>中添加依赖：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">'androidx.fragment:fragment-ktx:1.2.0-alpha01'</span></span><br><span class="line">    implementation <span class="string">'androidx.navigation:navigation-fragment-ktx:2.1.0-beta02'</span></span><br><span class="line">    implementation <span class="string">'androidx.navigation:navigation-ui-ktx:2.1.0-beta02'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要加上<code>kotlin</code>依赖，在项目的<code>build.gradle</code>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:3.4.0'</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要使用<code>SafeArgs</code>插件，可以在项目的<code>build.gradle</code>中添加：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'androidx.navigation:navigation-safe-args-gradle-plugin:2.0.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以及module下的<code>build.gradle</code>中添加：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'kotlin-android-extensions'</span></span><br><span class="line">apply plugin: <span class="string">'androidx.navigation.safeargs'</span></span><br></pre></td></tr></table></figure><h2 id="2-2-步骤2：创建Navigation导航"><a href="#2-2-步骤2：创建Navigation导航" class="headerlink" title="2.2 步骤2：创建Navigation导航"></a>2.2 步骤2：创建Navigation导航</h2><ol><li>创建基础目录：资源文件<code>res</code>目录下创建<code>navigation</code>目录；</li><li>创建一个<code>Destination</code>，如果说<code>navigation</code>是导航工具，<code>Destination</code>就是目的地，在此之前已经写好了需要用到的<code>Fragment</code>——<code>SplashFragment</code>、<code>LoginFragment</code>和<code>RegisterFragment</code>，添加<code>Desination</code>，如下示图：<img src="/2019/07/29/Android-Jetpack-Navigation/11843186-834d85cff1b6769d.png"></li></ol><p>除了上面的可视化界面，也能通过代码进行编辑，<code>login_navigation.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">navigation</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/login_navigation"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:startDestination</span>=<span class="string">"@id/splash"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"UnusedNavigation"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/login"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.ly.allendemojetpack.ui.fragment.login.LoginFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"LoginFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_login"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/splash"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.ly.allendemojetpack.ui.fragment.login.SplashFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"LoginFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_splash"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/action_welcome_to_login"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:destination</span>=<span class="string">"@id/login"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/action_welcome_to_register"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:enterAnim</span>=<span class="string">"@anim/common_fade_in"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:exitAnim</span>=<span class="string">"@anim/common_slide_out_left"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:popEnterAnim</span>=<span class="string">"@anim/common_slide_in_left"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:popExitAnim</span>=<span class="string">"@anim/common_slide_out_right"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:destination</span>=<span class="string">"@id/register"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/register"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.ly.allendemojetpack.ui.fragment.login.RegisterFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"LoginFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">tools:layout</span>=<span class="string">"@layout/fragment_register"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">argument</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"EMAIL"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:defaultValue</span>=<span class="string">"2019"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:argType</span>=<span class="string">"string"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里看看<code>navigation</code>标签的属性，<code>app:startDestination</code>，即默认的起始位置。</p><h2 id="2-3-步骤3：创建NavHostFragment"><a href="#2-3-步骤3：创建NavHostFragment" class="headerlink" title="2.3 步骤3：创建NavHostFragment"></a>2.3 步骤3：创建NavHostFragment</h2><p>这里创建一个新的<code>LoginActivity</code>作为<code>NavHostFragment</code>，在<code>activity_login.xml</code>中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".ui.activity.LoginActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/my_nav_host_fragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"androidx.navigation.fragment.NavHostFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:navGraph</span>=<span class="string">"@navigation/login_navigation"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:defaultNavHost</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>android:name</code>：值必须是<code>androidx.navigation.fragment.NavHostFragment</code>，声明这是一个<code>NavHostFragemnt</code>。</li><li><code>app:navGraph</code>：存放导航的资源文件，确定<code>Navgation Graph</code>。</li><li><code>app:defaultNavHost</code>：关联系统的返回按钮 。</li></ul><h2 id="2-4-步骤4：界面跳转、参数传递和动画"><a href="#2-4-步骤4：界面跳转、参数传递和动画" class="headerlink" title="2.4 步骤4：界面跳转、参数传递和动画"></a>2.4 步骤4：界面跳转、参数传递和动画</h2><p>在<code>SplashFragment</code>中，点击登录按钮和注册按钮可以分别跳转到<code>LoginFragment</code>和<code>RegisterFragment</code>。</p><img src="/2019/07/29/Android-Jetpack-Navigation/11843186-b88ceedefecf627c.png"><p>有两种实现方式：</p><h3 id="2-4-1-方式1：利用ID导航"><a href="#2-4-1-方式1：利用ID导航" class="headerlink" title="2.4.1 方式1：利用ID导航"></a>2.4.1 方式1：利用ID导航</h3><p>目标：<code>SplashFragment</code>携带<code>key</code>为<code>name</code>的数据跳转到<code>LoginFragment</code>，<code>LoginFragment</code>接收后显示。</p><p>登录按钮的点击事件如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">btnLogin.setOnClickListener &#123;</span><br><span class="line">    <span class="comment">// 设置动画参数</span></span><br><span class="line">    <span class="keyword">val</span> navOption = navOptions &#123;</span><br><span class="line">        anim &#123;</span><br><span class="line">            enter = R.anim.common_slide_in_right</span><br><span class="line">            exit = R.anim.common_slide_out_left</span><br><span class="line">            popEnter = R.anim.common_slide_in_left</span><br><span class="line">            popExit = R.anim.common_slide_out_right</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 参数设置</span></span><br><span class="line">    <span class="keyword">val</span> bundle = Bundle()</span><br><span class="line">    bundle.putString(<span class="string">"name"</span>, <span class="string">"TeaOf"</span>)</span><br><span class="line">    findNavController().navigate(R.id.login, bundle, navOption)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>LoginFragment</code>中就可以通过<code>Fragment</code>的<code>Bundle</code>直接获取传来的参数。代码如下：<br><code>LoginFragment.kt</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.ui.fragment.login</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.MainActivity</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.R</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_login, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> cancel: TextView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> login: Button</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> account: EditText</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">        cancel = view.findViewById(R.id.txt_cancel)</span><br><span class="line">        login = view.findViewById(R.id.btn_login)</span><br><span class="line">        account = view.findViewById(R.id.et_account)</span><br><span class="line"></span><br><span class="line">        login.setOnClickListener &#123;</span><br><span class="line">            <span class="keyword">val</span> intent = Intent(context, MainActivity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            context!!.startActivity(intent)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cancel.setOnClickListener &#123;</span><br><span class="line">            activity?.onBackPressed()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> name = arguments?.getString(<span class="string">"name"</span>)</span><br><span class="line">        account.setText(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/2019/07/29/Android-Jetpack-Navigation/11843186-874008f63561036b.png"><h3 id="2-4-2-利用Safe-Args"><a href="#2-4-2-利用Safe-Args" class="headerlink" title="2.4.2 利用Safe Args"></a>2.4.2 利用Safe Args</h3><p>目标：<code>SplashFragment</code>通过<code>Safe Args</code>将数据传到<code>RegisterFragment</code>，<code>RegisterFragment</code>接收后显示。</p><p>在前面的<code>login_navigation.xml</code>中可以看到里面还有<code>action</code>标签和<code>argument</code>标签。</p><ol><li><code>action</code>标签里面的属性</li></ol><ul><li><code>app:destination</code>：跳转完成到达的<code>fragment</code>的<code>id</code></li><li><code>app:popUpTo</code>：将<code>fragment</code>从栈中弹出，直到某个<code>id</code>的<code>fragment</code></li></ul><ol start="2"><li><code>argument</code>标签里面的属性</li></ol><ul><li><code>android:name</code>：标签名字</li><li><code>app:argType</code>：标签的类型</li><li><code>android:defaultValue</code>：默认值</li></ul><p>点击Make Project按钮，Android Studio会自动生成两个类：</p><img src="/2019/07/29/Android-Jetpack-Navigation/11843186-e1e32f87e41fc83a.png"><p><code>SplashFragment</code>的注册按钮点击事件：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">btnRegister.setOnClickListener &#123;</span><br><span class="line">    <span class="keyword">val</span> action = SplashFragmentDirections</span><br><span class="line">        .actionWelcomeToRegister()</span><br><span class="line">        .setEMAIL(<span class="string">"TeaOf1995@Gamil.com"</span>)</span><br><span class="line">    findNavController().navigate(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RegisterFragment</code>中的接收：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack.ui.fragment.login</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater</span><br><span class="line"><span class="keyword">import</span> android.view.View</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup</span><br><span class="line"><span class="keyword">import</span> android.widget.Button</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast</span><br><span class="line"><span class="keyword">import</span> androidx.fragment.app.Fragment</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.fragment.navArgs</span><br><span class="line"><span class="keyword">import</span> com.ly.allendemojetpack.R</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegisterFragment</span> : <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_register, container, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> cancel: TextView</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> register: Button</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> emailEt: EditText</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">        cancel = view.findViewById(R.id.txt_cancel)</span><br><span class="line">        register = view.findViewById(R.id.btn_register)</span><br><span class="line">        emailEt = view.findViewById(R.id.et_email)</span><br><span class="line"></span><br><span class="line">        register.setOnClickListener &#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">"Register"</span>, Toast.LENGTH_SHORT).show()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        cancel.setOnClickListener &#123;</span><br><span class="line">            activity?.onBackPressed()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> safeArgs: RegisterFragmentArgs <span class="keyword">by</span> navArgs()</span><br><span class="line">        <span class="keyword">val</span> email = safeArgs.email</span><br><span class="line">        emailEt.setText(email)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里的<code>navArgs()</code>必须在JVM 1.8 以上，低于此版本会报错，<code>Cannot inline bytecode built with JVM target 1.8 into bytecode that is being built with JVM target 1.6</code>，在Android Studio中，Settings -&gt; Other Settings -&gt; Kotlin Compiler -&gt; Target JVM version，选择1.8及以上，同时在module的<code>build.gradle</code>添加以下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">// 这里也要添加，否则报错  Error: Invoke-customs are only supported starting with Android O (--min-api</span></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="keyword">sourceCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">        <span class="keyword">targetCompatibility</span> JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all &#123;</span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">"1.8"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/2019/07/29/Android-Jetpack-Navigation/11843186-14a0286c7f881a7f.png"><h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3. 其他"></a>3. 其他</h1><p><code>Navigation</code>还可以绑定其他，如<code>menu</code>、<code>drawables</code>和<code>bottom navigation</code>，这里以<code>bototm navigation</code>为例，先在<code>navigation</code>目录下创建<code>main_navigation.xml</code>，用之前的<code>MainActivity</code>，修改<code>activity_main.xml</code>如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/my_nav_host_fragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"androidx.navigation.fragment.NavHostFragment"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:navGraph</span>=<span class="string">"@navigation/main_navigation"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:defaultNavHost</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">com.google.android.material.bottomnavigation.BottomNavigationView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/navigation_view"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"@android:color/white"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:itemIconTint</span>=<span class="string">"@color/colorAccent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:itemTextColor</span>=<span class="string">"@color/colorPrimary"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:menu</span>=<span class="string">"@menu/menu_main"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>MainActivity</code>中的处理也很简单：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemojetpack</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.NavController</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.fragment.NavHostFragment</span><br><span class="line"><span class="keyword">import</span> androidx.navigation.ui.setupWithNavController</span><br><span class="line"><span class="keyword">import</span> com.google.android.material.bottomnavigation.BottomNavigationView</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> bottomNavigationView: BottomNavigationView</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">        setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> host: NavHostFragment =</span><br><span class="line">            supportFragmentManager.findFragmentById(R.id.my_nav_host_fragment) <span class="keyword">as</span> NavHostFragment</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> navController = host.navController</span><br><span class="line"></span><br><span class="line">        initWidget()</span><br><span class="line"></span><br><span class="line">        initBottomNavigationView(bottomNavigationView, navController)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initBottomNavigationView</span><span class="params">(bottomNavigationView: <span class="type">BottomNavigationView</span>, navController: <span class="type">NavController</span>)</span></span> &#123;</span><br><span class="line">        bottomNavigationView.setupWithNavController(navController)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">initWidget</span><span class="params">()</span></span> &#123;</span><br><span class="line">        bottomNavigationView = findViewById(R.id.navigation_view)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图：</p><img src="/2019/07/29/Android-Jetpack-Navigation/11843186-8d77debcffc93404.png"><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ol><li>定义：可简化Android导航的库和插件</li><li>功能：</li></ol><ul><li>处理Fragment的切换</li><li>实现和处理深层连接</li><li>绑定<code>Toolbar</code>、<code>BottomNavigationView</code>和<code>DrawableLayout</code></li><li>支持ViewModel</li><li>Safe Args</li></ul><ol start="3"><li>准备：Android Studio 3.2及以上</li><li>三要素</li></ol><ul><li>Navigation Graph<ul><li>地图</li><li>关键标签：<ul><li><code>navigation</code></li><li><code>fragment</code></li><li><code>action</code>：可以设置动画</li><li><code>argument</code></li></ul></li></ul></li><li>NavHostFragment：容器</li><li>NavController：控制器</li></ul><ol start="5"><li>跳转</li></ol><ul><li>通过<code>fragment id</code>实现跳转</li><li><code>action</code>实现跳转</li></ul><ol start="6"><li>传参</li></ol><ul><li><code>fragment</code>自带的<code>Bundle</code></li><li>Safe Args：类型安全</li></ul><ol start="7"><li>绑定View：<code>Toolbar</code>、<code>BottomNavigationView</code>和<code>DrawableLayout</code></li><li>深层连接（本文未涉及）</li></ol><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_Jetpack" target="_blank" rel="noopener">Allen_Demo_WebService</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Android Jetpack是谷歌在2018年的I/O大会上发布的，&lt;a href=&quot;https://developer.android.
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="Jetpack" scheme="https://tylerLiu.top/categories/Android/Jetpack/"/>
    
    
      <category term="Jetpack" scheme="https://tylerLiu.top/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Android热修复 Tinker接入与源码浅析（有问题）</title>
    <link href="https://tylerLiu.top/2019/07/29/Android%E7%83%AD%E4%BF%AE%E5%A4%8D-Tinker%E6%8E%A5%E5%85%A5%E4%B8%8E%E6%BA%90%E7%A0%81%E6%B5%85%E6%9E%90/"/>
    <id>https://tylerLiu.top/2019/07/29/Android热修复-Tinker接入与源码浅析/</id>
    <published>2019-07-29T02:26:54.000Z</published>
    <updated>2019-07-31T08:17:45.392Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>现在主流热修复：阿里的AndFix、腾讯的QZone的方案、美团的Robust和腾讯的Tinker。</p><img src="/2019/07/29/Android热修复-Tinker接入与源码浅析/11843186-7e23a8bb78d2af25.png"><p>其中AndFix接入是最简单的，不过兼容性还是问题；QZone对性能有一定影响，在在Art模式下出现内存错乱的问题；美团的Robust是基于Instant Run原理的，兼容性好；Tinker就是用在微信上面的热修复，性能和兼容性不用多说。</p><p>这里主要学习腾讯的Tinker和美团的Robust。</p><p>本文主要学习Tinker的接入以及对Tinker大致原理的分析。</p><h1 id="2-Tinker的接入"><a href="#2-Tinker的接入" class="headerlink" title="2. Tinker的接入"></a>2. Tinker的接入</h1><p>接入前提（开启混淆模式）：</p><ul><li>对于API，一般来说，接入热修复，会在<code>Application</code>的<code>onCreate()</code>中进行一些初始化操，然后在某个地方去调用类似<code>loadPatch</code>这样的API去加载patch文件。</li><li>对于patch最简单的生成方式就是通过对比两个APK然后生成；注意，两个APK做对比，需要的前提是，第二次打包混淆使用的<code>mapping.txt</code>文件应该和线上的APK是一致的。</li></ul><p>最后看看该项目有没有需要配置混淆的。</p><p><a href="http://www.tinkerpatch.com/Docs/SDK" target="_blank" rel="noopener">Tinker官方文档</a></p><h2 id="2-1-步骤1：添加gradle插件依赖"><a href="#2-1-步骤1：添加gradle插件依赖" class="headerlink" title="2.1 步骤1：添加gradle插件依赖"></a>2.1 步骤1：添加gradle插件依赖</h2><p>gradle远程仓库依赖jcenter：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="comment">// TinkerPatch 插件</span></span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"com.tinkerpatch.sdk:tinkerpatch-gradle-plugin:1.2.13.3"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，在这里SDK使用了fat打包模式，不能再引用任何Tinker的相关 依赖，否则会造成版本冲突。</strong></p><h2 id="2-2-步骤2：集成TinkerPatch-SDK"><a href="#2-2-步骤2：集成TinkerPatch-SDK" class="headerlink" title="2.2 步骤2：集成TinkerPatch SDK"></a>2.2 步骤2：集成TinkerPatch SDK</h2><p>添加TinkerPatch SDK库的依赖，可以参考Sample中的<a href="https://github.com/TinkerPatch/tinkerpatch-sample/blob/master/app/build.gradle" target="_blank" rel="noopener">app/build.gradle</a>：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="comment">//若使用annotation需要单独引用,对于tinker的其他库都无需再引用</span></span><br><span class="line">    <span class="comment">// 可选，用于生成application类</span></span><br><span class="line">    compileOnly(<span class="string">"com.tinkerpatch.tinker:tinker-android-anno:1.9.13.3"</span>) &#123; changing = <span class="keyword">true</span> &#125;</span><br><span class="line">    annotationProcessor(<span class="string">"com.tinkerpatch.tinker:tinker-android-anno:1.9.13.3"</span>) &#123; changing = <span class="keyword">true</span> &#125;</span><br><span class="line">    implementation(<span class="string">"com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.13.3"</span>) &#123; changing = <span class="keyword">true</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若使用annotation自动生成Application，需要单独引入Tinker的tiner-android-anno库。除此之外，不需要单独引入tinker的其他库。</strong></p><p>为了方便，已经将TinkerPatch相关的配置放到了<a href="https://github.com/TinkerPatch/tinkerpatch-sample/blob/master/app/tinkerpatch.gradle" target="_blank" rel="noopener">tinkerpatch.gradle</a>中，所以需要引用：（注释：这块内容还需要整理，有报错！！）</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="keyword">from</span>: <span class="string">'tinkerpatch.gradle'</span></span><br></pre></td></tr></table></figure><h2 id="2-3-步骤3：配置tinkerpatchSupport参数：（可以不配置，使用默认的）"><a href="#2-3-步骤3：配置tinkerpatchSupport参数：（可以不配置，使用默认的）" class="headerlink" title="2.3 步骤3：配置tinkerpatchSupport参数：（可以不配置，使用默认的）"></a>2.3 步骤3：配置tinkerpatchSupport参数：（可以不配置，使用默认的）</h2><p>打开前面的<code>tinkerpatcch.gradle</code>文件可以看到如下参数：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tinkerpatchSupport &#123;</span><br><span class="line">    <span class="comment">/** 可以在debug的时候关闭 tinkerPatch **/</span></span><br><span class="line">    tinkerEnable = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 是否使用一键接入功能  **/</span></span><br><span class="line">    reflectApplication = <span class="keyword">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 是否开启加固模式，只有在使用加固时才能开启此开关 **/</span></span><br><span class="line">    protectedApp = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 补丁是否支持新增 Activity (新增Activity的exported属性必须为false)**/</span></span><br><span class="line">    supportComponent = <span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">    autoBackupApkPath = <span class="string">"$&#123;bakPath&#125;"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在tinkerpatch.com得到的appKey **/</span></span><br><span class="line">    appKey = <span class="string">"yourAppKey"</span></span><br><span class="line">    <span class="comment">/** 注意: 若发布新的全量包, appVersion一定要更新 **/</span></span><br><span class="line">    appVersion = <span class="string">"1.0.0"</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> pathPrefix = <span class="string">"$&#123;bakPath&#125;/$&#123;baseInfo&#125;/$&#123;variantName&#125;/"</span></span><br><span class="line">    <span class="keyword">def</span> name = <span class="string">"$&#123;project.name&#125;-$&#123;variantName&#125;"</span></span><br><span class="line"></span><br><span class="line">    baseApkFile = <span class="string">"$&#123;pathPrefix&#125;/$&#123;name&#125;.apk"</span></span><br><span class="line">    baseProguardMappingFile = <span class="string">"$&#123;pathPrefix&#125;/$&#123;name&#125;-mapping.txt"</span></span><br><span class="line">    baseResourceRFile = <span class="string">"$&#123;pathPrefix&#125;/$&#123;name&#125;-R.txt"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体含义如下：</p><table><thead><tr><th align="center">参数</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">tinkerEnable</td><td align="center">true</td><td align="center">是否开启tinkerpatchSupport插件功能</td></tr><tr><td align="center">appKey</td><td align="center">“”</td><td align="center">在TinkerPatch平台申请的appKey</td></tr><tr><td align="center">appVersion</td><td align="center">“”</td><td align="center">在TinkerPatch平台输入的版本号。<strong>注意：使用appVerison作为TinkerId，需要保证每个发布出去的基础安装包的appVersion都不一样。</strong></td></tr><tr><td align="center">reflectApplication</td><td align="center">false</td><td align="center">是否反射Application</td></tr><tr><td align="center">autoBackupAppPath</td><td align="center">“”</td><td align="center">将每次编译产生的apk/mapping.txt/R.txt归档存储的位置</td></tr><tr><td align="center">baseApkFile</td><td align="center">“”</td><td align="center"><strong>基准包的文件路径，对应tinker插件中的oldApk参数</strong>；编译补丁包时，必须指定基准版本的apk，默认值为空，表示不进行补丁包的编译</td></tr><tr><td align="center">baseProguardMappingFile</td><td align="center">“”</td><td align="center"><strong>基准包的Proguard mapping.txt文件路径，对应tinker插件appliMapping参数</strong>；在编译新的apk时，希望通过基准apk的proguard混淆方式，从而减小补丁包的大小。编译补丁包时，推荐输入基准apk生成的mapping.txt文件</td></tr><tr><td align="center">baseResourceRFile</td><td align="center">“”</td><td align="center"><strong>基准包的资源R.txt文件路径，对应tinker插件applyResourceMapping参数</strong>；在编译新的apk时，希望通过基准apk的R.txt文件来保存Resource Id的分配，这样不仅可以减少补丁包的大小，同时也能避免由于Resource Id改变导致remote view异常</td></tr><tr><td align="center">protectedApp</td><td align="center">false</td><td align="center">是否开启加固支持，<strong>注意：只有在使用加固支持时才能开启此开关</strong></td></tr><tr><td align="center">supportComponent</td><td align="center">false</td><td align="center">是否开启支持在补丁包中动态增加Activity，<strong>注意：新增Activity的exported属性必须设置为false</strong></td></tr><tr><td align="center">backupFileNameFormat</td><td align="center">‘${appName}-${variantName}’</td><td align="center">格式化命名备份文件，这里要使用单引号</td></tr></tbody></table><p><strong>一般来说，不需要修改引用Android的编译配置，也不用修改tinker插件原来的配置</strong>。对于需要特殊配置，参考<a href="https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">接入指南</a></p><h2 id="2-4-初始化TinkerPatch-SDK"><a href="#2-4-初始化TinkerPatch-SDK" class="headerlink" title="2.4 初始化TinkerPatch SDK"></a>2.4 初始化TinkerPatch SDK</h2><ol><li><code>reflectApplication = true</code>：<br>这时，无需为Tinker而改造Application。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        <span class="comment">// 我们可以从这里获得Tinker加载过程的信息</span></span><br><span class="line">        tinkerApplicationLike = TinkerPatchApplicationLike.getTinkerPatchApplicationLike();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化TinkerPatch SDK, 更多配置可参照API章节中的,初始化SDK</span></span><br><span class="line">        TinkerPatch.init(tinkerApplicationLike)</span><br><span class="line">            .reflectPatchLibrary()</span><br><span class="line">            .setPatchRollbackOnScreenOff(<span class="keyword">true</span>)</span><br><span class="line">            .setPatchRestartOnSrceenOff(<span class="keyword">true</span>)</span><br><span class="line">            .setFetchPatchIntervalByHours(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每隔3个小时(通过setFetchPatchIntervalByHours设置)去访问后台时候有更新,通过handler实现轮训的效果</span></span><br><span class="line">        TinkerPatch.with().fetchPatchUpdateAndPollWithInterval();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ol><p>将Tinker加载补丁过程的结果放在<code>TinkerPatchApplicationLike</code>中。</p><ol start="2"><li><code>reflectApplication = false</code>（一般使用）：<br>API主要就是初始化和<code>loadPatch()</code>。</li></ol><p>通常情况下，会考虑在<code>Application</code>的<code>onCreate()</code>中初始化，但Tinker推荐下面的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemotinker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tencent.tinker.anno.DefaultLifeCycle;</span><br><span class="line"><span class="keyword">import</span> com.tencent.tinker.entry.DefaultApplicationLike;</span><br><span class="line"><span class="keyword">import</span> com.tencent.tinker.lib.tinker.TinkerInstaller;</span><br><span class="line"><span class="keyword">import</span> com.tencent.tinker.loader.shareutil.ShareConstants;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化TinkerPatch SDK</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DefaultLifeCycle</span>(application = <span class="string">".SampleApplication"</span>,</span><br><span class="line">        flags = ShareConstants.TINKER_ENABLE_ALL,</span><br><span class="line">        loadVerifyFlag = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApplicationLike</span> <span class="keyword">extends</span> <span class="title">DefaultApplicationLike</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SampleApplicationLike</span><span class="params">(Application application, <span class="keyword">int</span> tinkerFlags, <span class="keyword">boolean</span> tinkerLoadVerifyFlag,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">long</span> applicationStartElapsedTime, <span class="keyword">long</span> applicationStartMillisTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 Intent tinkerResultIntent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime</span><br><span class="line">                , tinkerResultIntent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBaseContextAttached</span><span class="params">(Context base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onBaseContextAttached(base);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        TinkerManager.installedTinker(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Tinker建议编写一个<code>ApplicationLike</code>的子类，可以当成<code>Application</code>去使用，顶部的注解<code>@DefaultLifeCycle</code>，其中<code>application</code>属性，会在编译期生成一个<code>SimpleTinkerInApplication</code>类。</p><p>所以，实际上<code>Application</code>会在编译期生成，所以<code>AndroidManifest.xml</code>中是这样的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".SampleApplication"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">...</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>编译报红，build一下就可以。</p><p>实际上，注解的背后有一个Annotation Processor的处理，具体原理可以查看<a href="https://blog.csdn.net/lmj623565791/article/details/51931859" target="_blank" rel="noopener">Android 如何编写基于编译时注解的项目</a>。</p><h2 id="2-5-创建一个ApplicationLike代理类："><a href="#2-5-创建一个ApplicationLike代理类：" class="headerlink" title="2.5 创建一个ApplicationLike代理类："></a>2.5 创建一个<code>ApplicationLike</code>代理类：</h2><p>实现对Tinker的管理，<code>TinkerManager</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemotinker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.tencent.tinker.lib.tinker.Tinker;</span><br><span class="line"><span class="keyword">import</span> com.tencent.tinker.lib.tinker.TinkerInstaller;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tinker管理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TinkerManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> mIsInstalled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationLike mApplicationLike;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成Tinker初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">installedTinker</span><span class="params">(ApplicationLike applicationLike)</span> </span>&#123;</span><br><span class="line">        mApplicationLike = applicationLike;</span><br><span class="line">        <span class="keyword">if</span> (mIsInstalled) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TinkerInstaller.install(mApplicationLike);</span><br><span class="line">        mIsInstalled = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 完成patch文件的加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 补丁文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadPatch</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 是否已经安装过</span></span><br><span class="line">        <span class="keyword">if</span> (Tinker.isTinkerInstalled()) &#123;</span><br><span class="line">            TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用Tinker代理Application 获取应用全局的上下文</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 全局的上下文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Context <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mApplicationLike != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> mApplicationLike.getApplication().getApplicationContext();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-AndroidManifest-xml配置"><a href="#2-6-AndroidManifest-xml配置" class="headerlink" title="2.6 AndroidManifest.xml配置"></a>2.6 AndroidManifest.xml配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.ly.allendemotinker"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".Application"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:ignore</span>=<span class="string">"GoogleAppIndexingWarning"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个标签开判断我们生成的patch的.apk文件中的tinker_id_XXX</span></span><br><span class="line"><span class="comment">       与我们的版本号tinker_id_XXX比较。相同合法，不同则不会进行更新 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"TINKER_ID"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:value</span>=<span class="string">"tinker_id_6235657"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里加上必要的权限，然后设置<code>andorid:name = &quot;.Application&quot;</code>，最后配置<code>TINKER_ID</code>属性，里面的数字部分一般是<code>versionCode</code>。</p><h2 id="2-7-生成差异apk文件"><a href="#2-7-生成差异apk文件" class="headerlink" title="2.7 生成差异apk文件"></a>2.7 生成差异apk文件</h2><p>首先生成old.apk。<br>布局文件：<code>activity_main.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"loadPatch"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"热修复"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码文件：<code>MainActivity.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemotinker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FILE_END = <span class="string">".apk"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mFileDir;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// /storage/emulated/0/Android/data/com.ly.allendemotinker/cache/demo_patch/</span></span><br><span class="line">        mFileDir = getExternalCacheDir().getAbsolutePath() + <span class="string">"/demo_patch/"</span>;</span><br><span class="line">        <span class="comment">// 创建路径对应的文件夹</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(mFileDir);</span><br><span class="line">        <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadPatch</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        TinkerManager.loadPatch(getPatchName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPatchName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mFileDir.concat(<span class="string">"tinker"</span>).concat(FILE_END);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包成old.apk，然后修改布局代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:onClick</span>=<span class="string">"loadPatch"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"热修复"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">"parent"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"测试"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">"parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_constraintTop_toBottomOf</span>=<span class="string">"@+id/button"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其他不用修改，打包成new.apk。</p><h2 id="2-8-命令行生成补丁文件"><a href="#2-8-命令行生成补丁文件" class="headerlink" title="2.8 命令行生成补丁文件"></a>2.8 命令行生成补丁文件</h2><p>Tinker官方提供了<a href="https://github.com/Tencent/tinker/tree/master/tinker-build/tinker-patch-cli/tool_output" target="_blank" rel="noopener">命令行工具</a>：</p><img src="/2019/07/29/Android热修复-Tinker接入与源码浅析/11843186-538332d422151c1b.png"><p>将前面生成的两个apk文件和签名文件复制到该目录下（.keystore是eclipse的签名文件，.jks是Andorid Studio的签名文件，可以直接修改后缀，不影响使用），然后输入下面的命令：</p><p>参考：</p><ol><li><a href="https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650821993&amp;idx=1&amp;sn=550a90e30a398bbb652ecd65209b62e2&amp;chksm=80b781f7b7c008e17d9f5a59542f46329d28cbcd2ec075d4c2d44784f789135166a4e1949303&amp;scene=38#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzAxMTI4MTkwNQ==&amp;mid=2650821993&amp;idx=1&amp;sn=550a90e30a398bbb652ecd65209b62e2&amp;chksm=80b781f7b7c008e17d9f5a59542f46329d28cbcd2ec075d4c2d44784f789135166a4e1949303&amp;scene=38#wechat_redirect</a></li><li><a href="https://www.jianshu.com/p/d649fc014919" target="_blank" rel="noopener">https://www.jianshu.com/p/d649fc014919</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h1&gt;&lt;p&gt;现在主流热修复：阿里的AndFix、腾讯的QZone的方案、美团的Robust和腾讯的Tinker。&lt;/p&gt;
&lt;img 
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="热修复" scheme="https://tylerLiu.top/categories/Android/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
    
      <category term="热修复" scheme="https://tylerLiu.top/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>Android代码混淆</title>
    <link href="https://tylerLiu.top/2019/07/27/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    <id>https://tylerLiu.top/2019/07/27/Android代码混淆/</id>
    <published>2019-07-27T06:32:49.000Z</published>
    <updated>2019-07-31T08:08:16.462Z</updated>
    
    <content type="html"><![CDATA[<p>在Android日常开发中，<strong>混淆</strong>是必不可少的。</p><h1 id="1-混淆简介"><a href="#1-混淆简介" class="headerlink" title="1. 混淆简介"></a>1. 混淆简介</h1><p>代码混淆：Obfuscated code，是将程序中的代码以某种规则转换为难以阅读和理解的代码的一种行为。</p><h2 id="1-1-混淆的好处"><a href="#1-1-混淆的好处" class="headerlink" title="1.1 混淆的好处"></a>1.1 混淆的好处</h2><p>好处就是目的：令APK难以被逆向工程，即很大程度上增加反编译的成本。此外，Android中的“混淆”还能在打包时移除没用的资源，显著减小APK的体积。最后，还能以变通方式避免Anddroid中常见的64k方法数引用的限制。</p><p>先看看APK混淆前后的结构对比：</p><img src="/2019/07/27/Android代码混淆/5256969-397ea710d0cd14a5.webp"><img src="/2019/07/27/Android代码混淆/5256969-ba43f52c9a913b4a.webp"><p>从上面两张图可以看出：经过混淆后，APK中的包名、类名、成员名等都被替换为随机、无意义的名称，增加了代码阅读和理解的难度，提高反编译的成本。混淆前后APK的大小也从2.7M下降到1.4M。</p><h1 id="2-Android中的混淆"><a href="#2-Android中的混淆" class="headerlink" title="2. Android中的混淆"></a>2. Android中的混淆</h1><p>在Android中，平时说的“混淆”其实包含两层意思，一是<strong>Java代码的混淆</strong>，二是<strong>资源的压缩</strong>。</p><h2 id="2-1-开启混淆"><a href="#2-1-开启混淆" class="headerlink" title="2.1 开启混淆"></a>2.1 开启混淆</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            shrinkResources <span class="keyword">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是开启混淆的基本操作，通过<code>minifyEnabled</code>设置为<code>true</code>来开启混淆。同时，可以设置<code>shrinkResources</code>为<code>true</code>来开启资源的压缩。一般在打release包时才会开启混淆，因为混淆会增加额外的编译时间，所以不建议在debug下启用。<strong>此外，需要注意：只有在开启混淆的前提下开启资源压缩才有效果。</strong>以上代码中的<code>proguard-android.txt</code>表示Android系统提供的默认混淆规则文件，而<code>proguard-rules.pro</code>是我们自定义的混淆规则。下面讲解如何自定义混淆规则。</p><h2 id="2-2-代码混淆"><a href="#2-2-代码混淆" class="headerlink" title="2.2 代码混淆"></a>2.2 代码混淆</h2><p>Java平台提供了Proguard工具来帮助我们快速地对代码进行混淆。根据Java官方介绍，Proguard对应的具体中文定义如下：</p><ul><li>它是一个包含代码文件压缩、优化、混淆和校验等功能的工具；</li><li>它能检测并删除无用的类、变量、方法和属性；</li><li>它能优化字节码并删除未使用的指令；</li><li>它能将类、变量和方法的名字重命名为无意义的名称从而达到混淆效果；</li><li>它会校验处理后的代码，只有针对Java 6及以上的版本和Java ME。</li></ul><h2 id="2-3-资源压缩"><a href="#2-3-资源压缩" class="headerlink" title="2.3 资源压缩"></a>2.3 资源压缩</h2><p>在Android中，编译提供了另一个功能：<strong>资源压缩</strong>。资源压缩能帮助移除项目和仓库中未使用到的资源，有效降低APK的大小，。由于资源压缩与代码混淆是协同工作，所以，<strong>如果要开启资源压缩，一定要先开启代码混淆</strong>，否则会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Removing unused resources requires unused code shrinking to be turned on. See http://d.android.com/r/tools/shrink-resources.html for more information.</span><br><span class="line">Affected Modules: app</span><br></pre></td></tr></table></figure><h2 id="2-4-自定义要保留的资源"><a href="#2-4-自定义要保留的资源" class="headerlink" title="2.4 自定义要保留的资源"></a>2.4 自定义要保留的资源</h2><p>开启资源压缩后，系统默认会移除所有未使用的资源，如果要保留特定的资源，可以在项目中创建一个被<code>&lt;resources&gt;</code>标记的XML文件（如，<code>res/raw/keep.xml</code>），并在<code>tools:keep</code>属性中指定每个要保留的资源，在<code>tools:discard</code>属性中指定每个要舍弃的资源。这两个属性都接受逗号分隔的资源名称列表。同样，可以使用<code>*</code>作为通配符。如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span> <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:keep</span>=<span class="string">"@layout/activity_video*,@layout/dialog_update_v2"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:discard</span>=<span class="string">"@layout/unused_layout,@drawable/unused_selector"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-启用严格检查模式"><a href="#2-5-启用严格检查模式" class="headerlink" title="2.5 启用严格检查模式"></a>2.5 启用严格检查模式</h2><p>通常， 资源压缩器可以准确判定系统是否使用了资源。但，如果代码（包含库）调用了<code>Resources.getIdentifier()</code>，这就表示代码将根据动态生成的字符串查询名称。这时，资源压缩器会采取防御性行为，将所有具有匹配名称格式的资源标记为可能已使用，无法移除。如，以下代码会使所有带<code>img_</code>前缀的资源标记为已使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = String.format(<span class="string">"img_%1d"</span>, angle + <span class="number">1</span>);</span><br><span class="line">res = getResources().getIdentifier(name, <span class="string">"drawable"</span>, getPackageName());</span><br></pre></td></tr></table></figure><p>这时，可以启用严格检查模式，只会保留确定已经使用的资源。</p><h2 id="2-6-移除备用资源"><a href="#2-6-移除备用资源" class="headerlink" title="2.6 移除备用资源"></a>2.6 移除备用资源</h2><p>Gradle资源压缩器只会移除未被应用引用的资源，意味着它不会移除用于不同设备配置的<a href="https://developer.android.google.cn/guide/topics/resources/providing-resources.html#AlternativeResources" target="_blank" rel="noopener">备用资源</a>。必要时，可以使用Android Gradle插件的<code>resCOnfigs</code>属性来移除应用中不需要的备用资源文件（常见的有用于国际化支持的<code>strings.xml</code>，适配用的<code>layout.xml</code>等）。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">//保留中文和英文国际化支持</span></span><br><span class="line">        resConfigs <span class="string">"en"</span>, <span class="string">"zh"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-自定义混淆规则"><a href="#3-自定义混淆规则" class="headerlink" title="3. 自定义混淆规则"></a>3. 自定义混淆规则</h1><p>先了解常用的混淆命令：</p><h2 id="3-1-keep命令"><a href="#3-1-keep命令" class="headerlink" title="3.1 keep命令"></a>3.1 keep命令</h2><p>指一系列以<code>-keep</code>开头的命令，主要是用来保留Java中不需要进行混淆的元素。以下是常见的<code>-keep</code>命令：</p><ul><li><p><code>-keep</code>：<br>作用：保留指定的类和成员，防止被混淆处理。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 保留包：com.moos.media.entity 下面的类以及类成员</span><br><span class="line">-keep public class com.moos.media.entity.**</span><br><span class="line"></span><br><span class="line"># 保留类：NumberProgressBar</span><br><span class="line">-keep public class com.moos.media.widget.NumberProgressBar &#123;*;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>-keepclassmembers</code>：<br>作用：保留指定的类的成员（变量/方法），它们将不会被混淆。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 保留类的成员：MediaUtils类中的特定成员方法</span><br><span class="line">-keepclassmembers class com.moos.media.MediaUtils &#123;</span><br><span class="line">    public static *** getLocalVideos(android.content.Context);</span><br><span class="line">    public static *** getLocalPictures(android.content.Context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>-keepclasseswithmembers</code>：<br>作用：保留指定的类及其成员（变量/方法），前提是它们在压缩阶段没有被删除。与<code>-keep</code>使用方式类似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 保留类：BaseMediaEntity 的子类</span><br><span class="line">-keepclasseswithmembers public class * extends com.moos.media.entity.BaseMediaEntity&#123;*;&#125;</span><br><span class="line"></span><br><span class="line"># 保留类：OnProgressBarListener接口的实现类</span><br><span class="line">-keep public class * implements com.moos.media.widget.OnProgressBarListener &#123;*;&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>@keep</code>：<br>除了以上的方式，还可以使用<code>@keep</code>注解来保留代码，防止它们被混淆处理。比如，通过<code>@keep</code>来修饰一个类来保留它不被混淆：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Keep</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CloudMusicBean</span></span>(<span class="keyword">var</span> createDate: String,</span><br><span class="line">                          <span class="keyword">var</span> id: <span class="built_in">Long</span>,</span><br><span class="line">                          <span class="keyword">var</span> name: String,</span><br><span class="line">                          <span class="keyword">var</span> url: String,</span><br><span class="line">                          <span class="keyword">val</span> imgUrl: String)</span><br></pre></td></tr></table></figure></li></ul><p>也可以修饰方法或字段进行保留。</p><h2 id="3-2-其他命令"><a href="#3-2-其他命令" class="headerlink" title="3.2 其他命令"></a>3.2 其他命令</h2><ol><li><p>dontwarn<br><code>-dontwarn</code>命令一般在引入新的library时会用到，常用于处理library中无法解决的警告。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-keep class twitter4j.** &#123; *; &#125;</span><br><span class="line"></span><br><span class="line">-dontwarn twitter4j.**</span><br></pre></td></tr></table></figure></li><li><p>其他命令用法可以参考Android系统提供的默认混淆规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#混淆时不生成大小写混合的类名</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"></span><br><span class="line">#不跳过非公共的库的类</span><br><span class="line">-dontskipnonpubliclibraryclasses</span><br><span class="line"></span><br><span class="line">#混淆过程中记录日志</span><br><span class="line">-verbose</span><br><span class="line"></span><br><span class="line">#关闭预校验</span><br><span class="line">-dontpreverify</span><br><span class="line"></span><br><span class="line">#关闭优化</span><br><span class="line">-dontoptimize</span><br><span class="line"></span><br><span class="line">#保留注解</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line"></span><br><span class="line">#保留所有拥有本地方法的类名及本地方法名</span><br><span class="line">-keepclasseswithmembernames class * &#123;</span><br><span class="line">    native &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#保留自定义View的get和set方法</span><br><span class="line">-keepclassmembers public class * extends android.view.View &#123;</span><br><span class="line">   void set*(***);</span><br><span class="line">   *** get*();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#保留Activity中View及其子类入参的方法，如: onClick(android.view.View)</span><br><span class="line">-keepclassmembers class * extends android.app.Activity &#123;</span><br><span class="line">   public void *(android.view.View);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#保留枚举</span><br><span class="line">-keepclassmembers enum * &#123;</span><br><span class="line">    **[] $VALUES;</span><br><span class="line">    public *;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#保留序列化的类</span><br><span class="line">-keepclassmembers class * implements android.os.Parcelable &#123;</span><br><span class="line">  public static final android.os.Parcelable$Creator CREATOR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#保留R文件的静态成员</span><br><span class="line">-keepclassmembers class **.R$* &#123;</span><br><span class="line">    public static &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-dontwarn android.support.**</span><br><span class="line"></span><br><span class="line">-keep class android.support.annotation.Keep</span><br><span class="line"></span><br><span class="line">-keep @android.support.annotation.Keep class * &#123;*;&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;methods&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;fields&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-keepclasseswithmembers class * &#123;</span><br><span class="line">    @android.support.annotation.Keep &lt;init&gt;(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>更多混淆命令可以参考文章：<a href="https://juejin.im/entry/58f6d2a10ce463006bc9e6af" target="_blank" rel="noopener">ProGuard 最全混淆规则说明</a></p><h1 id="4-不能混淆的部分"><a href="#4-不能混淆的部分" class="headerlink" title="4. 不能混淆的部分"></a>4. 不能混淆的部分</h1><p>哪些内容应该混淆？其实，在使用代码混淆时，ProGuard对项目大部分代码进行了混淆操作，为防止编译出错，应该通过<code>-keep</code>命令保留一些元素不被混淆。所以需要知道<strong>哪些元素不应该被混淆</strong>：</p><h2 id="4-1-枚举"><a href="#4-1-枚举" class="headerlink" title="4.1 枚举"></a>4.1 枚举</h2><p>枚举不能参与到混淆中，原因是：枚举内部存在<code>values</code>方法，混淆后该方法会被重新命名，并抛出<code>NoSuchMethodException</code>。Android系统默认的混淆规则中已经添加了对枚举类的处理，无需额外进行处理。</p><h2 id="4-2-被反射的元素"><a href="#4-2-被反射的元素" class="headerlink" title="4.2 被反射的元素"></a>4.2 被反射的元素</h2><p>被反射使用的类、方法、变量、包名等不能被混淆，原因是：代码混淆过程中，被反射的元素会被重命名，而反射依旧按照先前的名称去查找元素，会发生<code>NoSuchMethodException</code>和<code>NoSuchFieldException</code>。</p><h2 id="4-3-实体类"><a href="#4-3-实体类" class="headerlink" title="4.3 实体类"></a>4.3 实体类</h2><p>实体类通常会伴随着<strong>序列化</strong>和<strong>反序列化</strong>操作。混合是将原本有特定含义的“元素”转成无意义的名称，所以，经过混淆之后，序列化之后的<code>value</code>对应的<code>key</code>已经变成没有意义的字段。同时，反序列化的过程创建对象从根本上还是借助反射，混淆后<code>key</code>会被改变，所以实体类通常也不能混淆。</p><h2 id="4-4-四大组件"><a href="#4-4-四大组件" class="headerlink" title="4.4 四大组件"></a>4.4 四大组件</h2><p>Android中的四大组件也不能被混淆，原因是：</p><ol><li>四大组件使用前都需要在<code>AndroidManifest.xml</code>文件中进行注册声明，然而混淆处理后，四大组件的类名就会被更改，实际使用的类与<code>AndroidMainifest.xml</code>中注册的类不匹配，会报错。</li><li>其他应用程序访问组件时，可能会用到类的包名和类名，经过混淆，可能会找不到对应的组件而产生异常。</li></ol><h2 id="4-5-JNI调用的Java方法"><a href="#4-5-JNI调用的Java方法" class="headerlink" title="4.5 JNI调用的Java方法"></a>4.5 JNI调用的Java方法</h2><p>当JNI调用的Java方法被混淆后，方法名会变成无意义的名称，这就与C++中原本的Java方法名不匹配，因而无法找到所调用的方法。</p><h2 id="4-6-其他不应被混淆的"><a href="#4-6-其他不应被混淆的" class="headerlink" title="4.6 其他不应被混淆的"></a>4.6 其他不应被混淆的</h2><ul><li>自定义控件不能被混淆</li><li>JavaScript调用Java的方法不应被混淆</li><li>Java的native方法不应被混淆</li><li>项目中引用的第三方库不建议混淆</li></ul><h1 id="5-混淆后的堆栈跟踪"><a href="#5-混淆后的堆栈跟踪" class="headerlink" title="5. 混淆后的堆栈跟踪"></a>5. 混淆后的堆栈跟踪</h1><p>代码经过ProGuard混淆处理后，想要读取<code>StackTrace</code>（堆栈追踪）信息就会变得困难。由于方法名和类名都经过混淆处理，即使程序崩溃，也很难定位问题。但是，ProGuard提供了补救的措施，先来看看ProGuard每次构建后生成哪些内容。</p><h2 id="5-1-混淆输出结果"><a href="#5-1-混淆输出结果" class="headerlink" title="5.1 混淆输出结果"></a>5.1 混淆输出结果</h2><p>混淆构建完成之后，会在<code>&lt;module-name&gt;/build/outputs/mapping/release/</code>目录下生成以下文件：</p><ul><li>dump.txt：说明APK内所有类文件的内部结构。</li><li>mapping.txt：提供混淆前后的内容对照表，内容主要包括类、方法和类的成员变量。</li><li>seeds.txt：罗列出未进行混淆处理的类和成员。</li><li>usage.txt：罗列出从APK移除的代码。</li></ul><h2 id="5-2-恢复堆栈跟踪"><a href="#5-2-恢复堆栈跟踪" class="headerlink" title="5.2 恢复堆栈跟踪"></a>5.2 恢复堆栈跟踪</h2><p>前面的遗留问题：混淆处理后，StackTrace定位困难。如何恢复StackTrace的定位能力？系统提供了retrace工具，结合上面定义的<code>mapping.txt</code>文件，就可以将混淆后的<strong>崩溃堆栈追踪器信息</strong>还原成正常情况下的StackTrace信息。主要有两种方式来恢复SrackTrace，为了方便理解，以下面的崩溃信息为例，协助两种方式分别进行还原：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Unable to start activity </span><br><span class="line">     Caused by: kotlin.KotlinNullPointerException</span><br><span class="line">        at com.moos.media.ui.ImageSelectActivity.k(ImageSelectActivity.kt:71)</span><br><span class="line">        at com.moos.media.ui.ImageSelectActivity.onCreate(ImageSelectActivity.kt:58)</span><br><span class="line">        at android.app.Activity.performCreate(Activity.java:6237)</span><br><span class="line">        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1107)</span><br></pre></td></tr></table></figure><ol><li><strong>通过retrace脚本工具</strong><br> 首先进入Android SDK路径的<code>tools/proguard/bin</code>中：</li></ol><img src="/2019/07/27/Android代码混淆/11843186-07e12471ad07a914.png"><p>可以看到里面有三个文件，而<code>proguardgui.bat</code>就是需要的retrace脚本。双加该脚本文件，运行，即可看到：</p><img src="/2019/07/27/Android代码混淆/11843186-fd56ca5694c9dc61.png"><p>选择Retrace栏，添加项目中混淆生成的<code>mapping.txt</code>文件所在位置，然后将混淆后的崩溃信息复制到Obfuscated stack trace一栏，点击Retrace，即可还原出崩溃日志信息。</p><ol start="2"><li>通过retrace命令行<br>首先将崩溃信息复制到<code>.txt</code>文件中，然后执行下面命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">retrace.bat -verbose mapping.txt proguard_stacktrace.txt</span><br></pre></td></tr></table></figure></li></ol><p>最终还原结果和之前效果相同：</p><img src="/2019/07/27/Android代码混淆/11843186-0d431cd96bcb8e2f.png"><p>在对stackTrace进行恢复时，发现<code>unknown Source</code>问题：</p><img src="/2019/07/27/Android代码混淆/11843186-bc3c5030553ad703.png"><p>在混淆规则上添加如下配置来提升StackSource查找效率，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 保留源文件名和具体代码行号</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br></pre></td></tr></table></figure><p>此外，每次使用ProGuard创建发布构建时都会覆盖之前版本的<code>mapping.txt</code>文件，因此，每次发布一个新版本时，建议保存一个副本。通过为每个发布构建保留一个<code>mapping.txt</code>文件副本，就可以在用户提交的已混淆的StackTrace来对旧版本应用的问题进行调试和修复。</p><h1 id="6-其他操作"><a href="#6-其他操作" class="headerlink" title="6. 其他操作"></a>6. 其他操作</h1><p>前面介绍到，APK在经过代码混淆处理后，包名、类名、成员名被转化为无意义、难以理解的名称，增加反编译的成本。Android ProGuard提供了默认的“混淆字典”，即将元素名称转为英文小写字母的形式。那么，可以定义自己的混淆字典吗？先看一张效果图：</p><img src="/2019/07/27/Android代码混淆/11843186-fc80135d648c0ff6.png"><p>只要生成一套自己的<code>.txt</code>格式的混淆字典，然后在混淆规则<code>Proguard-rules.pro</code>中应用下即可：</p><img src="/2019/07/27/Android代码混淆/11843186-c7d89bb491c6687a.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Android日常开发中，&lt;strong&gt;混淆&lt;/strong&gt;是必不可少的。&lt;/p&gt;
&lt;h1 id=&quot;1-混淆简介&quot;&gt;&lt;a href=&quot;#1-混淆简介&quot; class=&quot;headerlink&quot; title=&quot;1. 混淆简介&quot;&gt;&lt;/a&gt;1. 混淆简介&lt;/h1&gt;&lt;p&gt;代码混淆
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="其他" scheme="https://tylerLiu.top/categories/Android/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="代码混淆" scheme="https://tylerLiu.top/tags/%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    
  </entry>
  
  <entry>
    <title>Android实现RecyclerView自动滚动</title>
    <link href="https://tylerLiu.top/2019/07/27/Android%E5%AE%9E%E7%8E%B0RecyclerView%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8/"/>
    <id>https://tylerLiu.top/2019/07/27/Android实现RecyclerView自动滚动/</id>
    <published>2019-07-27T05:03:29.000Z</published>
    <updated>2019-07-31T07:58:17.543Z</updated>
    
    <content type="html"><![CDATA[<p>实现功能：使用<code>RecyclerView</code>实现垂直滚动效果。</p><h1 id="1-自定义RecyclerView实现滚动效果"><a href="#1-自定义RecyclerView实现滚动效果" class="headerlink" title="1. 自定义RecyclerView实现滚动效果"></a>1. 自定义RecyclerView实现滚动效果</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemoautopollrecyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义垂直滚动RecyclerView</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPollRecyclerView</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TIME_AUTO_POLL = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">private</span> AutoPollTask mAutoPollTask;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标示是否正在自动轮询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mRunning;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标示是否可以自动轮询，可在不需要的是否置false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mCanRun;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutoPollRecyclerView</span><span class="params">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        mAutoPollTask = <span class="keyword">new</span> AutoPollTask(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPollTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> WeakReference&lt;AutoPollRecyclerView&gt; mReference;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 使用弱引用持有外部引用，放置内存泄露</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        AutoPollTask(AutoPollRecyclerView reference) &#123;</span><br><span class="line">            mReference = <span class="keyword">new</span> WeakReference&lt;&gt;(reference);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            AutoPollRecyclerView recyclerView = mReference.get();</span><br><span class="line">            <span class="keyword">if</span> (recyclerView != <span class="keyword">null</span> &amp;&amp; recyclerView.mRunning &amp;&amp; recyclerView.mCanRun) &#123;</span><br><span class="line">                recyclerView.scrollBy(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">                recyclerView.postDelayed(recyclerView.mAutoPollTask, TIME_AUTO_POLL);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启：如果正在运行，则先停止，再开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mRunning) &#123;</span><br><span class="line">            stop();</span><br><span class="line">        &#125;</span><br><span class="line">        mCanRun = <span class="keyword">true</span>;</span><br><span class="line">        mRunning = <span class="keyword">true</span>;</span><br><span class="line">        postDelayed(mAutoPollTask, TIME_AUTO_POLL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRunning = <span class="keyword">false</span>;</span><br><span class="line">        removeCallbacks(mAutoPollTask);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"ClickableViewAccessibility"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (e.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="keyword">if</span> (mRunning) &#123;</span><br><span class="line">                    stop();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_OUTSIDE:</span><br><span class="line">                <span class="keyword">if</span> (mCanRun) &#123;</span><br><span class="line">                    start();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-实现Adapter"><a href="#2-实现Adapter" class="headerlink" title="2. 实现Adapter"></a>2. 实现Adapter</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemoautopollrecyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoPollAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">AutoPollAdapter</span>.<span class="title">BaseViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;AutoScrollLuckyListReq.DatasBean&gt; mData;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AutoPollAdapter</span><span class="params">(Context context, List&lt;AutoScrollLuckyListReq.DatasBean&gt; data)</span> </span>&#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mData = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BaseViewHolder <span class="title">onCreateViewHolder</span><span class="params">(@NonNull ViewGroup viewGroup, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(mContext).inflate(R.layout.auto_list_item, viewGroup, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BaseViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"SetTextI18n"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(@NonNull BaseViewHolder baseViewHolder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        AutoScrollLuckyListReq.DatasBean datasBean = mData.get(position % mData.size());</span><br><span class="line">        baseViewHolder.content.setText(datasBean.getPhone() + <span class="string">" 获得 "</span> + datasBean.getGiftName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BaseViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        TextView content;</span><br><span class="line"></span><br><span class="line">        BaseViewHolder(View itemView) &#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            content = itemView.findViewById(R.id.content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-适配器布局文件"><a href="#3-适配器布局文件" class="headerlink" title="3. 适配器布局文件"></a>3. 适配器布局文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"#fffcf5"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"135xxxx8888 获得 8积分"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textColor</span>=<span class="string">"#797762"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#797762"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="4-调用"><a href="#4-调用" class="headerlink" title="4. 调用"></a>4. 调用</h1><p>布局文件：<code>activity_main.xml</code>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"150dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginLeft</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginTop</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginRight</span>=<span class="string">"15dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@drawable/luckyer_bg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">RelativeLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginStart</span>=<span class="string">"23dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"1dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:background</span>=<span class="string">"#fff6ea"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_centerInParent</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:padding</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/zhongjiangzhemingdan"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.ly.allendemoautopollrecyclerview.AutoPollRecyclerView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/recyclerview"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_margin</span>=<span class="string">"20dp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Java文件：<code>MainActivity.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemoautopollrecyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AutoPollRecyclerView mRecyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line">        initData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mRecyclerView = findViewById(R.id.recyclerview);</span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.VERTICAL, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String response = <span class="string">"&#123;\n"</span> +</span><br><span class="line">                <span class="string">"    \"datas\": [\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"满10减1元\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"满10减1元\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"满10减1元\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"满10减1元\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"三花便签（20枚）\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"三花便签（20枚）\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"满10减1元\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"满10减1元\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"三花便签（20枚）\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"三花便签（20枚）\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"满10减1元\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;,\n"</span> +</span><br><span class="line">                <span class="string">"        &#123;\n"</span> +</span><br><span class="line">                <span class="string">"            \"giftName\": \"20个积分\",\n"</span> +</span><br><span class="line">                <span class="string">"            \"phone\": \"****\"\n"</span> +</span><br><span class="line">                <span class="string">"        &#125;\n"</span> +</span><br><span class="line">                <span class="string">"    ],\n"</span> +</span><br><span class="line">                <span class="string">"    \"msg\": \"success\",\n"</span> +</span><br><span class="line">                <span class="string">"    \"ret\": 0\n"</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        AutoScrollLuckyListReq autoScrollLuckyListReq = JSON.parseObject(response, AutoScrollLuckyListReq.class);</span><br><span class="line">        <span class="comment">// 0为请求成功</span></span><br><span class="line">        <span class="keyword">if</span> (autoScrollLuckyListReq.getRet() == <span class="number">0</span>) &#123;</span><br><span class="line">            AutoPollAdapter autoPollAdapter = <span class="keyword">new</span> AutoPollAdapter(getApplicationContext(),</span><br><span class="line">                    autoScrollLuckyListReq.getDatas());</span><br><span class="line">            mRecyclerView.setAdapter(autoPollAdapter);</span><br><span class="line">            <span class="comment">// 启动滚动</span></span><br><span class="line">            mRecyclerView.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-效果和Demo地址"><a href="#5-效果和Demo地址" class="headerlink" title="5. 效果和Demo地址"></a>5. 效果和Demo地址</h1><img src="/2019/07/27/Android实现RecyclerView自动滚动/11843186-e97d2347865f08c0.gif"><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_AutoPollRecyclerView" target="_blank" rel="noopener">Allen_Demo_AutoPollRecyclerView</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实现功能：使用&lt;code&gt;RecyclerView&lt;/code&gt;实现垂直滚动效果。&lt;/p&gt;
&lt;h1 id=&quot;1-自定义RecyclerView实现滚动效果&quot;&gt;&lt;a href=&quot;#1-自定义RecyclerView实现滚动效果&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="View" scheme="https://tylerLiu.top/categories/Android/View/"/>
    
    
      <category term="View" scheme="https://tylerLiu.top/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>蘸水牛肉</title>
    <link href="https://tylerLiu.top/2019/07/27/%E8%98%B8%E6%B0%B4%E7%89%9B%E8%82%89/"/>
    <id>https://tylerLiu.top/2019/07/27/蘸水牛肉/</id>
    <published>2019-07-27T03:25:47.000Z</published>
    <updated>2019-07-31T07:35:20.295Z</updated>
    
    <content type="html"><![CDATA[<p>【食材】：牛腱子两斤，老姜一大块，花椒四五十粒， 食盐适量，大蒜泥适量、调味盐、味精适量，红油辣子一大勺，花椒面适量，藤椒油适量，芝麻油适量，香葱花适量。</p><p>流程：</p><ol><li>牛腱子用洗水浸泡两三个小时，尽量泡出肉的的血水，因为肉中血水多，肉的腥味就比较重，不好吃；</li><li>浸泡好的牛肉入冷水锅，中火煮开后，再煮两分钟；</li><li>经过稍稍煮过的牛肉会紧缩一团，我们从锅中取出肉，再用温水冲洗干净牛肉表面的血污，再控干水分，以上几个步骤的目的都是尽量去除肉中的血污，让肉的味道更鲜美，而没有腥味；</li><li>砂锅中放入前面处理好的牛肉，再加入纯净水或矿泉水，再加入一块用刀拍破的老姜和花椒粒，以及适量的食盐，开 大火烧开后，转小火盖上锅盖煮，大约一个小时左右；</li><li>煮一个小时左右，我们用一根筷子插肉，如果可以轻松插入牛肉肉中就差不多了；</li><li>我们再把牛肉从锅中取出，彻底晾凉后再切成薄片备用；</li><li>取一个碗，碗中加入大蒜泥，红油辣子（最好是近期制作的在，时间长了不香），适量的花面和藤椒油卡 ，还要加上适量的调味盐（虽然前面煮肉时加过盐，但比较淡，这里还是需要加少量的调味盐），最后我们还要加入，适量的味精、芝麻油、香葱花，再搅拌匀就可以蘸牛肉了。</li></ol><img src="/2019/07/27/蘸水牛肉/13033741-0b5b682c021e4590.webp">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【食材】：牛腱子两斤，老姜一大块，花椒四五十粒， 食盐适量，大蒜泥适量、调味盐、味精适量，红油辣子一大勺，花椒面适量，藤椒油适量，芝麻油适量，香葱花适量。&lt;/p&gt;
&lt;p&gt;流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;牛腱子用洗水浸泡两三个小时，尽量泡出肉的的血水，因为肉中血水多，肉的腥
      
    
    </summary>
    
      <category term="美食" scheme="https://tylerLiu.top/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
      <category term="美食" scheme="https://tylerLiu.top/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>豆角焖面</title>
    <link href="https://tylerLiu.top/2019/07/27/%E8%B1%86%E8%A7%92%E7%84%96%E9%9D%A2/"/>
    <id>https://tylerLiu.top/2019/07/27/豆角焖面/</id>
    <published>2019-07-27T03:19:40.000Z</published>
    <updated>2019-07-27T03:22:40.402Z</updated>
    
    <content type="html"><![CDATA[<p>主料：圆滚豆角一小把切成丁，五花肉适量切成末，细刀切面适量</p><p>配料：泡发好的香菇4、5朵切丁，胡萝卜一小段切丁，葱末、姜米、蒜米，香菜碎，八角一朵，干红辣椒4、5只</p><p>酱汁：另准备4、5瓣大蒜切米放入碗中，加适量青葱碎，里面放入两匙酱油，一匙陈醋，1\3匙白糖 调成酱汁备用</p><p>流程：</p><ol><li>热锅凉油，油温7、8层热时放入八角爆香，下肉末煸炒，肉末变色断生后放入干红辣椒翻炒几下，依次加入姜末、葱末、蒜末，翻炒出香味后加入适量酱油和少许盐，加稍多些水，烧开后慢火炖煮10分钟；</li><li>冲调酱汁：10分钟后将锅里面的汤一勺一勺舀出，冲倒在酱汁碗中；</li><li>锅内留少许汤汁，以不没过豆角为限，将刀切面疏散的铺在豆角上面，尽量不要贴在锅壁上，防粘和糊；</li><li>将冲调好的酱汁分三次均匀淋在面条上，每次间隔3分钟；</li><li>9分钟后关火，在面条上淋少许香油，撒上香菜碎，用筷子轻轻将面条拨散拌匀，装盘上桌。</li></ol><p>搭配上橄榄油沙拉和花生米，营养很均衡。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主料：圆滚豆角一小把切成丁，五花肉适量切成末，细刀切面适量&lt;/p&gt;
&lt;p&gt;配料：泡发好的香菇4、5朵切丁，胡萝卜一小段切丁，葱末、姜米、蒜米，香菜碎，八角一朵，干红辣椒4、5只&lt;/p&gt;
&lt;p&gt;酱汁：另准备4、5瓣大蒜切米放入碗中，加适量青葱碎，里面放入两匙酱油，一匙陈醋，1
      
    
    </summary>
    
      <category term="美食" scheme="https://tylerLiu.top/categories/%E7%BE%8E%E9%A3%9F/"/>
    
    
      <category term="美食" scheme="https://tylerLiu.top/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>二、Android XML数据解析</title>
    <link href="https://tylerLiu.top/2019/07/26/%E4%BA%8C%E3%80%81Android-XML%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90/"/>
    <id>https://tylerLiu.top/2019/07/26/二、Android-XML数据解析/</id>
    <published>2019-07-26T08:27:11.000Z</published>
    <updated>2019-07-29T02:32:02.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-XML数据要点介绍"><a href="#1-XML数据要点介绍" class="headerlink" title="1. XML数据要点介绍"></a>1. XML数据要点介绍</h1><p>XML，可扩展标记语言。可以用来存储数据，可以看做是一个小型的数据库，<code>SharedPreference</code>就是使用XML文件存储数据的，<code>SQLite</code>底层也是一个XML文件，而在网络应用方面，通常作为信息的载体，通常把数据包装成XML来传递。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>      -----文档开始</span><br><span class="line"><span class="tag">&lt;<span class="name">persons</span>&gt;</span>                                   -----开始元素(persons)</span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span> = <span class="string">"11"</span>&gt;</span>                      -----文本节点（空白文本） 开始元素(person)属性</span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Coder-pig<span class="tag">&lt;/<span class="name">name</span>&gt;</span>              -----文本节点（空白文本） 开始元素(name)属性 结束元素</span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span>          -----文本节点（空白文本） 开始元素(age)属性 结束元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span>         -----文本节点（空白文本） 结束元素</span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span> = <span class="string">"13"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Jay<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persons</span>&gt;</span>        -----结束元素(persons)</span><br><span class="line">                     -----文档结束</span><br></pre></td></tr></table></figure><p>上面就简单的定义了一个存储person对象的xml文件的编码，注意，外面的空白区域也是文本节点。</p><h1 id="2-三种解析XML方法的比较"><a href="#2-三种解析XML方法的比较" class="headerlink" title="2. 三种解析XML方法的比较"></a>2. 三种解析XML方法的比较</h1><h2 id="2-1-SAX解析XML"><a href="#2-1-SAX解析XML" class="headerlink" title="2.1 SAX解析XML"></a>2.1 SAX解析XML</h2><p>对文档进行顺序扫描，当扫描到文档(doucument)开始与结束、元素(element)开始与结束等地方时，通知事件处理函数，由事件处理函数做相对应动作，然后继续进行同样的扫描，直至文档结束。解释速度快，占用内存小，，每需要解析一类XML，就需要编写新的适合该类的XML处理类，比较麻烦。采用的是流式解析，解析是同步的，读到哪就处理到哪。</p><h2 id="2-2-Dom解析XML"><a href="#2-2-Dom解析XML" class="headerlink" title="2.2 Dom解析XML"></a>2.2 Dom解析XML</h2><p>先把XML文档读取到内存中，然后再用DOM API来访问树形结构，并获取数据。这个写起来很简单，但是很消耗内存，假如读取的数据量大，手机内存不够的话，可能导致手机死机。不建议在Android设备中使用，解析简单的XML可以。常用的五个接口与类：<code>Docculem</code>、<code>Element</code>、<code>Node</code>、<code>NodeList</code>、<code>DOMParser</code>，Don是整个文件解析到内存中，供用户需要的节点信息，支持随机访问。</p><h2 id="2-3-pull解析XML"><a href="#2-3-pull解析XML" class="headerlink" title="2.3 pull解析XML"></a>2.3 pull解析XML</h2><p>XML pull提供了开始元素和结束元素。当某个元素开始时，可以调用<code>parser</code>、<code>nextText</code>从XML文档中提取所有字符数据。当解析到文档结束时，自动生成<code>EndDocument</code>。常用接口和类：<code>XmlPullParser</code>、<code>XmlSerializer</code>、<code>XmlPullParserFactory</code>。和SAX差不多，代码实现比较简单，非常适合移动设备，Android系统内置pull解析器，而且Android系统内部默认使用pull来解析XML文件。</p><h1 id="3-SAX解析XML"><a href="#3-SAX解析XML" class="headerlink" title="3. SAX解析XML"></a>3. SAX解析XML</h1><p>SAX是一个解析速度快且占用内存少的XML解析器，非常适合用于Android等移动设备；SAX解析XML文件采用的是事件驱动，也就是说不需要解析整个文档，而是在解析过程中，判断读取的字符是否符合XML语法的某部分（文档开头，文档结束，或者标签开头和标签结束），符合的话就会触发事件（回调方法），而这些方法都定义在<code>ContentHandler</code>接口中，而<code>ContentHandler</code>是一个接口， 使用起来不方便，所以Android准备了一个帮助类<code>DefaultHandler</code>，只需要继承这个类，重写里面对应的方法即可。</p><p>可以重写的方法：</p><ul><li><code>startDocument()</code>：当读取到文文档开始标志时触发，通常在这里完成一些初始化操作。</li><li><code>endDocument()</code>：文档结束部分，在这里完成一些善后工作。</li><li><code>startElement(names, paceURI, localName, qName, atts)</code>：参数依次问命名空间，不带命名空间的前缀标签名，带命名空间的前缀标签名，通过<code>atts</code>可以得到所有的属性名和相应的值；SAX中一个重要的特点就是它的流式处理，当遇到一个标签时，它并不会记录下以前遇到的标签，就是说，在<code>startElement()</code>中，所有知道的信息就是标签的名字和属性，至于标签的嵌套结构，上层标签的名字，是否有子元素等其他与结构相关的信息，都不知道，需要程序来完成，这使得SAX在编程处理上没有DOM方便。</li><li><code>endElement(uri, localName, name)</code>：在遇到结束标签的时候，调用该方法。</li><li><code>characters(ch, start, length)</code>：这个方法用来处理在XML文件中读到的内容，第一个参数用于存放文件的内容，后面两个参数是读到的字符串在这个数组中的起始位置和长度，使用<code>new String(ch, start, length)</code>就可以获取内容。</li></ul><p><strong>核心代码：SAX解析类——<code>SaxHelper.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemowebservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xml.sax.Attributes;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.DefaultHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SAX解析XML</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SaxHelper</span> <span class="keyword">extends</span> <span class="title">DefaultHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SaxHelper"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Person mPerson;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Person&gt; mPersons;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前解析的元素标签</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mTagName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当读取到文档开始标志时触发，通常在里面完成一些初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mPersons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Log.i(TAG, <span class="string">"读取到文档头,开始解析xml"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ELEMENT = <span class="string">"person"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读到一个开始标签时触发，第二个参数为标签名，最后一个参数为属性数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startElement</span><span class="params">(String uri, String localName, String qName, Attributes attributes)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ELEMENT.equals(localName)) &#123;</span><br><span class="line">            mPerson = <span class="keyword">new</span> Person();</span><br><span class="line">            mPerson.setId(Integer.parseInt(attributes.getValue(<span class="string">"id"</span>)));</span><br><span class="line">            Log.i(TAG, <span class="string">"开始处理person元素~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mTagName = localName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_NAME1 = <span class="string">"name"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_NAME2 = <span class="string">"age"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取标签里面的内容，第一个参数为字符串内容，后面依次为起始位置和长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">characters</span><span class="params">(<span class="keyword">char</span>[] ch, <span class="keyword">int</span> start, <span class="keyword">int</span> length)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="comment">// 判断当前标签是否有效</span></span><br><span class="line">        <span class="keyword">if</span> (mTagName != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String data = <span class="keyword">new</span> String(ch, start, length);</span><br><span class="line">            <span class="comment">// 读取标签内容</span></span><br><span class="line">            <span class="keyword">if</span> (TAG_NAME1.equals(mTagName)) &#123;</span><br><span class="line">                mPerson.setName(data);</span><br><span class="line">                Log.i(TAG, <span class="string">"处理name元素内容"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_NAME2.equals(mTagName)) &#123;</span><br><span class="line">                mPerson.setAge(Integer.parseInt(data));</span><br><span class="line">                Log.i(TAG, <span class="string">"处理age元素内容"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取到元素结束时触发，这里将对象添加到集合中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endElement</span><span class="params">(String uri, String localName, String qName)</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ELEMENT.equals(localName)) &#123;</span><br><span class="line">            mPersons.add(mPerson);</span><br><span class="line">            mPerson = <span class="keyword">null</span>;</span><br><span class="line">            Log.i(TAG, <span class="string">"处理person元素结束~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mTagName = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取到文档结束时触发，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">endDocument</span><span class="params">()</span> <span class="keyword">throws</span> SAXException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.endDocument();</span><br><span class="line">        Log.i(TAG, <span class="string">"处理person元素结束~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取persons集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ArrayList&lt;Person&gt; <span class="title">getPersons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mPersons;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> ArrayList&lt;Person&gt; <span class="title">readXmlForSax</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ParserConfigurationException, SAXException </span>&#123;</span><br><span class="line">    <span class="comment">// 获取文件资源建立输入流对象，可能是从网络获取</span></span><br><span class="line">    InputStream inputStream = getAssets().open(<span class="string">"person1.xml"</span>);</span><br><span class="line">    <span class="comment">// 创建XML解析器</span></span><br><span class="line">    SaxHelper helper = <span class="keyword">new</span> SaxHelper();</span><br><span class="line">    <span class="comment">// 得到SAX解析工厂</span></span><br><span class="line">    SAXParserFactory factory = SAXParserFactory.newInstance();</span><br><span class="line">    <span class="comment">// 创建SAX解析器</span></span><br><span class="line">    SAXParser parser = factory.newSAXParser();</span><br><span class="line">    <span class="comment">// 将XML解析器分配给解析器，对文档进行解析，将事件发送给处理器</span></span><br><span class="line">    parser.parse(inputStream, helper);</span><br><span class="line">    inputStream.close();</span><br><span class="line">    <span class="keyword">return</span> helper.getPersons();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目assets目录下有一个文件<code>person1.xml</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">persons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span> = <span class="string">"11"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>SAX解析<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">person</span> <span class="attr">id</span> = <span class="string">"13"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>XML1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>43<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">person</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persons</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_WebService" target="_blank" rel="noopener">Allen_Demo_WebService</a></p><h1 id="4-DOM解析XML数据"><a href="#4-DOM解析XML数据" class="headerlink" title="4. DOM解析XML数据"></a>4. DOM解析XML数据</h1><p>DOM解析XML文件时会将文件所有的内容以文档树的形式存放在内存中，可以使用DOM API遍历XML树，检索到需要的数据。使用DOM操作XML的代码比较直观，并且在编码方面比基于SAX的实现更加简单。但是DOM需要将XML文件的所有内容存放到内存中，所以内存消耗大，特别是对于Android设备而言，内存资源有限，因此建议使用前面的SAX解析。如果解析的内容比较小，也可以使用DOM来解析。</p><p>DOM API：</p><ul><li><p><code>DocumentBuilderFactory</code>（解析器工厂类）：创建方法<code>DoucmentBuilderFactory factory = DoucmentBuilderFactory.newInstance();</code></p></li><li><p><code>DocumentBuilder</code>（解析器类）：创建方法：通过解析器工厂类来获得<code>DocumentBuidler builder = factory.newDocumentBuilder();</code></p></li><li><p><code>Document</code>（文档树模型）：将需要解析的XML文件读入DOM解析器：<code>Document doc = builder.parse(context.getAssets().open(&quot;person2.xml&quot;));</code></p><p><strong><code>Document</code>对象代表了一个XML文档的模型，所有的其他<code>Node</code>都以一定的顺序包含在<code>Document</code>对象内，排列成树状，以后对XML文档的所有操作都与解析器无关。</strong></p></li><li><p><code>NodeList</code>（列表类）：代表一个包含一个或多个<code>Node</code>的列表，有以下两个方法：</p><ul><li><code>item(index)</code>：返回集合的第<code>index</code>个<code>Node</code>项；</li><li><code>getLength()</code>：列表的节点数</li></ul></li><li><p><code>Node</code>（节点类）：DOM中最基本的对象，代表文档树中的抽象节点，很少会直接使用；通常调用其子对象的<code>Element</code>、<code>Attr</code>、<code>Text</code>等。</p></li><li><p><code>Element</code>（元素类）：<code>Node</code>最主要的子对象，在元素中可以包含属性，因此有获取属性的方法：</p><ul><li><code>getAttrbute()</code>：获取属性值</li><li><code>getTagName()</code>：获取元素名称</li></ul></li><li><p><code>Attr</code>（属性类）：代表某个元素的属性，虽然<code>Attr</code>继承自<code>Node</code>接口，但因为<code>Attr</code>是包含在<code>Element</code>中的，但并不能将其看做是<code>Element</code>的子对象，因为<code>Attr</code>并不是DOM树的一部分。</p></li></ul><p><strong>核心代码：DOM解析类——<code>DomHelper.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemowebservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Document;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Element;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.Node;</span><br><span class="line"><span class="keyword">import</span> org.w3c.dom.NodeList;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilder;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"><span class="keyword">import</span> javax.xml.parsers.ParserConfigurationException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DOM解析XML</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DomHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DomHelper"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_NAME = <span class="string">"name"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG_AGE = <span class="string">"age"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Person&gt; <span class="title">queryXML</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 获取DOM解析器工厂</span></span><br><span class="line">            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();</span><br><span class="line">            <span class="comment">// 2. 获取DOM解析器</span></span><br><span class="line">            DocumentBuilder builder = factory.newDocumentBuilder();</span><br><span class="line">            <span class="comment">// 3. 将要解析的XML文件读入DOM解析器</span></span><br><span class="line">            Document document = builder.parse(context.getAssets().open(<span class="string">"person2.xml"</span>));</span><br><span class="line"></span><br><span class="line">            Log.i(TAG, <span class="string">"处理该文档的DomImplementation对象 = "</span> + document.getImplementation());</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. 得到文档中名称为person的元素的节点元素</span></span><br><span class="line">            NodeList nodeList = document.getElementsByTagName(<span class="string">"person"</span>);</span><br><span class="line">            <span class="comment">// 5. 遍历集合，显示集合中的元素以及子元素的名字</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodeList.getLength(); i++) &#123;</span><br><span class="line">                <span class="comment">// 先从person元素开始解析</span></span><br><span class="line">                Element personElement = (Element) nodeList.item(i);</span><br><span class="line">                Person person = <span class="keyword">new</span> Person();</span><br><span class="line">                person.setId(Integer.valueOf(personElement.getAttribute(<span class="string">"id"</span>)));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取person下的name和age的Note集合</span></span><br><span class="line">                NodeList childNodeList = personElement.getChildNodes();</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; childNodeList.getLength(); j++) &#123;</span><br><span class="line">                    Node childNode = childNodeList.item(j);</span><br><span class="line">                    <span class="comment">// 判断子Node类型是否为元素的Node</span></span><br><span class="line">                    <span class="keyword">if</span> (childNode.getNodeType() == Node.ELEMENT_NODE) &#123;</span><br><span class="line">                        Element childElement = (Element) childNode;</span><br><span class="line">                        <span class="keyword">if</span> (TAG_NAME.equals(childElement.getNodeName())) &#123;</span><br><span class="line">                            person.setName(childElement.getFirstChild().getNodeValue());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_AGE.equals(childElement.getNodeName())) &#123;</span><br><span class="line">                            person.setAge(Integer.valueOf(childElement.getFirstChild().getNodeValue()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                persons.add(person);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParserConfigurationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SAXException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> persons;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-PULL解析XML数据"><a href="#5-PULL解析XML数据" class="headerlink" title="5. PULL解析XML数据"></a>5. PULL解析XML数据</h1><p>除了SAX和DOM解析XML之外，Android系统内置了Pull解析器用来解析XML，比如<code>SharedPreference</code>就是使用内置的pull解析配置文件的。它的使用和SAX类似，都是采用事件驱动来完成XML的解析，而pull代码比较简单，只需处理开始和结束的事件，通常使用<code>switch</code>语句，根据事件不同的类型，匹配不同的处理方式，有五种事件：<code>START_DOCUMENT</code>、<code>START_TAG</code>、<code>TEXT</code>、<code>END_TAG</code>、<code>END_DUCOMENT</code>。</p><p>XML pull 提供了开始元素和结束元素。当某个元素开始的时候，可以调用<code>paser.nextText</code>从XML文档中提取所有字符数据。当解析到一个文档结束时，自动生成<code>EndDocument</code>事件。在PULL解析过程中返回的是数字，且需要自己获取产生事件然后做出相应的操作，而不像SAX那样由处理器触发一种事件的方法，执行我们的代码：读取到XML的声明返回<code>START_DOCUMENT</code>；结束返回<code>END_DOCUMENT</code>；开始标签返回<code>START_TAG</code>；结束标签返回<code>END_TAG</code>；文本返回<code>TEXT</code>。<br>使用PULL解析XML的流程：</p><ol><li><p>获取一个<code>XmlPullPaser</code>类的引用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1：通过xml解析工厂获得实体类</span></span><br><span class="line">XmlPullPaserFactory factory = XmlPullPaserFactory.newInstance(); XmlPullPaser paser = factory.newPullPaser();</span><br><span class="line"><span class="comment">// 方式2：直接获得实体类</span></span><br><span class="line">XmlPullPaser paser = Xml.newPullPaser();</span><br></pre></td></tr></table></figure></li><li><p>为<code>paser</code>解析器对象提供xml流与编码格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">paser.setInput(xml, <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure></li><li><p>获得事件的类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> eventType = paser.getEventType();</span><br></pre></td></tr></table></figure></li><li><p>用<code>switch</code>对不同的事件类型进行不同的处理：</p></li></ol><ul><li><code>START_DUCUMENT</code>：开始读文档时触发，在这里完成初始化操作；</li><li><code>START_TAG</code>:开始读标签，通过<code>paser</code>的<code>getName()</code>方法获得标签名信息比较，使用<code>getAttributeValue(index)</code>获取属性值；</li><li>对于文字节点<code>TEXT</code>可以使用<code>paser.nextText()</code>获得节点内容；</li><li><code>END_TAG</code>：标签结束；</li><li><code>paser.next()</code>：循环解析下一个元素。</li></ul><p><strong>核心代码：PULL解析XML——<code>PullHelper.java</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemowebservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParser;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PULL解析XML</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullHelper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Person&gt; <span class="title">getPersons</span><span class="params">(InputStream xml)</span> <span class="keyword">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class="line">        ArrayList&lt;Person&gt; persons = <span class="keyword">null</span>;</span><br><span class="line">        Person person = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 创建一个XML解析工厂</span></span><br><span class="line">        XmlPullParserFactory factory = XmlPullParserFactory.newInstance();</span><br><span class="line">        <span class="comment">// 获得XML解析类的引用</span></span><br><span class="line">        XmlPullParser parser = factory.newPullParser();</span><br><span class="line">        parser.setInput(xml, <span class="string">"UTF_8"</span>);</span><br><span class="line">        <span class="comment">// 获得事件类型</span></span><br><span class="line">        <span class="keyword">int</span> eventType = parser.getEventType();</span><br><span class="line">        <span class="keyword">while</span> (eventType != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">                <span class="keyword">case</span> XmlPullParser.START_DOCUMENT:</span><br><span class="line">                    persons = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> XmlPullParser.START_TAG:</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"person"</span>.equals(parser.getName())) &#123;</span><br><span class="line">                        person = <span class="keyword">new</span> Person();</span><br><span class="line">                        <span class="comment">// 取出属性值</span></span><br><span class="line">                        <span class="keyword">int</span> id = Integer.parseInt(parser.getAttributeValue(<span class="number">0</span>));</span><br><span class="line">                        person.setId(id);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"name"</span>.equals(parser.getName())) &#123;</span><br><span class="line">                        <span class="comment">// 获取该节点的内容</span></span><br><span class="line">                        String name = parser.nextText();</span><br><span class="line">                        <span class="keyword">assert</span> person != <span class="keyword">null</span>;</span><br><span class="line">                        person.setName(name);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"age"</span>.equals(parser.getName())) &#123;</span><br><span class="line">                        <span class="keyword">int</span> age = Integer.parseInt(parser.nextText());</span><br><span class="line">                        <span class="keyword">assert</span> person != <span class="keyword">null</span>;</span><br><span class="line">                        person.setAge(age);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> XmlPullParser.END_TAG:</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"person"</span>.equals(parser.getName())) &#123;</span><br><span class="line">                        <span class="keyword">assert</span> persons != <span class="keyword">null</span>;</span><br><span class="line">                        persons.add(person);</span><br><span class="line">                        person = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            eventType = parser.next();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> persons;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    InputStream inputStream = getAssets().open(<span class="string">"person3.xml"</span>);</span><br><span class="line">    ArrayList&lt;Person&gt; persons = PullHelper.getPersons(inputStream);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; persons.size(); i++) &#123;</span><br><span class="line">        Log.i(TAG, i + <span class="string">" == "</span> + persons.get(i).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用PULL生成XML数据的流程：</p><ol><li><p>创建<code>XMlSerializer</code>（XML序列化类）的实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XmlSerializer serializer = Xml.newSerializer();</span><br></pre></td></tr></table></figure></li><li><p>为<code>XmlSerializer</code>设置输出流与编码格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializersetOutput(out, <span class="string">"UTF-8"</span>);</span><br></pre></td></tr></table></figure></li><li><p>为<code>XMlSerializer</code>设置XML的编码格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer.startDocument(<span class="string">"UTF-8"</span>, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li><li><p>设置根元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"person"</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>foreach</code>循环遍历<code>persons</code>集合中所有的元素，同时依次写入标签与属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Person p: persons)&#123;</span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"person"</span>);</span><br><span class="line">serializer.attribute(<span class="keyword">null</span>, <span class="string">"id"</span>, p.getId() + <span class="string">""</span>);</span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"name"</span>);</span><br><span class="line">serializer.text(p.getName());</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"name"</span>);</span><br><span class="line">serializer.startTag(<span class="keyword">null</span>, <span class="string">"age"</span>);</span><br><span class="line">serializer.text(p.getAge() + <span class="string">""</span>);</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"age"</span>);</span><br><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"person"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置跟踪完结元素：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer.endTag(<span class="keyword">null</span>, <span class="string">"persons"</span>);</span><br></pre></td></tr></table></figure></li><li><p>结束文档编写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serializer.endDocument();</span><br></pre></td></tr></table></figure></li><li><p>调用<code>flush()</code>，将内存中的数据写入文件中并关闭输出流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out.flush();</span><br><span class="line">out.close();</span><br></pre></td></tr></table></figure></li></ol><p>核心代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(List&lt;Person&gt; persons, OutputStream out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    XmlSerializer serializer = Xml.newSerializer();</span><br><span class="line">    serializer.setOutput(out, <span class="string">"UTF-8"</span>);</span><br><span class="line">    serializer.startDocument(<span class="string">"UTF-8"</span>, <span class="keyword">true</span>);</span><br><span class="line">    serializer.startTag(<span class="keyword">null</span>, <span class="string">"persons"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Person p : persons) &#123;</span><br><span class="line">        serializer.startTag(<span class="keyword">null</span>, <span class="string">"person"</span>);</span><br><span class="line">        serializer.attribute(<span class="keyword">null</span>, <span class="string">"id"</span>, p.getId() + <span class="string">""</span>);</span><br><span class="line">        serializer.startTag(<span class="keyword">null</span>, <span class="string">"name"</span>);</span><br><span class="line">        serializer.text(p.getName());</span><br><span class="line">        serializer.endTag(<span class="keyword">null</span>, <span class="string">"name"</span>);</span><br><span class="line">        serializer.startTag(<span class="keyword">null</span>, <span class="string">"age"</span>);</span><br><span class="line">        serializer.text(p.getAge() + <span class="string">""</span>);</span><br><span class="line">        serializer.endTag(<span class="keyword">null</span>, <span class="string">"age"</span>);</span><br><span class="line">        serializer.endTag(<span class="keyword">null</span>, <span class="string">"person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    serializer.endTag(<span class="keyword">null</span>, <span class="string">"persons"</span>);</span><br><span class="line">    serializer.endDocument();</span><br><span class="line">    out.flush();</span><br><span class="line">    out.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_WebService" target="_blank" rel="noopener">Allen_Demo_WebService</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-XML数据要点介绍&quot;&gt;&lt;a href=&quot;#1-XML数据要点介绍&quot; class=&quot;headerlink&quot; title=&quot;1. XML数据要点介绍&quot;&gt;&lt;/a&gt;1. XML数据要点介绍&lt;/h1&gt;&lt;p&gt;XML，可扩展标记语言。可以用来存储数据，可以看做是一个小型的数
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="网络" scheme="https://tylerLiu.top/categories/Android/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="WebService" scheme="https://tylerLiu.top/tags/WebService/"/>
    
  </entry>
  
  <entry>
    <title>一、Android调用WebService</title>
    <link href="https://tylerLiu.top/2019/07/26/%E4%B8%80%E3%80%81Android%E8%B0%83%E7%94%A8WebService/"/>
    <id>https://tylerLiu.top/2019/07/26/一、Android调用WebService/</id>
    <published>2019-07-26T08:12:57.000Z</published>
    <updated>2019-07-31T08:07:13.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android调用WebService类似于一些给我们提供了原始数据API服务的数据平台，比如聚合数据。而WebService则用到了XML和SOAP，通过HTTP协议即可完成与远程机器的交互。</p></blockquote><h1 id="1-WebService简介"><a href="#1-WebService简介" class="headerlink" title="1. WebService简介"></a>1. WebService简介</h1><h2 id="1-1-WebService的引入"><a href="#1-1-WebService的引入" class="headerlink" title="1.1 WebService的引入"></a>1.1 WebService的引入</h2><p>手机硬件资源是有限的，对于一些复杂的数据处理和计算，通常都是部署在远程服务器上，然后安卓手机作为对应的客户端。为了让Android APP与远程服务器进行交互，肯定需要一些技术，这里使用WebService就可以了。</p><p>什么是WebService？</p><p>简单来说，就是某些站点开放出来的服务，当然也可以自己开发一个service，也就是一些方法，通过URI，指定某一个方法名，发出请求，站点的这个服务（方法），接收请求后，根据传入的参数进行一些处理，然后将处理的结果以XML的形式返回。客户端收到这些XML并进行解析，然后显示或者进行其他操作。</p><p>例如，很多大的站点提供天气预报的WebSwevice、查询某网站的数据的WebService，只要发送请求，它就返回天气预报、某网站的数据，然后在客户端就能显示出来。</p><h2 id="1-2-主要采用的四个技术"><a href="#1-2-主要采用的四个技术" class="headerlink" title="1.2 主要采用的四个技术"></a>1.2 主要采用的四个技术</h2><h3 id="1-2-1-XML"><a href="#1-2-1-XML" class="headerlink" title="1.2.1 XML"></a>1.2.1 XML</h3><p>可扩展的标记语言。同时采用XML Schema。正式因为WebWervice采用了XML，才使得它可以跨越各种编程语言。</p><h3 id="1-2-2-SOAP"><a href="#1-2-2-SOAP" class="headerlink" title="1.2.2 SOAP"></a>1.2.2 SOAP</h3><p>简单对象访问协议。提供了标准的RPC（Remote Procedure Call，远程调用过程）方法来调用WebService。SOAP规范中定义了SOAP消息格式，以及怎样通过HTTP协议来使用SOAP。SOAP是基于XML语言和XSD标准的，其中XML是SOAP的数据编码方式。</p><h3 id="1-2-3-WSDL"><a href="#1-2-3-WSDL" class="headerlink" title="1.2.3 WSDL"></a>1.2.3 WSDL</h3><p>WSDL是一种基于XML的用于描述WenService及其操作、参数和返回值的语言。因为是基于XML，一些IDE可以根据WenService来生成WSDL文档，又能通过导入WSDL文档 ，生成调用相应WebWervice的代码。</p><h3 id="1-2-4-UDDI"><a href="#1-2-4-UDDI" class="headerlink" title="1.2.4 UDDI"></a>1.2.4 UDDI</h3><p>用于在网上自动查找WebService，一旦WebService注册到UDDI，客户就可以很方便的查找和定位所需要的WebService。   </p><h2 id="1-3-WebService模型"><a href="#1-3-WebService模型" class="headerlink" title="1.3 WebService模型"></a>1.3 WebService模型</h2><ul><li>服务提供者：把自己的服务注册到“服务注册中心”。</li><li>服务请求者：到“服务注册中心”查找相应的服务，然后定位到“服务提供者”。</li><li>服务提供者：开始为“服务请求者”提供相应的服务。</li></ul><h1 id="2-去哪里获取WebService"><a href="#2-去哪里获取WebService" class="headerlink" title="2. 去哪里获取WebService"></a>2. 去哪里获取WebService</h1><p>网上有很多WebService的站点，这里选取了WebXmlu为例。</p><p>WebXml：<a href="http://www.webxml.com.cn/zh_cn/index.aspx" target="_blank" rel="noopener">http://www.webxml.com.cn/zh_cn/index.aspx</a></p><img src="/2019/07/26/一、Android调用WebService/11843186-85a70b9dc88caa11.png"><img src="/2019/07/26/一、Android调用WebService/11843186-5ba756df7190bd3e.png"><h1 id="3-第三方jar包准备"><a href="#3-第三方jar包准备" class="headerlink" title="3. 第三方jar包准备"></a>3. 第三方jar包准备</h1><p>首先如果想在Android平台上调用WebService，需要依赖第三方库ksoap2，而在Android平台上使用的是ksoap2-android-releases，一个高效、轻量级的SOAP开发包。</p><ol><li>ksoap2-Android项目网站：<br><a href="https://simpligility.github.io/ksoap2-android/index.html" target="_blank" rel="noopener">https://simpligility.github.io/ksoap2-android/index.html</a></li><li>ksoap2-android-assembly发布版本列表(包含所有可用版本jar包)：<br><a href="https://oss.sonatype.org/content/repositories/ksoap2-android-releases/com/google/code/ksoap2-android/ksoap2-android-assembly/" target="_blank" rel="noopener">https://oss.sonatype.org/content/repositories/ksoap2-android-releases/com/google/code/ksoap2-android/ksoap2-android-assembly/</a></li></ol><h1 id="4-获取相关参数"><a href="#4-获取相关参数" class="headerlink" title="4. 获取相关参数"></a>4. 获取相关参数</h1><p>首先找到需要获取的服务，然后记录相关的参数：<code>NameSpace</code>（命名空间）、<code>SoapAction</code>以及<code>URL</code>。</p><img src="/2019/07/26/一、Android调用WebService/11843186-70ebd2865bece62b.png"><img src="/2019/07/26/一、Android调用WebService/11843186-1e89b8be4f8b6d2d.png"><p>比如这里查找天气的查询参数，点击去可以看到一个参数文档：</p><img src="/2019/07/26/一、Android调用WebService/11843186-18783eb0756adcbd.png"><p>假设这里需要的是天气查询部分的功能：</p><img src="/2019/07/26/一、Android调用WebService/11843186-97490ce74afa498f.png"><p>这里可以拿到<code>SoapAction</code>和<code>NameSpace</code>。</p><p>这是一个测试页，可以不用填id信息，点击查询，可以看到这样一个页面：</p><img src="/2019/07/26/一、Android调用WebService/11843186-5a91a680272bb756.png"><p>这就是返回的XML文件，下面就需要去解析这个文件，这里的.gif表示天气的图标。</p><p>上面的查询号码归属地也是同理操作。</p><h1 id="5-注册"><a href="#5-注册" class="headerlink" title="5. 注册"></a>5. 注册</h1><img src="/2019/07/26/一、Android调用WebService/11843186-2ca8fd15f9c2dbeb.png"><img src="/2019/07/26/一、Android调用WebService/11843186-5f37902ccf47d8aa.png"><h1 id="6-Demo"><a href="#6-Demo" class="headerlink" title="6. Demo"></a>6. Demo</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ly.allendemowebservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.os.Handler;</span><br><span class="line"><span class="keyword">import</span> android.os.Message;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.ksoap2.SoapEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapObject;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapPrimitive;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.serialization.SoapSerializationEnvelope;</span><br><span class="line"><span class="keyword">import</span> org.ksoap2.transport.HttpTransportSE;</span><br><span class="line"><span class="keyword">import</span> org.xmlpull.v1.XmlPullParserException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebService demo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Liuyang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/7/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MainActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText mEtParam;</span><br><span class="line">    <span class="keyword">private</span> TextView mTvResult;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String mResult;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER_ID = <span class="string">"1e3c36a0f18b4da4affa98cdd26ab0b4"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义获取手机信息的SoapAction与命名空间,作为常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME_SPACE = <span class="string">"http://WebXml.com.cn/"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 天气查询相关参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEATHER_URL = <span class="string">"http://ws.webxml.com.cn/WebServices/WeatherWS.asmx"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEATHER_METHOD = <span class="string">"getWeather"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEATHER_SOAP_ACTION = <span class="string">"http://WebXml.com.cn/getWeather"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 号码归属地查询相关参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADDRESS_URL = <span class="string">"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADDRESS_METHOD = <span class="string">"getMobileCodeInfo"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ADDRESS_SOAP_ACTION = <span class="string">"http://WebXml.com.cn/getMobileCodeInfo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个Handler用来更新页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint</span>(<span class="string">"HandlerLeak"</span>)</span><br><span class="line">    <span class="keyword">private</span> Handler mHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x001</span>:</span><br><span class="line">                    mTvResult.setText(mResult);</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"获取天气信息成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0x002</span>:</span><br><span class="line">                    mTvResult.setText(mResult);</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"号码归属地查询成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        bindViews();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bindViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mEtParam = findViewById(R.id.et_param);</span><br><span class="line">        Button btnAttribution = findViewById(R.id.btn_attribution);</span><br><span class="line">        Button btnWeather = findViewById(R.id.btn_weather);</span><br><span class="line">        mTvResult = findViewById(R.id.tv_result);</span><br><span class="line"></span><br><span class="line">        btnAttribution.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        btnWeather.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_attribution:</span><br><span class="line">                <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        getLand();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_weather:</span><br><span class="line">                <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        getWeather();</span><br><span class="line"><span class="comment">//                        getWeather1();</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;.start();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个号码的归属地信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getLand</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mResult = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 根据命名空间和方法得到SoapObject对象</span></span><br><span class="line">        SoapObject soapObject = <span class="keyword">new</span> SoapObject(NAME_SPACE, ADDRESS_METHOD);</span><br><span class="line">        soapObject.addProperty(<span class="string">"mobileCode"</span>, mEtParam.getText().toString());</span><br><span class="line">        soapObject.addProperty(<span class="string">"userID"</span>, USER_ID);</span><br><span class="line">        <span class="comment">// 通过SOAP1.1协议得到envelop对象</span></span><br><span class="line">        SoapSerializationEnvelope envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</span><br><span class="line">        <span class="comment">// 将soapObject对象设置为envelop对象，传出消息</span></span><br><span class="line">        envelope.bodyOut = soapObject;</span><br><span class="line">        <span class="comment">// 设置是否调用的是dotNet开发的WebService</span></span><br><span class="line">        <span class="comment">// 指定webservice的类型的（java，PHP，dotNet）</span></span><br><span class="line">        envelope.dotNet = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 等价于envelop.bodyOut = soapObject;</span></span><br><span class="line">        envelope.setOutputSoapObject(soapObject);</span><br><span class="line">        HttpTransportSE httpTransportSe = <span class="keyword">new</span> HttpTransportSE(ADDRESS_URL);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">"号码服务设置完毕,准备开启服务"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始调用远程方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到远程方法返回的SOAP对象</span></span><br><span class="line">            httpTransportSe.call(ADDRESS_SOAP_ACTION, envelope);</span><br><span class="line">            Log.i(TAG, <span class="string">"调用号码归属地查询WebService服务成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Log.i(TAG, <span class="string">"调用号码归属地查询WebService服务失败 = IOException"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Log.i(TAG, <span class="string">"调用号码归属地查询WebService服务失败 = XmlPullParserException"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取返回的数据，并开始解析</span></span><br><span class="line">        SoapObject object = (SoapObject) envelope.bodyIn;</span><br><span class="line">        mResult = object.getProperty(<span class="number">0</span>).toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = object.getPropertyCount();</span><br><span class="line">        Log.i(TAG, <span class="string">"count = "</span> + count);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            Log.i(TAG, i + <span class="string">" === "</span> + object.getProperty(i).toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mHandler.sendEmptyMessage(<span class="number">0x002</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"发送号码归属地数据完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个城市的天气信息，使用封装的工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getWeather1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        SoapNetUtils.getInstance().doSoapRequest();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个城市的天气信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getWeather</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mResult = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 根据命名空间和方法得到SoapObject对象</span></span><br><span class="line">        SoapObject soapObject = <span class="keyword">new</span> SoapObject(NAME_SPACE, WEATHER_METHOD);</span><br><span class="line">        soapObject.addProperty(<span class="string">"theCityCode"</span>, mEtParam.getText().toString());</span><br><span class="line">        soapObject.addProperty(<span class="string">"theUserID"</span>, USER_ID);</span><br><span class="line">        <span class="comment">// 通过SOAP1.1协议得到envelop对象</span></span><br><span class="line">        SoapSerializationEnvelope envelope = <span class="keyword">new</span> SoapSerializationEnvelope(SoapEnvelope.VER11);</span><br><span class="line">        <span class="comment">// 将soapObject对象设置为envelop对象，传出消息</span></span><br><span class="line">        envelope.bodyOut = soapObject;</span><br><span class="line">        <span class="comment">// 设置是否调用的是dotNet开发的WebService</span></span><br><span class="line">        <span class="comment">// 指定webservice的类型的（java，PHP，dotNet）</span></span><br><span class="line">        envelope.dotNet = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 等价于envelop.bodyOut = soapObject;</span></span><br><span class="line">        envelope.setOutputSoapObject(soapObject);</span><br><span class="line">        HttpTransportSE httpTransportSe = <span class="keyword">new</span> HttpTransportSE(WEATHER_URL);</span><br><span class="line"></span><br><span class="line">        Log.i(TAG, <span class="string">"天气服务设置完毕,准备开启服务"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 开始调用远程方法</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 得到远程方法返回的SOAP对象</span></span><br><span class="line">            httpTransportSe.call(WEATHER_SOAP_ACTION, envelope);</span><br><span class="line">            Log.i(TAG, <span class="string">"调用天气查询WebService服务成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Log.i(TAG, <span class="string">"调用天气查询WebService服务失败 = IOException"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (XmlPullParserException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            Log.i(TAG, <span class="string">"调用天气查询WebService服务失败 = XmlPullParserException"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取返回的数据，并开始解析，以下都通过getClass()直到数据的类型，才去进行强制类型转换的</span></span><br><span class="line">        SoapObject object = (SoapObject) envelope.bodyIn;</span><br><span class="line">        SoapPrimitive primitive;</span><br><span class="line">        <span class="keyword">int</span> count = object.getPropertyCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            SoapObject object1 = (SoapObject) object.getProperty(i);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; object1.getPropertyCount(); j++) &#123;</span><br><span class="line">                primitive = (SoapPrimitive) object1.getProperty(j);</span><br><span class="line">                Log.i(TAG, <span class="string">"第"</span> + j + <span class="string">"个数据为："</span> + primitive.getName() + <span class="string">" = "</span> + primitive.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        primitive = (SoapPrimitive) ((SoapObject) object.getProperty(<span class="number">0</span>)).getProperty(<span class="number">37</span>);</span><br><span class="line"></span><br><span class="line">        mResult = (String) primitive.getValue();</span><br><span class="line">        mHandler.sendEmptyMessage(<span class="number">0x001</span>);</span><br><span class="line">        Log.i(TAG, <span class="string">"发送天气数据完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Demo地址：<a href="https://gitee.com/QingFengBaiYu/Allen_Demo_WebService" target="_blank" rel="noopener">Allen_Demo_WebService</a></p><img src="/2019/07/26/一、Android调用WebService/11843186-c31a93ae4bc7daf3.png">]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Android调用WebService类似于一些给我们提供了原始数据API服务的数据平台，比如聚合数据。而WebService则用到了XML和SOAP，通过HTTP协议即可完成与远程机器的交互。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
      <category term="Android" scheme="https://tylerLiu.top/categories/Android/"/>
    
      <category term="网络" scheme="https://tylerLiu.top/categories/Android/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="WebService" scheme="https://tylerLiu.top/tags/WebService/"/>
    
  </entry>
  
</feed>
